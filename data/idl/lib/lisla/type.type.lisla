(import standard.identifer.UpperCamelIdentifer)
(import standard.identifer.LowerSnakeIdentifer)

(newtype Idl : (Array Declaration))

(union Declaration
    (case Import : ImportDeclaration
        (label import)
    )
    (case Tuple : TupleDeclaration
        (label tuple)
    )
    (case Struct : StructDeclaration
        (label struct)
    )
    (case Union : UnionDeclaration
        (label union)
    )
    (case Newtype : NewtypeDeclaration
        (label newtype)
    )
    (case Enum : EnumDeclaration
        (label enum)
    )
)


; -------------------- Name --------------------------
(newtype TypePath : UpperCamelIdentifer)
(newtype VariableName : LowerSnakeIdentifer)
(newtype KindName : UpperCamelIdentifer)
(newtype TypeName : UpperCamelIdentifer)


; -------------------- Type Reference --------------------------
(union TypeReference
    (case Primitive : TypePath)
    (case Generic : GenericTypeReference)
)
(tuple GenericTypeReference
    (var name : TypePath)
    (var arguments : TypeArgument repeated)
)
(newtype TypeArgument : (Value Any))
(newtype (Value T) : Any)



; -------------------- Type Declaration --------------------------
(union TypeDeclaration
    (case Primitive : TypeName)
    (case Generic : GenericTypeDeclaration)
)
(tuple GenericTypeDeclaration
    (var name : TypeName)
    (var parameters : TypeParameterDeclaration repeated)
)
(union TypeParameterDeclaration
    (case Value : ValueTypeParameterDeclaration
        (label value)
    )
    (case Type : TypeTypeParameterDeclaration
        (label tuple)
    )
)
(tuple ValueTypeParameterDeclaration
    (var name : VariableName)
    (label :)
    (var type : TypeReference)
    (var attributes : TypeParameterDeclarationAttributes)
)
(tuple TypeTypeParameterDeclaration
    (var name : TypeName)
    (var attributes : TypeParameterDeclarationAttributes)
)
(newtype TypeKindParameter : (Const (value _))
(struct TypeParameterDeclarationAttributes
    (var rule : VarRule optional spread)
)


; -------------------- Import --------------------------
(tuple ImportDeclaration 
    (label package)
    (var path : TypePath)
    (var attributes : ImportAttributes optional spread)
)
(tuple ImportAttributes
    (label as)
    (var name : TypeName)
)


; -------------------- Struct --------------------------
(tuple StructDeclaration
    (var name : TypeDeclaration)
    (var elements : StructElement repeated)
)
(union StructElement
    (case Extends : ExtendsElement
        (label extends)
    )
    (case Const : ConstElement
        (label const)
    )
    (case Var : StructVarElement
        (label var)
    )
)
(tuple ExtendsElement
    (var name : VariableName)
    (label :)
    (var type : TypeReference)
)
(tuple ConstElement
    (var name : String)
    (label :)
    (var value : (Value T))
)
(tuple StructVarElement
    (var name : VariableName)
    (label :)
    (var type : TypeReference)
    (var attributes : StructVarAttributes spread)
)
(struct StructVarAttributes
    (var rule : VarRule optional forward)
    (var nest : StructVarNest optional forward)
    (var tag : (Value Int32) optional)
)
(union VarRule
    (case Default : (Tuple (Value Any)) (label default))
    (case Optional : (Const optional))
    (case Repeated : (Const repeated))
)
(union StructVarNest
    (case Spreads : (Const spread))
    (case Forwards : (Const forward))
)

; -------------------- Union --------------------------
(newtype VariantName : String)
(tuple UnionDeclaration
    (var name : TypeDeclaration)
    (var elements : UnionElement repeated)
)
(tuple UnionElement
    (case Case : UnionCaseElement
        (label case)
    )
)
(tuple UnionCaseElement
    (var name : VariantName)
    (label :)
    (var type : TypeReference)
    (var attributes : UnionCaseAttributes spread)
)
(struct UnionCaseAttributes
    (var tag : (Value Int32) optional)
    (var header : UnionCaseHeader repeated forward)
)
(enum UnionCaseHeader
    (case Label : LabelElement
        (label label)
    )
    (case Const : ConstElement
        (label const)
    )
)

; -------------------- Tuple --------------------------
(tuple TupleDeclaration
    (var name : TypeDeclaration)
    (var elements : TupleElement repeaded)
)
(union TupleElement
    (case Label : LabelElement
        (label label)
    )
    (case Var : TupleVarElement
        (label var)
    )
)
(tuple LabelElement
    (var name : String)
)
(tuple TupleVarElement
    (var name : VariableName)
    (label :)
    (var type : TypeReference)
    (var attributes : TupleVarAttributes spread)
)
(struct TupleVarAttributes
    (var rule : VarRule optional forward)
    (var nest : TupleVarNest optional forward)
    (var tag : (Value Int32) optional)
)
(union TupleVarNest
    (case Spread : (Const spread))
)

; -------------------- Newtype --------------------------
(tuple NewtypeDeclaration
    (var name : TypeDeclaration)
    (label :)
    (var underly_type : TypeReference)
)


; ------------------- Enum ------------------------------ 
(tuple EnumDeclaration
    (var type : TypeDeclaration)
    (var elements : EnumElement repeated)
)
(union EnumElement
    (case Case : EnumCaseElement
        (label case)
    )
)
(tuple EnumCaseElement
    (var name : VariableName)
    (var attributes : EnumCaseAttributes spread)
)
(struct EnumCaseAttributes
    (var key : String optional)
    (var value : (Value Int32) optional (key =))
)
