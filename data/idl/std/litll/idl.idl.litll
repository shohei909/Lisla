/// 'IDL for Litll Interface Description Language (Litll IDL)'
/// [license "public domain"]
/// [schema litll.idl.Idl]
[package litll]
[import litll.core]

/// [document_tag litll.idl.document.IdlDocumentTag]
[tuple Idl
    [package_declaration PackageDeclaration]
    [import_declarations.. ImportDeclaration]
    [type_definitions.. TypeDefinition]
]

[enum PackageDeclaration
    [package [package PackagePath]]
]

[enum ImportDeclaration
    [import [module ModulePath]]
]

/// [document_tag litll.idl.document.TypeDefinitionDocumentTag]
[enum TypeDefinition
    [newtype [name TypeNameDeclaration] [type TypeReference]]
    [tuple [name TypeNameDeclaration] [arguments.. TupleArgument]]
    [enum [name TypeNameDeclaration] [constructors.. EnumConstructor]]
    [struct [name TypeNameDeclaration] [fields.. StructField]]
]

[enum TypeNameDeclaration
    [primitive< [name TypeName]]
    [generic: [name TypeName] [parameters.. TypeParameterDeclaration]]
]
[enum TypeParameterDeclaration
    [type_name< [type_name TypeName]]
    [dependence< [declaration TypeDependenceDeclaration]]
]
[newtype TypeName String]
[tuple TypeDependenceDeclaration
    [name TypeDependenceName] [type TypeReference]
]
[newtype TypeDependenceName String]

[enum TupleElement
    [label< [constant String]]
    [data: [argument Argument]]
]
[tuple Argument
    [name ArgumentName]
    [type TypeReference]
    [default_value? Any]
]
/// '''
/// Uppercase and lowercase ASCII Latin letters A-Z (\u0041-\u005a), and a-z (\u0061-\u007a), and the ASCII underscore(_) are allowed. 
/// Additionally, some suffixes are supported.
/// "?"   : Optional argument. (default value is disabled)
/// ".."  : Rest arguments. (default value is disabled)
/// "<"   : Unfolded argument.
/// '''
[newtype ArgumentName String]

[enum EnumConstructor
    [primitive< [name EnumConstructorName]]
    [parameterized< [parameterized ParameterizedEnumConstructor]]
]
[tuple ParameterizedEnumConstructor
    [name EnumConstructorName] [elements.. TupleElement]
]

/// '''
/// Uppercase and lowercase ASCII Latin letters A-Z (\u0041-\u005a), and a-z (\u0061-\u007a), and the ASCII underscore(_) are allowed. 
/// Additionally, the following suffixes are supported.
/// ":"  : Tuple style. Its first element have not to be label.
/// "<"   : Unfolding argument. Its argument must be one and the argument is unfolded.
/// '''
[newtype EnumConstructorName String]
[enum StructElement
    [label< 
        /// 'Multiple suffix and Unfolding suffix are disabled'
        [name StructFieldName]
    ]
    [field< StructField]
]
[enum StructField
    [header StructFieldName] 
    [type TypeReference] 
    [default_value? Any]
]

/// '''
/// Uppercase and lowercase ASCII Latin letters A-Z (\u0041-\u005a), and a-z (\u0061-\u007a), and the ASCII underscore(_) are allowed. 
/// Additionally, the following suffixes are supported
/// "?"   : Optional field. (default value is disabled)
/// ".."  : Multiple field. (default value is disabled)
/// "<"   : Unfolded field. 
/// "?<"  : Optional unfolded field. (default value is disabled)
/// "..<" : Multiple unfolded field. (default value is disabled)
/// '''
[newtype StructFieldName String]

[newtype PackagePath String]
[newtype ModulePath String]
[newtype TypePath String]

[enum TypeReference
    [primitive< [type_path TypePath]]
    [generic< [type GenericTypeReference]]
]
[tuple GenericTypeReference
    [type_path TypePath] [parameters.. TypeReferenceParameter]
]
[newtype TypeReferenceParameter Any]
