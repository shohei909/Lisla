(package lisla)

(import lisla.core)

;; (document_tag lisla.idl.document.IdlDocumentTag)
(tuple Idl
    (package_declaration PackageDeclaration)
    (import_declarations.. ImportDeclaration)
    (type_definitions.. TypeDefinition)
)

(tuple PackageDeclaration
    package (package PackagePath)
)

(tuple ImportDeclaration
    import (module ModulePath)
)

;; (document_tag lisla.idl.document.TypeDefinitionDocumentTag)
(enum TypeDefinition
    (newtype (name TypeNameDeclaration) (type TypeReference))
    (tuple (name TypeNameDeclaration) (arguments.. TupleElement))
    (enum (name TypeNameDeclaration) (constructors.. EnumConstructor))
    (struct (name TypeNameDeclaration) (fields.. StructElement))
)

(enum TypeNameDeclaration
    (primitive< (name TypeName))
    (generic: (name TypeName) (parameters.. TypeParameterDeclaration))
)
(enum TypeParameterDeclaration
    (type_name< (type_name TypeName))
    (dependence< (declaration TypeDependenceDeclaration))
)
;; '''
;; Uppercase and lowercase ASCII Latin letters A-Z (\u0041-\u005a), and a-z (\u0061-\u007a), and the ASCII underscore(_) are allowed. 
;; '''
(newtype TypeName String)
(tuple TypeDependenceDeclaration
    (name TypeDependenceName) (type TypeReference)
)
(newtype TypeDependenceName String)

(enum TupleElement
    (label< (constant String))
    (argument< (argument Argument))
)
(tuple Argument
    (name ArgumentName)
    (type TypeReference)
    (default_value? Any)
)

;; '''
;; Uppercase and lowercase ASCII Latin letters A-Z (\u0041-\u005a), and a-z (\u0061-\u007a), and the ASCII underscore(_) are allowed. 
;; Additionally, the following suffixes are supported.
;; "?"   : Optional argument. (default value is disabled)
;; ".."  : Rest arguments. (default value is disabled)
;; "<"   : Inlined argument. (default value is disabled)
;; "?<"  : Optional inlining argument. (default value is disabled)
;; "..<" : Multiple inlining argument. (default value is disabled)
;; 
;; ## Restriction
;; ### Inlinable type
;;     String
;;     Array
;;     Tuple
;;     Enum
;;     Struct
;; 
;; In other words, all type can be inlined. Newtype resolves to one of the above types.
;; '''
(newtype ArgumentName String)

(enum EnumConstructor
    (primitive< (name EnumConstructorName))
    (parameterized< (parameterized ParameterizedEnumConstructor))
)
(tuple ParameterizedEnumConstructor
    (name EnumConstructorName) (elements.. TupleElement)
)

;; '''
;; Uppercase and lowercase ASCII Latin letters A-Z (\u0041-\u005a), and a-z (\u0061-\u007a), and the ASCII underscore(_) are allowed. 
;; Additionally, the following suffixes are supported.
;; ":"   : Tuple style . Its first element have not to be label.
;; "<"   : Inlining constructor. Its argument must be one and the argument will be inlined.
;; 
;; ## Restriction
;; ### Inlinable type
;;     Array
;;     Tuple
;;     Enum
;;     Struct
;; 
;; #### Not unfoldable type
;;     String
;; '''
(newtype EnumConstructorName String)

(enum StructElement
    (label<
        (name StructElementName)
    )
    (nested_label: 
        (name StructElementName)
    )
    (field< (field StructField))
)
(tuple StructField
    (name StructElementName)
    (type TypeReference)
    (default_value? Any)
)

;; ''' 
;; Uppercase and lowercase ASCII Latin letters A-Z (\u0041-\u005a), and a-z (\u0061-\u007a), and the ASCII underscore(_) are allowed. 
;; Additionally, the following suffixes are supported
;; "?"   : Optional field. (default value is disabled)
;; ".."  : Multiple field. (default value is disabled)
;; "<"   : Inlining field. 
;; "?<"  : Optional inlining field. (default value is disabled)
;; "..<" : Multiple inlining field. (default value is disabled)
;; "<<"  : Merge struct fields. (default value is disabled)
;; 
;; ## Restriction
;; ### Inlinable type
;; * String
;; * Array
;; * Tuple
;; * Enum
;; * Struct
;; 
;; In other words, all type can be inlined. Newtype resolves to one of the above types.
;;
;; ### Mergeable type:    
;; * Struct
;; 
;; #### Not mergeable type:
;; * String
;; * Array
;; * Tuple
;; * Enum
;; '''
(newtype StructElementName String)

;; (completion_self)
(newtype LibraryName String)
;; (completion_self)
(newtype LibraryPath String)
;; (completion_self)
(newtype PackagePath String)
;; (completion_self)
(newtype ModulePath String)
;; (completion_self)
(newtype TypePath String)

;; (completion_const String)
;; (completion_const Array)
;; (completion_type TypeNameDeclaration)
(enum TypeReference
    (primitive< (type_path TypePath))
    (generic< (type GenericTypeReference))
)
(tuple GenericTypeReference
    (type_path TypePath) (parameters.. TypeReferenceParameter)
)
(newtype TypeReferenceParameter Any)

;; 'IDL for Lisla Interface Description Language (Lisla IDL)'
