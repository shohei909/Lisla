// This file is generated by hxlitll.
package litll.idl.std.delitllfy.ir;
class PrimitiveIrDelitllfier {
    public static function process(context:litll.idl.delitllfy.DelitllfyContext):litll.core.ds.Result<litll.idl.std.data.ir.PrimitiveIr, litll.idl.delitllfy.DelitllfyError> return switch context.litll {
        case litll.core.Litll.Arr(array) if (array.length == 3 && array.data[0].match(litll.core.Litll.Str(_.data => "fixed_int")) && array.data[1].match(litll.core.Litll.Str(_)) && array.data[2].match(litll.core.Litll.Str(_))):{
            var arrayContext = new litll.idl.delitllfy.DelitllfyArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("fixed_int");
                var arg0 = switch (arrayContext.read(litll.idl.std.delitllfy.core.UInt64Delitllfier.process)) {
                    case litll.core.ds.Result.Ok(data):{
                        data;
                    };
                    case litll.core.ds.Result.Err(data):{
                        return litll.core.ds.Result.Err(data);
                    };
                };
                var arg1 = switch (arrayContext.read(litll.idl.std.delitllfy.core.BigIntDelitllfier.process)) {
                    case litll.core.ds.Result.Ok(data):{
                        data;
                    };
                    case litll.core.ds.Result.Err(data):{
                        return litll.core.ds.Result.Err(data);
                    };
                };
                litll.core.ds.Result.Ok(litll.idl.std.data.ir.PrimitiveIr.FixedInt(arg0, arg1));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    litll.core.ds.Result.Err(error);
                };
            };
        };
        case litll.core.Litll.Arr(array) if (array.length == 3 && array.data[0].match(litll.core.Litll.Str(_.data => "fixed_uint")) && array.data[1].match(litll.core.Litll.Str(_)) && array.data[2].match(litll.core.Litll.Str(_))):{
            var arrayContext = new litll.idl.delitllfy.DelitllfyArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("fixed_uint");
                var arg0 = switch (arrayContext.read(litll.idl.std.delitllfy.core.UInt64Delitllfier.process)) {
                    case litll.core.ds.Result.Ok(data):{
                        data;
                    };
                    case litll.core.ds.Result.Err(data):{
                        return litll.core.ds.Result.Err(data);
                    };
                };
                var arg1 = switch (arrayContext.read(litll.idl.std.delitllfy.core.BigUIntDelitllfier.process)) {
                    case litll.core.ds.Result.Ok(data):{
                        data;
                    };
                    case litll.core.ds.Result.Err(data):{
                        return litll.core.ds.Result.Err(data);
                    };
                };
                litll.core.ds.Result.Ok(litll.idl.std.data.ir.PrimitiveIr.FixedUint(arg0, arg1));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    litll.core.ds.Result.Err(error);
                };
            };
        };
        case litll.core.Litll.Arr(array) if (array.length == 2 && array.data[0].match(litll.core.Litll.Str(_.data => "variable_int")) && array.data[1].match(litll.core.Litll.Str(_))):{
            var arrayContext = new litll.idl.delitllfy.DelitllfyArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("variable_int");
                var arg0 = switch (arrayContext.read(litll.idl.std.delitllfy.core.BigIntDelitllfier.process)) {
                    case litll.core.ds.Result.Ok(data):{
                        data;
                    };
                    case litll.core.ds.Result.Err(data):{
                        return litll.core.ds.Result.Err(data);
                    };
                };
                litll.core.ds.Result.Ok(litll.idl.std.data.ir.PrimitiveIr.VariableInt(arg0));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    litll.core.ds.Result.Err(error);
                };
            };
        };
        case litll.core.Litll.Arr(array) if (array.length == 2 && array.data[0].match(litll.core.Litll.Str(_.data => "variable_uint")) && array.data[1].match(litll.core.Litll.Str(_))):{
            var arrayContext = new litll.idl.delitllfy.DelitllfyArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("variable_uint");
                var arg0 = switch (arrayContext.read(litll.idl.std.delitllfy.core.BigUIntDelitllfier.process)) {
                    case litll.core.ds.Result.Ok(data):{
                        data;
                    };
                    case litll.core.ds.Result.Err(data):{
                        return litll.core.ds.Result.Err(data);
                    };
                };
                litll.core.ds.Result.Ok(litll.idl.std.data.ir.PrimitiveIr.VariableUint(arg0));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    litll.core.ds.Result.Err(error);
                };
            };
        };
        case litll.core.Litll.Arr(array) if (array.length == 2 && array.data[0].match(litll.core.Litll.Str(_.data => "float64")) && array.data[1].match(litll.core.Litll.Str(_))):{
            var arrayContext = new litll.idl.delitllfy.DelitllfyArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("float64");
                var arg0 = switch (arrayContext.read(litll.idl.std.delitllfy.core.Float64Delitllfier.process)) {
                    case litll.core.ds.Result.Ok(data):{
                        data;
                    };
                    case litll.core.ds.Result.Err(data):{
                        return litll.core.ds.Result.Err(data);
                    };
                };
                litll.core.ds.Result.Ok(litll.idl.std.data.ir.PrimitiveIr.Float64(arg0));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    litll.core.ds.Result.Err(error);
                };
            };
        };
        case litll.core.Litll.Arr(array) if (array.length == 2 && array.data[0].match(litll.core.Litll.Str(_.data => "boolean")) && array.data[1].match(litll.core.Litll.Str(_.data => "true")) && array.data[1].match(litll.core.Litll.Str(_.data => "false"))):{
            var arrayContext = new litll.idl.delitllfy.DelitllfyArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("boolean");
                var arg0 = switch (arrayContext.read(litll.idl.std.delitllfy.core.BooleanDelitllfier.process)) {
                    case litll.core.ds.Result.Ok(data):{
                        data;
                    };
                    case litll.core.ds.Result.Err(data):{
                        return litll.core.ds.Result.Err(data);
                    };
                };
                litll.core.ds.Result.Ok(litll.idl.std.data.ir.PrimitiveIr.Boolean(arg0));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    litll.core.ds.Result.Err(error);
                };
            };
        };
        case litll.core.Litll.Arr(array) if (array.length == 2 && array.data[0].match(litll.core.Litll.Str(_.data => "string")) && array.data[1].match(litll.core.Litll.Str(_))):{
            var arrayContext = new litll.idl.delitllfy.DelitllfyArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("string");
                var arg0 = switch (arrayContext.read(StringDelitllfier.process)) {
                    case litll.core.ds.Result.Ok(data):{
                        data;
                    };
                    case litll.core.ds.Result.Err(data):{
                        return litll.core.ds.Result.Err(data);
                    };
                };
                litll.core.ds.Result.Ok(litll.idl.std.data.ir.PrimitiveIr.String(arg0));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    litll.core.ds.Result.Err(error);
                };
            };
        };
        case litll.core.Litll.Arr(array) if (array.length == 2 && array.data[0].match(litll.core.Litll.Str(_.data => "binary")) && array.data[1].match(litll.core.Litll.Str(_))):{
            var arrayContext = new litll.idl.delitllfy.DelitllfyArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("binary");
                var arg0 = switch (arrayContext.read(litll.idl.std.delitllfy.core.BinaryDelitllfier.process)) {
                    case litll.core.ds.Result.Ok(data):{
                        data;
                    };
                    case litll.core.ds.Result.Err(data):{
                        return litll.core.ds.Result.Err(data);
                    };
                };
                litll.core.ds.Result.Ok(litll.idl.std.data.ir.PrimitiveIr.Binary(arg0));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    litll.core.ds.Result.Err(error);
                };
            };
        };
        case data:litll.core.ds.Result.Err(litll.idl.delitllfy.DelitllfyError.ofLitll(context.litll, litll.idl.delitllfy.DelitllfyErrorKind.UnmatchedEnumConstructor(["fixed_int", "fixed_uint", "variable_int", "variable_uint", "float64", "boolean", "string", "binary"])));
    };
}