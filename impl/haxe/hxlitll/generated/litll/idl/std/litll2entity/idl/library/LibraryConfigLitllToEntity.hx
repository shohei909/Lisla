// This file is generated by hxlitll.
package litll.idl.std.litll2entity.idl.library;
class LibraryConfigLitllToEntity {
    public static function process(context:litll.idl.litll2entity.LitllToEntityContext):hxext.ds.Result<litll.idl.std.data.idl.library.LibraryConfig, litll.idl.litll2entity.error.LitllToEntityError> return switch (context.litll) {
        case litll.core.Litll.Str(_):{
            hxext.ds.Result.Err(litll.idl.litll2entity.error.LitllToEntityError.ofLitll(context.litll, litll.idl.litll2entity.error.LitllToEntityErrorKind.CantBeString));
        };
        case litll.core.Litll.Arr(array):{
            {
                var arg0 = haxe.ds.Option.None;
                var arg1 = haxe.ds.Option.None;
                var arg2 = [];
                var arg3 = [];
                for (litllData in array.data) {
                    var context = new litll.idl.litll2entity.LitllToEntityContext(litllData, context.config);
                    switch litllData {
                        case litll.core.Litll.Arr(array) if (array.length == 2 && array.data[0].match(litll.core.Litll.Str(_.data => "version")) && array.data[1].match(litll.core.Litll.Str(_))):switch (arg0) {
                            case haxe.ds.Option.Some(_):{
                                return hxext.ds.Result.Err(litll.idl.litll2entity.error.LitllToEntityError.ofLitll(litllData, litll.idl.litll2entity.error.LitllToEntityErrorKind.StructElementDuplicated("version")));
                            };
                            case haxe.ds.Option.None:{
                                arg0 = haxe.ds.Option.Some({
                                    var context = new litll.idl.litll2entity.LitllToEntityContext(array.data[1], context.config);
                                    switch (litll.idl.std.litll2entity.util.version.VersionLitllToEntity.process(context)) {
                                        case hxext.ds.Result.Ok(data):{
                                            data;
                                        };
                                        case hxext.ds.Result.Err(data):{
                                            return hxext.ds.Result.Err(data);
                                        };
                                    };
                                });
                            };
                        };
                        case litll.core.Litll.Arr(array) if (array.length == 2 && array.data[0].match(litll.core.Litll.Str(_.data => "description")) && array.data[1].match(litll.core.Litll.Str(_))):switch (arg1) {
                            case haxe.ds.Option.Some(_):{
                                return hxext.ds.Result.Err(litll.idl.litll2entity.error.LitllToEntityError.ofLitll(litllData, litll.idl.litll2entity.error.LitllToEntityErrorKind.StructElementDuplicated("description")));
                            };
                            case haxe.ds.Option.None:{
                                arg1 = haxe.ds.Option.Some({
                                    var context = new litll.idl.litll2entity.LitllToEntityContext(array.data[1], context.config);
                                    switch (litll.idl.std.litll2entity.StringLitllToEntity.process(context)) {
                                        case hxext.ds.Result.Ok(data):{
                                            data;
                                        };
                                        case hxext.ds.Result.Err(data):{
                                            return hxext.ds.Result.Err(data);
                                        };
                                    };
                                });
                            };
                        };
                        case litll.core.Litll.Arr(array) if (array.length == 3 && array.data[0].match(litll.core.Litll.Str(_.data => "extension")) && array.data[1].match(litll.core.Litll.Str(_))):arg2.push(switch (litll.idl.std.litll2entity.idl.library.FileExtensionDeclarationLitllToEntity.process(context)) {
                            case hxext.ds.Result.Ok(data):{
                                data;
                            };
                            case hxext.ds.Result.Err(data):{
                                return hxext.ds.Result.Err(data);
                            };
                        });
                        case litll.core.Litll.Arr(array) if (1 <= array.length && array.data[0].match(litll.core.Litll.Str(_.data => "library"))):arg3.push(switch (litll.idl.std.litll2entity.idl.library.LibraryDependenceDeclarationLitllToEntity.process(context)) {
                            case hxext.ds.Result.Ok(data):{
                                data;
                            };
                            case hxext.ds.Result.Err(data):{
                                return hxext.ds.Result.Err(data);
                            };
                        });
                        case litllData:return hxext.ds.Result.Err(litll.idl.litll2entity.error.LitllToEntityError.ofLitll(litllData, litll.idl.litll2entity.error.LitllToEntityErrorKind.UnmatchedStructElement(["version", "description", "extension", "library"])));
                    };
                };
                switch (litll.idl.std.data.idl.library.LibraryConfig.litllToEntity(switch (arg0) {
                        case haxe.ds.Option.Some(data):{
                            data;
                        };
                        case haxe.ds.Option.None:{
                            return hxext.ds.Result.Err(litll.idl.litll2entity.error.LitllToEntityError.ofLitll(context.litll, litll.idl.litll2entity.error.LitllToEntityErrorKind.StructElementNotFound("version")));
                        };
                    }, switch (arg1) {
                        case haxe.ds.Option.Some(data):{
                            data;
                        };
                        case haxe.ds.Option.None:{
                            return hxext.ds.Result.Err(litll.idl.litll2entity.error.LitllToEntityError.ofLitll(context.litll, litll.idl.litll2entity.error.LitllToEntityErrorKind.StructElementNotFound("description")));
                        };
                    }, arg2, arg3)) {
                    case hxext.ds.Result.Ok(data):{
                        hxext.ds.Result.Ok(data);
                    };
                    case hxext.ds.Result.Err(data):{
                        hxext.ds.Result.Err(litll.idl.litll2entity.error.LitllToEntityError.ofLitll(context.litll, data));
                    };
                };
            };
        };
    };
}