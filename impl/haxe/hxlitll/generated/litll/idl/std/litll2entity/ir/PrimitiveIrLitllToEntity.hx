// This file is generated by hxlisla.
package lisla.idl.std.lisla2entity.ir;
class PrimitiveIrLislaToEntity {
    public static function process(context:lisla.idl.lisla2entity.LislaToEntityContext):hxext.ds.Result<lisla.idl.std.entity.ir.PrimitiveIr, lisla.idl.lisla2entity.error.LislaToEntityError> return switch context.lisla {
        case lisla.core.Lisla.Arr(array) if (array.length == 3 && array.data[0].match(lisla.core.Lisla.Str(_.data => "fixed_int")) && array.data[1].match(lisla.core.Lisla.Str(_)) && array.data[2].match(lisla.core.Lisla.Str(_))):{
            var arrayContext = new lisla.idl.lisla2entity.LislaToEntityArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("fixed_int");
                var arg0 = switch (arrayContext.read(lisla.idl.std.lisla2entity.core.UInt64LislaToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Err(data):{
                        return hxext.ds.Result.Err(data);
                    };
                };
                var arg1 = switch (arrayContext.read(lisla.idl.std.lisla2entity.core.BigIntLislaToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Err(data):{
                        return hxext.ds.Result.Err(data);
                    };
                };
                hxext.ds.Result.Ok(lisla.idl.std.entity.ir.PrimitiveIr.FixedInt(arg0, arg1));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    hxext.ds.Result.Err(error);
                };
            };
        };
        case lisla.core.Lisla.Arr(array) if (array.length == 3 && array.data[0].match(lisla.core.Lisla.Str(_.data => "fixed_uint")) && array.data[1].match(lisla.core.Lisla.Str(_)) && array.data[2].match(lisla.core.Lisla.Str(_))):{
            var arrayContext = new lisla.idl.lisla2entity.LislaToEntityArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("fixed_uint");
                var arg0 = switch (arrayContext.read(lisla.idl.std.lisla2entity.core.UInt64LislaToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Err(data):{
                        return hxext.ds.Result.Err(data);
                    };
                };
                var arg1 = switch (arrayContext.read(lisla.idl.std.lisla2entity.core.BigUIntLislaToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Err(data):{
                        return hxext.ds.Result.Err(data);
                    };
                };
                hxext.ds.Result.Ok(lisla.idl.std.entity.ir.PrimitiveIr.FixedUint(arg0, arg1));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    hxext.ds.Result.Err(error);
                };
            };
        };
        case lisla.core.Lisla.Arr(array) if (array.length == 2 && array.data[0].match(lisla.core.Lisla.Str(_.data => "variable_int")) && array.data[1].match(lisla.core.Lisla.Str(_))):{
            var arrayContext = new lisla.idl.lisla2entity.LislaToEntityArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("variable_int");
                var arg0 = switch (arrayContext.read(lisla.idl.std.lisla2entity.core.BigIntLislaToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Err(data):{
                        return hxext.ds.Result.Err(data);
                    };
                };
                hxext.ds.Result.Ok(lisla.idl.std.entity.ir.PrimitiveIr.VariableInt(arg0));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    hxext.ds.Result.Err(error);
                };
            };
        };
        case lisla.core.Lisla.Arr(array) if (array.length == 2 && array.data[0].match(lisla.core.Lisla.Str(_.data => "variable_uint")) && array.data[1].match(lisla.core.Lisla.Str(_))):{
            var arrayContext = new lisla.idl.lisla2entity.LislaToEntityArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("variable_uint");
                var arg0 = switch (arrayContext.read(lisla.idl.std.lisla2entity.core.BigUIntLislaToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Err(data):{
                        return hxext.ds.Result.Err(data);
                    };
                };
                hxext.ds.Result.Ok(lisla.idl.std.entity.ir.PrimitiveIr.VariableUint(arg0));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    hxext.ds.Result.Err(error);
                };
            };
        };
        case lisla.core.Lisla.Arr(array) if (array.length == 2 && array.data[0].match(lisla.core.Lisla.Str(_.data => "float64")) && array.data[1].match(lisla.core.Lisla.Str(_))):{
            var arrayContext = new lisla.idl.lisla2entity.LislaToEntityArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("float64");
                var arg0 = switch (arrayContext.read(lisla.idl.std.lisla2entity.core.Float64LislaToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Err(data):{
                        return hxext.ds.Result.Err(data);
                    };
                };
                hxext.ds.Result.Ok(lisla.idl.std.entity.ir.PrimitiveIr.Float64(arg0));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    hxext.ds.Result.Err(error);
                };
            };
        };
        case lisla.core.Lisla.Arr(array) if (array.length == 2 && array.data[0].match(lisla.core.Lisla.Str(_.data => "boolean")) && array.data[1].match(lisla.core.Lisla.Str(_.data => "true")) && array.data[1].match(lisla.core.Lisla.Str(_.data => "false"))):{
            var arrayContext = new lisla.idl.lisla2entity.LislaToEntityArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("boolean");
                var arg0 = switch (arrayContext.read(lisla.idl.std.lisla2entity.core.BooleanLislaToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Err(data):{
                        return hxext.ds.Result.Err(data);
                    };
                };
                hxext.ds.Result.Ok(lisla.idl.std.entity.ir.PrimitiveIr.Boolean(arg0));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    hxext.ds.Result.Err(error);
                };
            };
        };
        case lisla.core.Lisla.Arr(array) if (array.length == 2 && array.data[0].match(lisla.core.Lisla.Str(_.data => "string")) && array.data[1].match(lisla.core.Lisla.Str(_))):{
            var arrayContext = new lisla.idl.lisla2entity.LislaToEntityArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("string");
                var arg0 = switch (arrayContext.read(lisla.idl.std.lisla2entity.StringLislaToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Err(data):{
                        return hxext.ds.Result.Err(data);
                    };
                };
                hxext.ds.Result.Ok(lisla.idl.std.entity.ir.PrimitiveIr.String(arg0));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    hxext.ds.Result.Err(error);
                };
            };
        };
        case lisla.core.Lisla.Arr(array) if (array.length == 2 && array.data[0].match(lisla.core.Lisla.Str(_.data => "binary")) && array.data[1].match(lisla.core.Lisla.Str(_))):{
            var arrayContext = new lisla.idl.lisla2entity.LislaToEntityArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("binary");
                var arg0 = switch (arrayContext.read(lisla.idl.std.lisla2entity.core.BinaryLislaToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Err(data):{
                        return hxext.ds.Result.Err(data);
                    };
                };
                hxext.ds.Result.Ok(lisla.idl.std.entity.ir.PrimitiveIr.Binary(arg0));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    hxext.ds.Result.Err(error);
                };
            };
        };
        case data:hxext.ds.Result.Err(lisla.idl.lisla2entity.error.LislaToEntityError.ofLisla(context.lisla, lisla.idl.lisla2entity.error.LislaToEntityErrorKind.UnmatchedEnumConstructor(["fixed_int", "fixed_uint", "variable_int", "variable_uint", "float64", "boolean", "string", "binary"])));
    };
}