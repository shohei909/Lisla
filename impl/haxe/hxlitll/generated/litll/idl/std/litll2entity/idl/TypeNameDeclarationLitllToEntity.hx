// This file is generated by hxlitll.
package litll.idl.std.litll2entity.idl;
class TypeNameDeclarationLitllToEntity {
    public static function process(context:litll.idl.litll2entity.LitllToEntityContext):hxext.ds.Result<litll.idl.std.data.idl.TypeNameDeclaration, litll.idl.litll2entity.error.LitllToEntityError> return switch context.litll {
        case litll.core.Litll.Str(_):{
            hxext.ds.Result.Ok(litll.idl.std.data.idl.TypeNameDeclaration.Primitive(switch (litll.idl.std.litll2entity.idl.TypeNameLitllToEntity.process(context)) {
                case hxext.ds.Result.Ok(data):{
                    data;
                };
                case hxext.ds.Result.Err(data):{
                    return hxext.ds.Result.Err(data);
                };
            }));
        };
        case litll.core.Litll.Arr(array) if (1 <= array.length && array.data[0].match(litll.core.Litll.Str(_))):{
            var arrayContext = new litll.idl.litll2entity.LitllToEntityArrayContext(array, 0, context.config);
            var data = {
                var arg0 = switch (arrayContext.read(litll.idl.std.litll2entity.idl.TypeNameLitllToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Err(data):{
                        return hxext.ds.Result.Err(data);
                    };
                };
                var arg1 = switch (arrayContext.readRest(litll.idl.std.litll2entity.idl.TypeParameterDeclarationLitllToEntity.process, function(data) {
                        return switch data {
                            case litll.core.Litll.Str(_):true;
                            case litll.core.Litll.Arr(array) if (array.length == 2 && array.data[0].match(litll.core.Litll.Str(_))):true;
                            case _:false;
                        };
                    })) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Err(data):{
                        return hxext.ds.Result.Err(data);
                    };
                };
                hxext.ds.Result.Ok(litll.idl.std.data.idl.TypeNameDeclaration.Generic(arg0, arg1));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    hxext.ds.Result.Err(error);
                };
            };
        };
        case data:hxext.ds.Result.Err(litll.idl.litll2entity.error.LitllToEntityError.ofLitll(context.litll, litll.idl.litll2entity.error.LitllToEntityErrorKind.UnmatchedEnumConstructor(["generic"])));
    };
}