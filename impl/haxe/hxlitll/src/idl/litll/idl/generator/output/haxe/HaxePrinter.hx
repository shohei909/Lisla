package lisla.idl.generator.output.haxe;
import haxe.ds.Option;
import haxe.macro.Expr.TypeDefinition;
import haxe.macro.Printer;
import hxext.ds.Maybe;
import lisla.idl.generator.io.IoProvider;
import lisla.idl.std.entity.idl.TypePath;
import lisla.idl.generator.data.HaxePrintConfig;
import sys.FileSystem;
import sys.io.File;

/**
 * Default implemention of HaxePrinter.
 */
class HaxePrinter
{
	private var config:HaxePrintConfig;
	public function new(config:HaxePrintConfig) 
	{
		this.config = config;
	}
	
	public function printTypes(types:Array<TypeDefinition>):Maybe<Array<PrintHaxeErrorKind>>
	{
    	var outputDirectory = config.outputDirectory;
        if (!FileSystem.exists(outputDirectory))
		{
            // fatal error
			return Maybe.some([PrintHaxeErrorKind.OutputDirectoryNotFound(outputDirectory)]);
		}
		if (!FileSystem.isDirectory(outputDirectory))
		{
            // fatal error
			return Maybe.some([PrintHaxeErrorKind.IsNotDirectory(outputDirectory)]);
		}
        
        var errors:Array<PrintHaxeErrorKind> = [];
		var printer = new Printer(config.indent);
        
        var baseDirectory = config.outputDirectory + "/";
		
        for (type in types)
        {
            var relativeDirectory = "";
            for (segment in type.pack)
            {
                relativeDirectory += segment.toString() + "/";
                var currentDirectory = baseDirectory + relativeDirectory;
                
                if (!FileSystem.exists(currentDirectory))
                {
                    if (errors.length == 0)
                    {
                        FileSystem.createDirectory(currentDirectory);
                    }
                }
                else if (!FileSystem.isDirectory(currentDirectory))
                {
                    errors.push(PrintHaxeErrorKind.IsNotDirectory(currentDirectory));
                }
            }
            
            if (errors.length == 0)
            {
                var file = baseDirectory + relativeDirectory + type.name + ".hx";
                var content = "// This file is generated by hxlisla.\n" + printer.printTypeDefinition(type, true);
                File.saveContent(file, content);
            }
        }
        
        return if (errors.length == 0)
        {
            // success
            Maybe.none();
        }
        else
        {
            // failure
            Maybe.some(errors); 
        }
	}
}
