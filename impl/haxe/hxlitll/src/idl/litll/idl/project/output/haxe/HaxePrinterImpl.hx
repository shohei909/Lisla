package litll.idl.project.output.haxe;
import haxe.ds.Option;
import haxe.macro.Expr.TypeDefinition;
import haxe.macro.Printer;
import litll.idl.project.io.IoProvider;
import litll.idl.std.data.idl.TypePath;
import litll.idl.std.data.idl.haxe.OutputConfig;
import sys.FileSystem;
import sys.io.File;

/**
 * Default implemention of HaxePrinter.
 */
class HaxePrinterImpl implements HaxePrinter
{
	private var config:OutputConfig;
	private var io:IoProvider;
	private var printer:Printer;
	
	public function new(io:IoProvider, config:OutputConfig) 
	{
		this.io = io;
		this.config = config;
		printer = new Printer(config.indent);
		
		var outputDirectory = config.outputDirectory;
		if (!FileSystem.exists(outputDirectory))
		{
			io.printErrorLine("Directory " + outputDirectory + " not found");
		}
		if (!FileSystem.isDirectory(outputDirectory))
		{
			io.printErrorLine(outputDirectory + " is not directory");
		}
	}
	
	public function printType(type:TypeDefinition):Void
	{
		var baseDirectory = config.outputDirectory + "/";
		var relativeDirectory = "";
		for (segment in type.pack)
		{
			relativeDirectory += segment.toString() + "/";
			var currentDirectory = baseDirectory + relativeDirectory;
			if (!FileSystem.exists(currentDirectory))
			{
				FileSystem.createDirectory(currentDirectory);
			}
			else if (!FileSystem.isDirectory(currentDirectory))
			{
				io.printErrorLine(currentDirectory + " is not directory");
				return;
			}
		}
		
		var file = baseDirectory + relativeDirectory + type.name + ".hx";
		var content = "// This file is generated by hxlitll.\n" + printer.printTypeDefinition(type, true);
		File.saveContent(file, content);
		io.printDebugLine("Generated: " + type.pack.join(".") + "." + type.name + " in " + file);
	}
}
