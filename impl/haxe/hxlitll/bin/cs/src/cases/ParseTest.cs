// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace cases {
	public class ParseTest : global::LitllTestCase {
		
		public ParseTest(global::haxe.lang.EmptyObject empty) : base(global::haxe.lang.EmptyObject.EMPTY) {
		}
		
		
		public ParseTest() : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
			global::cases.ParseTest.__hx_ctor_cases_ParseTest(this);
		}
		
		
		public static void __hx_ctor_cases_ParseTest(global::cases.ParseTest __hx_this) {
			unchecked {
				global::LitllTestCase.__hx_ctor__LitllTestCase(__hx_this, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"new", "cases.ParseTest", "ParseTest.hx"}, new int[]{1981972957}, new double[]{((double) (17) )}));
			}
		}
		
		
		public virtual void testSuccess() {
			unchecked {
				int _g = 0;
				global::Array<object> _g1 = global::sys.FileSystem.readDirectory(global::TestCore.BASIC_DIRECTORY);
				while (( _g < _g1.length )) {
					string file = global::haxe.lang.Runtime.toString(_g1[_g]);
					 ++ _g;
					if (file.EndsWith(".litll")) {
						global::litll.core.LitllArray<object> caseData = null;
						global::litll.core.ds.Result _g2 = global::litll.core.parse.Parser.run(global::sys.io.File.getContent(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::TestCore.BASIC_DIRECTORY, "/"), file)), null);
						switch (_g2.index) {
							case 0:
							{
								caseData = ((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) (_g2.@params[0]) ))) );
								break;
							}
							
							
							case 1:
							{
								this.fail(global::haxe.lang.Runtime.concat("failed to parse file:  \n", global::Std.@string(((global::litll.core.parse.ParseError) (_g2.@params[0]) ))), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSuccess", "cases.ParseTest", "ParseTest.hx"}, new int[]{1981972957}, new double[]{((double) (33) )})).label(file);
								continue;
							}
							
							
						}
						
						{
							global::Array<object> _g3 = caseData.data;
							if (( _g3.length == 2 )) {
								if (( ((global::litll.core.Litll) (_g3[0]) ).index == 1 )) {
									if (( ((global::litll.core.Litll) (_g3[1]) ).index == 1 )) {
										global::litll.core.LitllString json = ((global::litll.core.LitllString) (((global::litll.core.Litll) (_g3[1]) ).@params[0]) );
										{
											global::litll.core.LitllArray<object> litllData = null;
											global::litll.core.ds.Result _g31 = global::litll.core.parse.Parser.run(((global::litll.core.LitllString) (((global::litll.core.Litll) (_g3[0]) ).@params[0]) ).data, null);
											switch (_g31.index) {
												case 0:
												{
													litllData = ((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) (_g31.@params[0]) ))) );
													break;
												}
												
												
												case 1:
												{
													this.fail(global::haxe.lang.Runtime.concat("failed to parse file: \n", global::Std.@string(((global::litll.core.parse.ParseError) (_g31.@params[0]) ))), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSuccess", "cases.ParseTest", "ParseTest.hx"}, new int[]{1981972957}, new double[]{((double) (46) )})).label(file);
													continue;
												}
												
												
											}
											
											this.assertLitllArray(litllData, new global::haxe.format.JsonParser(((string) (json.data) )).parseRec(), file, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSuccess", "cases.ParseTest", "ParseTest.hx"}, new int[]{1981972957}, new double[]{((double) (50) )}));
										}
										
									}
									else {
										this.fail("test case data must be [litll, json]", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSuccess", "cases.ParseTest", "ParseTest.hx"}, new int[]{1981972957}, new double[]{((double) (53) )})).label(file);
									}
									
								}
								else {
									this.fail("test case data must be [litll, json]", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSuccess", "cases.ParseTest", "ParseTest.hx"}, new int[]{1981972957}, new double[]{((double) (53) )})).label(file);
								}
								
							}
							else {
								this.fail("test case data must be [litll, json]", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSuccess", "cases.ParseTest", "ParseTest.hx"}, new int[]{1981972957}, new double[]{((double) (53) )})).label(file);
							}
							
						}
						
					}
					
				}
				
			}
		}
		
		
		public virtual void testFailure() {
			unchecked {
				int _g = 0;
				global::Array<object> _g1 = global::sys.FileSystem.readDirectory(global::TestCore.INVALID_NONFATAL_DIRECTORY);
				while (( _g < _g1.length )) {
					string file = global::haxe.lang.Runtime.toString(_g1[_g]);
					 ++ _g;
					if (file.EndsWith(".litll")) {
						switch (((int) (global::haxe.lang.Runtime.toInt(global::litll.core.parse.Parser.run(global::sys.io.File.getContent(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::TestCore.INVALID_NONFATAL_DIRECTORY, "/"), file)), null).index)) )) {
							case 0:
							{
								this.fail("paser must be fail.", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFailure", "cases.ParseTest", "ParseTest.hx"}, new int[]{1981972957}, new double[]{((double) (69) )})).label(file);
								break;
							}
							
							
							case 1:
							{
								this.success(new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFailure", "cases.ParseTest", "ParseTest.hx"}, new int[]{1981972957}, new double[]{((double) (72) )}));
								break;
							}
							
							
						}
						
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1405312536:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFailure", 1405312536)) );
					}
					
					
					case 1964446609:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSuccess", 1964446609)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1405312536:
					{
						this.testFailure();
						break;
					}
					
					
					case 1964446609:
					{
						this.testSuccess();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}


