// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace unifill._CodePoint {
	public sealed class CodePoint_Impl_ {
		
		public static int fromInt(int code) {
			unchecked {
				if ( ! ((( ( ( ( 0 <= code ) && ( code <= 1114111 ) ) &&  ! ((( ( 55296 <= code ) && ( code <= 56319 ) )))  ) &&  ! ((( ( 56320 <= code ) && ( code <= 57343 ) )))  ))) ) {
					throw global::haxe.lang.HaxeException.wrap(new global::unifill.InvalidCodePoint(((int) (code) )));
				}
				
				return ((int) (code) );
			}
		}
		
		
		public static string cons(int a, string b) {
			unchecked {
				return global::haxe.lang.Runtime.concat((((string) (( (( ((int) (a) ) <= 65535 )) ? (((string) (new string(((char) (((int) (a) )) ), 1)) )) : (((string) (global::haxe.lang.Runtime.concat(new string(((char) (( (( ((int) (a) ) >> 10 )) + 55232 )) ), 1), new string(((char) (( ( ((int) (a) ) & 1023 ) | 56320 )) ), 1))) )) )) )), b);
			}
		}
		
		
		public static string snoc(string a, int b) {
			unchecked {
				return global::haxe.lang.Runtime.concat(a, (((string) (( (( ((int) (b) ) <= 65535 )) ? (((string) (new string(((char) (((int) (b) )) ), 1)) )) : (((string) (global::haxe.lang.Runtime.concat(new string(((char) (( (( ((int) (b) ) >> 10 )) + 55232 )) ), 1), new string(((char) (( ( ((int) (b) ) & 1023 ) | 56320 )) ), 1))) )) )) )));
			}
		}
		
		
		public static int addInt(int a, int b) {
			unchecked {
				int code = ( ((int) (a) ) + b );
				if ( ! ((( ( ( ( 0 <= code ) && ( code <= 1114111 ) ) &&  ! ((( ( 55296 <= code ) && ( code <= 56319 ) )))  ) &&  ! ((( ( 56320 <= code ) && ( code <= 57343 ) )))  ))) ) {
					throw global::haxe.lang.HaxeException.wrap(new global::unifill.InvalidCodePoint(((int) (code) )));
				}
				
				return ((int) (code) );
			}
		}
		
		
		public static int sub(int a, int b) {
			return ( ((int) (a) ) - ((int) (b) ) );
		}
		
		
		public static int subInt(int a, int b) {
			unchecked {
				int code = ( ((int) (a) ) - b );
				if ( ! ((( ( ( ( 0 <= code ) && ( code <= 1114111 ) ) &&  ! ((( ( 55296 <= code ) && ( code <= 56319 ) )))  ) &&  ! ((( ( 56320 <= code ) && ( code <= 57343 ) )))  ))) ) {
					throw global::haxe.lang.HaxeException.wrap(new global::unifill.InvalidCodePoint(((int) (code) )));
				}
				
				return ((int) (code) );
			}
		}
		
		
		public static int _new(int code) {
			return ((int) (code) );
		}
		
		
		public static string toString(int this1) {
			unchecked {
				return ((string) (( (( this1 <= 65535 )) ? (((string) (new string(((char) (this1) ), 1)) )) : (((string) (global::haxe.lang.Runtime.concat(new string(((char) (( (( this1 >> 10 )) + 55232 )) ), 1), new string(((char) (( ( this1 & 1023 ) | 56320 )) ), 1))) )) )) );
			}
		}
		
		
		public static int toInt(int this1) {
			return this1;
		}
		
		
	}
}


