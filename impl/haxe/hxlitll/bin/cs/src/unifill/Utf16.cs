// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace unifill._Utf16 {
	public sealed class Utf16_Impl_ {
		
		public static string fromCodePoint(int codePoint) {
			unchecked {
				if (( codePoint <= 65535 )) {
					return ((string) (new string(((char) (codePoint) ), 1)) );
				}
				else {
					return ((string) (global::haxe.lang.Runtime.concat(new string(((char) (( (( codePoint >> 10 )) + 55232 )) ), 1), new string(((char) (( ( codePoint & 1023 ) | 56320 )) ), 1))) );
				}
				
			}
		}
		
		
		public static string fromCodePoints(object codePoints) {
			unchecked {
				global::StringBuf buf = ((global::StringBuf) (new global::StringBuf()) );
				{
					object c = ((object) (global::haxe.lang.Runtime.callField(codePoints, "iterator", 328878574, null)) );
					while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(c, "hasNext", 407283053, null))) {
						int c1 = ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.callField(c, "next", 1224901875, null))) );
						if (( c1 <= 65535 )) {
							((global::StringBuf) (buf) ).b.Append(((char) (c1) ));
						}
						else {
							((global::StringBuf) (buf) ).b.Append(((char) (( (( c1 >> 10 )) + 55232 )) ));
							((global::StringBuf) (buf) ).b.Append(((char) (( ( c1 & 1023 ) | 56320 )) ));
						}
						
					}
					
				}
				
				return ((string) (((global::StringBuf) (buf) ).b.ToString()) );
			}
		}
		
		
		public static string fromString(string s) {
			return ((string) (s) );
		}
		
		
		public static string fromArray(global::Array<int> a) {
			global::System.Text.StringBuilder buf_b = new global::System.Text.StringBuilder();
			{
				int _g = 0;
				while (( _g < a.length )) {
					int x = a[_g];
					 ++ _g;
					buf_b.Append(((char) (x) ));
				}
				
			}
			
			return ((string) (buf_b.ToString()) );
		}
		
		
		public static void encodeWith(global::haxe.lang.Function f, int c) {
			unchecked {
				if (( c <= 65535 )) {
					f.__hx_invoke1_o(((double) (c) ), global::haxe.lang.Runtime.undefined);
				}
				else {
					f.__hx_invoke1_o(((double) (( (( c >> 10 )) + 55232 )) ), global::haxe.lang.Runtime.undefined);
					f.__hx_invoke1_o(((double) (( ( c & 1023 ) | 56320 )) ), global::haxe.lang.Runtime.undefined);
				}
				
			}
		}
		
		
		
		
		public static int codeUnitAt(string this1, int index) {
			unchecked {
				if (((bool) (( ((uint) (index) ) < ((string) (this1) ).Length )) )) {
					return ((int) (((string) (this1) )[index]) );
				}
				else {
					return -1;
				}
				
			}
		}
		
		
		public static int codePointAt(string this1, int index) {
			return global::unifill._Utf16.Utf16Impl.decode_code_point(((string) (this1) ).Length, new global::unifill._Utf16.Utf16_Impl__codePointAt_55__Fun(this1), index);
		}
		
		
		public static string charAt(string this1, int index) {
			unchecked {
				int c = ( (((bool) (( ((uint) (index) ) < ((string) (this1) ).Length )) )) ? (((int) (((string) (this1) )[index]) )) : (-1) );
				return ((string) (global::haxe.lang.StringExt.substr(((string) (this1) ), index, new global::haxe.lang.Null<int>(( ( ! ((( ( 55296 <= c ) && ( c <= 56319 ) ))) ) ? (1) : (2) ), true))) );
			}
		}
		
		
		public static int codePointCount(string this1, int beginIndex, int endIndex) {
			unchecked {
				int index = beginIndex;
				int i = 0;
				while (( index < endIndex )) {
					int c = ( (((bool) (( ((uint) (index) ) < ((string) (this1) ).Length )) )) ? (((int) (((string) (this1) )[index]) )) : (-1) );
					index += ( ( ! ((( ( 55296 <= c ) && ( c <= 56319 ) ))) ) ? (1) : (2) );
					 ++ i;
				}
				
				return i;
			}
		}
		
		
		public static int codePointWidthAt(string this1, int index) {
			unchecked {
				int c = ( (((bool) (( ((uint) (index) ) < ((string) (this1) ).Length )) )) ? (((int) (((string) (this1) )[index]) )) : (-1) );
				if ( ! ((( ( 55296 <= c ) && ( c <= 56319 ) ))) ) {
					return 1;
				}
				else {
					return 2;
				}
				
			}
		}
		
		
		public static int codePointWidthBefore(string this1, int index) {
			unchecked {
				int i = ( index - 1 );
				int c = ( (((bool) (( ((uint) (i) ) < ((string) (this1) ).Length )) )) ? (((int) (((string) (this1) )[i]) )) : (-1) );
				if ( ! ((( ( 56320 <= c ) && ( c <= 57343 ) ))) ) {
					return 1;
				}
				else {
					return 2;
				}
				
			}
		}
		
		
		public static int offsetByCodePoints(string this1, int index, int codePointOffset) {
			unchecked {
				if (( codePointOffset >= 0 )) {
					int index1 = index;
					int len = ((string) (this1) ).Length;
					int i = 0;
					while (( ( i < codePointOffset ) && ( index1 < len ) )) {
						int c = ( (((bool) (( ((uint) (index1) ) < ((string) (this1) ).Length )) )) ? (((int) (((string) (this1) )[index1]) )) : (-1) );
						index1 += ( ( ! ((( ( 55296 <= c ) && ( c <= 56319 ) ))) ) ? (1) : (2) );
						 ++ i;
					}
					
					return index1;
				}
				else {
					int index2 = index;
					int count = 0;
					while (( ( count <  - (codePointOffset)  ) && ( 0 < index2 ) )) {
						int i1 = ( index2 - 1 );
						int c1 = ( (((bool) (( ((uint) (i1) ) < ((string) (this1) ).Length )) )) ? (((int) (((string) (this1) )[i1]) )) : (-1) );
						index2 -= ( ( ! ((( ( 56320 <= c1 ) && ( c1 <= 57343 ) ))) ) ? (1) : (2) );
						 ++ count;
					}
					
					return index2;
				}
				
			}
		}
		
		
		public static string substr(string this1, int index, global::haxe.lang.Null<int> len) {
			return ((string) (global::haxe.lang.StringExt.substr(((string) (this1) ), index, len)) );
		}
		
		
		public static void validate(string this1) {
			unchecked {
				int len = ((string) (this1) ).Length;
				global::haxe.lang.Function accessor = new global::unifill._Utf16.Utf16_Impl__validate_124__Fun(this1);
				int i1 = 0;
				while (( i1 < len )) {
					global::unifill._Utf16.Utf16Impl.decode_code_point(len, accessor, i1);
					int c = ( (((bool) (( ((uint) (i1) ) < ((string) (this1) ).Length )) )) ? (((int) (((string) (this1) )[i1]) )) : (-1) );
					i1 += ( ( ! ((( ( 55296 <= c ) && ( c <= 56319 ) ))) ) ? (1) : (2) );
				}
				
			}
		}
		
		
		public static string toString(string this1) {
			return ((string) (this1) );
		}
		
		
		public static global::Array<int> toArray(string this1) {
			unchecked {
				int i = 0;
				int len = ((string) (this1) ).Length;
				global::Array<int> _g = new global::Array<int>(new int[]{});
				while (( i < len )) {
					int index = i++;
					_g.push(( (((bool) (( ((uint) (index) ) < ((string) (this1) ).Length )) )) ? (((int) (((string) (this1) )[index]) )) : (-1) ));
				}
				
				return _g;
			}
		}
		
		
		public static string _new(string s) {
			return ((string) (s) );
		}
		
		
		public static int get_length(string this1) {
			return ((string) (this1) ).Length;
		}
		
		
		public static int forward_offset_by_code_points(string this1, int index, int codePointOffset) {
			unchecked {
				int len = ((string) (this1) ).Length;
				int i = 0;
				while (( ( i < codePointOffset ) && ( index < len ) )) {
					int c = ( (((bool) (( ((uint) (index) ) < ((string) (this1) ).Length )) )) ? (((int) (((string) (this1) )[index]) )) : (-1) );
					index += ( ( ! ((( ( 55296 <= c ) && ( c <= 56319 ) ))) ) ? (1) : (2) );
					 ++ i;
				}
				
				return index;
			}
		}
		
		
		public static int backward_offset_by_code_points(string this1, int index, int codePointOffset) {
			unchecked {
				int count = 0;
				while (( ( count < codePointOffset ) && ( 0 < index ) )) {
					int i = ( index - 1 );
					int c = ( (((bool) (( ((uint) (i) ) < ((string) (this1) ).Length )) )) ? (((int) (((string) (this1) )[i]) )) : (-1) );
					index -= ( ( ! ((( ( 56320 <= c ) && ( c <= 57343 ) ))) ) ? (1) : (2) );
					 ++ count;
				}
				
				return index;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace unifill._Utf16 {
	public class Utf16_Impl__codePointAt_55__Fun : global::haxe.lang.Function {
		
		public Utf16_Impl__codePointAt_55__Fun(string this1) : base(1, 1) {
			this.this1 = this1;
		}
		
		
		public override double __hx_invoke1_f(double __fn_float1, object __fn_dyn1) {
			unchecked {
				int i = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
				if (((bool) (( ((uint) (i) ) < ((string) (this.this1) ).Length )) )) {
					return ((double) (((int) (((string) (this.this1) )[i]) )) );
				}
				else {
					return ((double) (-1) );
				}
				
			}
		}
		
		
		public string this1;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace unifill._Utf16 {
	public class Utf16_Impl__validate_124__Fun : global::haxe.lang.Function {
		
		public Utf16_Impl__validate_124__Fun(string this1) : base(1, 1) {
			this.this1 = this1;
		}
		
		
		public override double __hx_invoke1_f(double __fn_float1, object __fn_dyn1) {
			unchecked {
				int i = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
				if (((bool) (( ((uint) (i) ) < ((string) (this.this1) ).Length )) )) {
					return ((double) (((int) (((string) (this.this1) )[i]) )) );
				}
				else {
					return ((double) (-1) );
				}
				
			}
		}
		
		
		public string this1;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace unifill._Utf16 {
	public class Utf16Impl : global::haxe.lang.HxObject {
		
		public Utf16Impl(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Utf16Impl() {
			global::unifill._Utf16.Utf16Impl.__hx_ctor_unifill__Utf16_Utf16Impl(this);
		}
		
		
		public static void __hx_ctor_unifill__Utf16_Utf16Impl(global::unifill._Utf16.Utf16Impl __hx_this) {
		}
		
		
		public static int code_point_width(int c) {
			unchecked {
				if ( ! ((( ( 55296 <= c ) && ( c <= 56319 ) ))) ) {
					return 1;
				}
				else {
					return 2;
				}
				
			}
		}
		
		
		public static int find_prev_code_point(global::haxe.lang.Function accessor, int index) {
			unchecked {
				int c = ((int) (accessor.__hx_invoke1_f(((double) (( index - 1 )) ), global::haxe.lang.Runtime.undefined)) );
				if ( ! ((( ( 56320 <= c ) && ( c <= 57343 ) ))) ) {
					return 1;
				}
				else {
					return 2;
				}
				
			}
		}
		
		
		public static void encode_code_point(global::haxe.lang.Function addUnit, int codePoint) {
			unchecked {
				if (( codePoint <= 65535 )) {
					addUnit.__hx_invoke1_o(((double) (codePoint) ), global::haxe.lang.Runtime.undefined);
				}
				else {
					addUnit.__hx_invoke1_o(((double) (( (( codePoint >> 10 )) + 55232 )) ), global::haxe.lang.Runtime.undefined);
					addUnit.__hx_invoke1_o(((double) (( ( codePoint & 1023 ) | 56320 )) ), global::haxe.lang.Runtime.undefined);
				}
				
			}
		}
		
		
		public static int decode_code_point(int len, global::haxe.lang.Function accessor, int index) {
			unchecked {
				if (( ( index < 0 ) || ( len <= index ) )) {
					throw global::haxe.lang.HaxeException.wrap(new global::unifill.InvalidCodeUnitSequence(((int) (index) )));
				}
				
				int hi = ((int) (accessor.__hx_invoke1_f(((double) (index) ), global::haxe.lang.Runtime.undefined)) );
				if (( ( 55296 <= hi ) && ( hi <= 56319 ) )) {
					if (( ( ( index + 1 ) < 0 ) || ( len <= ( index + 1 ) ) )) {
						throw global::haxe.lang.HaxeException.wrap(new global::unifill.InvalidCodeUnitSequence(((int) (index) )));
					}
					
					int lo = ((int) (accessor.__hx_invoke1_f(((double) (( index + 1 )) ), global::haxe.lang.Runtime.undefined)) );
					if (( ( 56320 <= lo ) && ( lo <= 57343 ) )) {
						return ( ( ( hi - 55232 ) << 10 ) | ( lo & 1023 ) );
					}
					else {
						throw global::haxe.lang.HaxeException.wrap(new global::unifill.InvalidCodeUnitSequence(((int) (index) )));
					}
					
				}
				else if (( ( 56320 <= hi ) && ( hi <= 57343 ) )) {
					throw global::haxe.lang.HaxeException.wrap(new global::unifill.InvalidCodeUnitSequence(((int) (index) )));
				}
				else {
					return hi;
				}
				
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace unifill._Utf16 {
	public sealed class StringU16Buffer_Impl_ {
		
		public static global::StringBuf _new() {
			return ((global::StringBuf) (new global::StringBuf()) );
		}
		
		
		public static void addUnit(global::StringBuf this1, int unit) {
			this1.b.Append(((char) (unit) ));
		}
		
		
		public static string getStringU16(global::StringBuf this1) {
			return ((string) (this1.b.ToString()) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace unifill._Utf16 {
	public sealed class StringU16_Impl_ {
		
		public static string fromString(string s) {
			return ((string) (s) );
		}
		
		
		public static string fromCodeUnit(int u) {
			unchecked {
				return ((string) (new string(((char) (u) ), 1)) );
			}
		}
		
		
		public static string fromTwoCodeUnits(int u0, int u1) {
			unchecked {
				return ((string) (global::haxe.lang.Runtime.concat(new string(((char) (u0) ), 1), new string(((char) (u1) ), 1))) );
			}
		}
		
		
		public static string ofArray(global::Array<int> a) {
			global::System.Text.StringBuilder buf_b = new global::System.Text.StringBuilder();
			{
				int _g = 0;
				while (( _g < a.length )) {
					int x = a[_g];
					 ++ _g;
					buf_b.Append(((char) (x) ));
				}
				
			}
			
			return ((string) (buf_b.ToString()) );
		}
		
		
		public static string fromArray(global::Array<int> a) {
			global::System.Text.StringBuilder buf_b = new global::System.Text.StringBuilder();
			{
				int _g = 0;
				while (( _g < a.length )) {
					int x = a[_g];
					 ++ _g;
					buf_b.Append(((char) (x) ));
				}
				
			}
			
			return ((string) (buf_b.ToString()) );
		}
		
		
		
		
		public static int codeUnitAt(string this1, int index) {
			unchecked {
				if (((bool) (( ((uint) (index) ) < this1.Length )) )) {
					return ((int) (this1[index]) );
				}
				else {
					return -1;
				}
				
			}
		}
		
		
		public static string substr(string this1, int index, global::haxe.lang.Null<int> len) {
			return ((string) (global::haxe.lang.StringExt.substr(this1, index, len)) );
		}
		
		
		public static string toString(string this1) {
			return this1;
		}
		
		
		public static global::Array<int> toArray(string this1) {
			unchecked {
				int i = 0;
				int len = this1.Length;
				global::Array<int> _g = new global::Array<int>(new int[]{});
				while (( i < len )) {
					int index = i++;
					_g.push(( (((bool) (( ((uint) (index) ) < this1.Length )) )) ? (((int) (this1[index]) )) : (-1) ));
				}
				
				return _g;
			}
		}
		
		
		public static string _new(string s) {
			return ((string) (s) );
		}
		
		
		public static int get_length(string this1) {
			return this1.Length;
		}
		
		
	}
}


