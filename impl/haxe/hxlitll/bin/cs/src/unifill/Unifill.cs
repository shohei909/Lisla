// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace unifill {
	public class Unifill : global::haxe.lang.HxObject {
		
		public Unifill(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Unifill() {
			global::unifill.Unifill.__hx_ctor_unifill_Unifill(this);
		}
		
		
		public static void __hx_ctor_unifill_Unifill(global::unifill.Unifill __hx_this) {
		}
		
		
		public static int uLength(string s) {
			return global::unifill._Utf16.Utf16_Impl_.codePointCount(((string) (s) ), 0, s.Length);
		}
		
		
		public static string uCharAt(string s, int index) {
			unchecked {
				string s1 = ((string) (s) );
				int i = default(int);
				if (( index >= 0 )) {
					int index1 = 0;
					int len = ((string) (s1) ).Length;
					int i1 = 0;
					while (( ( i1 < index ) && ( index1 < len ) )) {
						int c = ( (((bool) (( ((uint) (index1) ) < ((string) (s1) ).Length )) )) ? (((int) (((string) (s1) )[index1]) )) : (-1) );
						index1 += ( ( ! ((( ( 55296 <= c ) && ( c <= 56319 ) ))) ) ? (1) : (2) );
						 ++ i1;
					}
					
					i = index1;
				}
				else {
					while (false) {
					}
					
					i = 0;
				}
				
				string s2 = ((string) (s) );
				int c1 = ( (((bool) (( ((uint) (i) ) < ((string) (s2) ).Length )) )) ? (((int) (((string) (s2) )[i]) )) : (-1) );
				return ((string) (global::haxe.lang.StringExt.substr(((string) (s2) ), i, new global::haxe.lang.Null<int>(( ( ! ((( ( 55296 <= c1 ) && ( c1 <= 56319 ) ))) ) ? (1) : (2) ), true))) );
			}
		}
		
		
		public static int uCharCodeAt(string s, int index) {
			unchecked {
				string s1 = ((string) (s) );
				int i = default(int);
				if (( index >= 0 )) {
					int index1 = 0;
					int len = ((string) (s1) ).Length;
					int i1 = 0;
					while (( ( i1 < index ) && ( index1 < len ) )) {
						int c = ( (((bool) (( ((uint) (index1) ) < ((string) (s1) ).Length )) )) ? (((int) (((string) (s1) )[index1]) )) : (-1) );
						index1 += ( ( ! ((( ( 55296 <= c ) && ( c <= 56319 ) ))) ) ? (1) : (2) );
						 ++ i1;
					}
					
					i = index1;
				}
				else {
					while (false) {
					}
					
					i = 0;
				}
				
				return global::unifill._Utf16.Utf16_Impl_.codePointAt(((string) (s) ), i);
			}
		}
		
		
		public static int uCodePointAt(string s, int index) {
			unchecked {
				string s1 = ((string) (s) );
				int i = default(int);
				if (( index >= 0 )) {
					int index1 = 0;
					int len = ((string) (s1) ).Length;
					int i1 = 0;
					while (( ( i1 < index ) && ( index1 < len ) )) {
						int c = ( (((bool) (( ((uint) (index1) ) < ((string) (s1) ).Length )) )) ? (((int) (((string) (s1) )[index1]) )) : (-1) );
						index1 += ( ( ! ((( ( 55296 <= c ) && ( c <= 56319 ) ))) ) ? (1) : (2) );
						 ++ i1;
					}
					
					i = index1;
				}
				else {
					while (false) {
					}
					
					i = 0;
				}
				
				return ((int) (global::unifill._Utf16.Utf16_Impl_.codePointAt(((string) (s) ), i)) );
			}
		}
		
		
		public static int uIndexOf(string s, string @value, global::haxe.lang.Null<int> startIndex) {
			unchecked {
				int __temp_startIndex5 = ( ( ! (startIndex.hasValue) ) ? (0) : ((startIndex).@value) );
				string s1 = ((string) (s) );
				int index = default(int);
				if (( __temp_startIndex5 >= 0 )) {
					int index1 = 0;
					int len = ((string) (s1) ).Length;
					int i = 0;
					while (( ( i < __temp_startIndex5 ) && ( index1 < len ) )) {
						int c = ( (((bool) (( ((uint) (index1) ) < ((string) (s1) ).Length )) )) ? (((int) (((string) (s1) )[index1]) )) : (-1) );
						index1 += ( ( ! ((( ( 55296 <= c ) && ( c <= 56319 ) ))) ) ? (1) : (2) );
						 ++ i;
					}
					
					index = index1;
				}
				else {
					while (false) {
					}
					
					index = 0;
				}
				
				int index2 = global::haxe.lang.StringExt.indexOf(s, @value, new global::haxe.lang.Null<int>(index, true));
				if (( index2 >= 0 )) {
					return global::unifill._Utf16.Utf16_Impl_.codePointCount(((string) (s) ), 0, index2);
				}
				else {
					return -1;
				}
				
			}
		}
		
		
		public static int uLastIndexOf(string s, string @value, global::haxe.lang.Null<int> startIndex) {
			unchecked {
				if ( ! (startIndex.hasValue) ) {
					startIndex = new global::haxe.lang.Null<int>(( s.Length - 1 ), true);
				}
				
				int codePointOffset = (startIndex).@value;
				string s1 = ((string) (s) );
				int index = default(int);
				if (( codePointOffset >= 0 )) {
					int index1 = 0;
					int len = ((string) (s1) ).Length;
					int i = 0;
					while (( ( i < codePointOffset ) && ( index1 < len ) )) {
						int c = ( (((bool) (( ((uint) (index1) ) < ((string) (s1) ).Length )) )) ? (((int) (((string) (s1) )[index1]) )) : (-1) );
						index1 += ( ( ! ((( ( 55296 <= c ) && ( c <= 56319 ) ))) ) ? (1) : (2) );
						 ++ i;
					}
					
					index = index1;
				}
				else {
					while (false) {
					}
					
					index = 0;
				}
				
				int index2 = global::haxe.lang.StringExt.lastIndexOf(s, @value, new global::haxe.lang.Null<int>(index, true));
				if (( index2 >= 0 )) {
					return global::unifill._Utf16.Utf16_Impl_.codePointCount(((string) (s) ), 0, index2);
				}
				else {
					return -1;
				}
				
			}
		}
		
		
		public static global::Array<object> uSplit(string s, string delimiter) {
			unchecked {
				if (( delimiter.Length == 0 )) {
					global::Array<object> _g = new global::Array<object>(new object[]{});
					{
						int _g1_index = default(int);
						int _g1_i = 0;
						int endIndex = s.Length;
						_g1_index = 0;
						while (( _g1_index < endIndex )) {
							_g1_i = _g1_index;
							int index = _g1_index;
							string s1 = ((string) (s) );
							int c = ( (((bool) (( ((uint) (index) ) < ((string) (s1) ).Length )) )) ? (((int) (((string) (s1) )[index]) )) : (-1) );
							_g1_index += ( ( ! ((( ( 55296 <= c ) && ( c <= 56319 ) ))) ) ? (1) : (2) );
							int i = _g1_i;
							string s2 = ((string) (s) );
							int c1 = ( (((bool) (( ((uint) (i) ) < ((string) (s2) ).Length )) )) ? (((int) (((string) (s2) )[i]) )) : (-1) );
							_g.push(((string) (global::haxe.lang.StringExt.substr(((string) (s2) ), i, new global::haxe.lang.Null<int>(( ( ! ((( ( 55296 <= c1 ) && ( c1 <= 56319 ) ))) ) ? (1) : (2) ), true))) ));
						}
						
					}
					
					return _g;
				}
				else {
					return global::haxe.lang.StringExt.split(s, delimiter);
				}
				
			}
		}
		
		
		public static string uSubstr(string s, int startIndex, global::haxe.lang.Null<int> length) {
			unchecked {
				int index = ( (( startIndex >= 0 )) ? (0) : (s.Length) );
				string s1 = ((string) (s) );
				int si = default(int);
				if (( startIndex >= 0 )) {
					int index1 = index;
					int len = ((string) (s1) ).Length;
					int i = 0;
					while (( ( i < startIndex ) && ( index1 < len ) )) {
						int c = ( (((bool) (( ((uint) (index1) ) < ((string) (s1) ).Length )) )) ? (((int) (((string) (s1) )[index1]) )) : (-1) );
						index1 += ( ( ! ((( ( 55296 <= c ) && ( c <= 56319 ) ))) ) ? (1) : (2) );
						 ++ i;
					}
					
					si = index1;
				}
				else {
					int index2 = index;
					int count = 0;
					while (( ( count <  - (startIndex)  ) && ( 0 < index2 ) )) {
						int i1 = ( index2 - 1 );
						int c1 = ( (((bool) (( ((uint) (i1) ) < ((string) (s1) ).Length )) )) ? (((int) (((string) (s1) )[i1]) )) : (-1) );
						index2 -= ( ( ! ((( ( 56320 <= c1 ) && ( c1 <= 57343 ) ))) ) ? (1) : (2) );
						 ++ count;
					}
					
					si = index2;
				}
				
				int ei = default(int);
				if ( ! (length.hasValue) ) {
					ei = s.Length;
				}
				else if (( (length).@value < 0 )) {
					ei = si;
				}
				else {
					int codePointOffset = (length).@value;
					string s2 = ((string) (s) );
					if (( codePointOffset >= 0 )) {
						int index3 = si;
						int len1 = ((string) (s2) ).Length;
						int i2 = 0;
						while (( ( i2 < codePointOffset ) && ( index3 < len1 ) )) {
							int c2 = ( (((bool) (( ((uint) (index3) ) < ((string) (s2) ).Length )) )) ? (((int) (((string) (s2) )[index3]) )) : (-1) );
							index3 += ( ( ! ((( ( 55296 <= c2 ) && ( c2 <= 56319 ) ))) ) ? (1) : (2) );
							 ++ i2;
						}
						
						ei = index3;
					}
					else {
						int index4 = si;
						int count1 = 0;
						while (( ( count1 <  - (codePointOffset)  ) && ( 0 < index4 ) )) {
							int i3 = ( index4 - 1 );
							int c3 = ( (((bool) (( ((uint) (i3) ) < ((string) (s2) ).Length )) )) ? (((int) (((string) (s2) )[i3]) )) : (-1) );
							index4 -= ( ( ! ((( ( 56320 <= c3 ) && ( c3 <= 57343 ) ))) ) ? (1) : (2) );
							 ++ count1;
						}
						
						ei = index4;
					}
					
				}
				
				return global::haxe.lang.StringExt.substring(s, si, new global::haxe.lang.Null<int>(ei, true));
			}
		}
		
		
		public static string uSubstring(string s, int startIndex, global::haxe.lang.Null<int> endIndex) {
			unchecked {
				int si = default(int);
				if (( startIndex < 0 )) {
					si = 0;
				}
				else {
					string s1 = ((string) (s) );
					if (( startIndex >= 0 )) {
						int index = 0;
						int len = ((string) (s1) ).Length;
						int i = 0;
						while (( ( i < startIndex ) && ( index < len ) )) {
							int c = ( (((bool) (( ((uint) (index) ) < ((string) (s1) ).Length )) )) ? (((int) (((string) (s1) )[index]) )) : (-1) );
							index += ( ( ! ((( ( 55296 <= c ) && ( c <= 56319 ) ))) ) ? (1) : (2) );
							 ++ i;
						}
						
						si = index;
					}
					else {
						while (false) {
						}
						
						si = 0;
					}
					
				}
				
				int ei = default(int);
				if ( ! (endIndex.hasValue) ) {
					ei = s.Length;
				}
				else if (( (endIndex).@value < 0 )) {
					ei = 0;
				}
				else {
					int codePointOffset = (endIndex).@value;
					string s2 = ((string) (s) );
					if (( codePointOffset >= 0 )) {
						int index1 = 0;
						int len1 = ((string) (s2) ).Length;
						int i1 = 0;
						while (( ( i1 < codePointOffset ) && ( index1 < len1 ) )) {
							int c1 = ( (((bool) (( ((uint) (index1) ) < ((string) (s2) ).Length )) )) ? (((int) (((string) (s2) )[index1]) )) : (-1) );
							index1 += ( ( ! ((( ( 55296 <= c1 ) && ( c1 <= 56319 ) ))) ) ? (1) : (2) );
							 ++ i1;
						}
						
						ei = index1;
					}
					else {
						while (false) {
						}
						
						ei = 0;
					}
					
				}
				
				return global::haxe.lang.StringExt.substring(s, si, new global::haxe.lang.Null<int>(ei, true));
			}
		}
		
		
		public static global::unifill.CodePointIter uIterator(string s) {
			return new global::unifill.CodePointIter(((string) (s) ));
		}
		
		
		public static int uCompare(string a, string b) {
			unchecked {
				int aiter_index = default(int);
				int aiter_i = 0;
				int endIndex = a.Length;
				aiter_index = 0;
				int biter_index = default(int);
				int biter_i = 0;
				int endIndex1 = b.Length;
				biter_index = 0;
				while (( ( aiter_index < endIndex ) && ( biter_index < endIndex1 ) )) {
					aiter_i = aiter_index;
					int index = aiter_index;
					string s = ((string) (a) );
					int c = ( (((bool) (( ((uint) (index) ) < ((string) (s) ).Length )) )) ? (((int) (((string) (s) )[index]) )) : (-1) );
					aiter_index += ( ( ! ((( ( 55296 <= c ) && ( c <= 56319 ) ))) ) ? (1) : (2) );
					int acode = global::unifill._Utf16.Utf16_Impl_.codePointAt(((string) (a) ), aiter_i);
					biter_i = biter_index;
					int index1 = biter_index;
					string s1 = ((string) (b) );
					int c1 = ( (((bool) (( ((uint) (index1) ) < ((string) (s1) ).Length )) )) ? (((int) (((string) (s1) )[index1]) )) : (-1) );
					biter_index += ( ( ! ((( ( 55296 <= c1 ) && ( c1 <= 56319 ) ))) ) ? (1) : (2) );
					int bcode = global::unifill._Utf16.Utf16_Impl_.codePointAt(((string) (b) ), biter_i);
					if (( acode < bcode )) {
						return -1;
					}
					
					if (( acode > bcode )) {
						return 1;
					}
					
				}
				
				if (( biter_index < endIndex1 )) {
					return -1;
				}
				
				if (( aiter_index < endIndex )) {
					return 1;
				}
				
				return 0;
			}
		}
		
		
		public static string uToString(object codePoints) {
			unchecked {
				global::StringBuf buf = ((global::StringBuf) (new global::StringBuf()) );
				{
					object c = ((object) (global::haxe.lang.Runtime.callField(((object) (codePoints) ), "iterator", 328878574, null)) );
					while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(c, "hasNext", 407283053, null))) {
						int c1 = ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.callField(c, "next", 1224901875, null))) );
						if (( c1 <= 65535 )) {
							((global::StringBuf) (buf) ).b.Append(((char) (c1) ));
						}
						else {
							((global::StringBuf) (buf) ).b.Append(((char) (( (( c1 >> 10 )) + 55232 )) ));
							((global::StringBuf) (buf) ).b.Append(((char) (( ( c1 & 1023 ) | 56320 )) ));
						}
						
					}
					
				}
				
				return ((string) (((global::StringBuf) (buf) ).b.ToString()) );
			}
		}
		
		
		public static void uAddChar(global::StringBuf sb, int c) {
			unchecked {
				int c1 = ((int) (c) );
				if (( c1 <= 65535 )) {
					sb.b.Append(((char) (c1) ));
				}
				else {
					sb.b.Append(((char) (( (( c1 >> 10 )) + 55232 )) ));
					sb.b.Append(((char) (( ( c1 & 1023 ) | 56320 )) ));
				}
				
			}
		}
		
		
	}
}


