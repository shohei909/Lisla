// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace litll.core.parse.@string {
	public class EscapeSequenceContext : global::haxe.lang.HxObject {
		
		public EscapeSequenceContext(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public EscapeSequenceContext(global::litll.core.parse.ParseContext top) {
			global::litll.core.parse.@string.EscapeSequenceContext.__hx_ctor_litll_core_parse_string_EscapeSequenceContext(this, top);
		}
		
		
		public static void __hx_ctor_litll_core_parse_string_EscapeSequenceContext(global::litll.core.parse.@string.EscapeSequenceContext __hx_this, global::litll.core.parse.ParseContext top) {
			__hx_this.top = top;
			__hx_this.startPosition = top.position;
			__hx_this.state = global::litll.core.parse.@string.EscapeSequenceState.Head;
		}
		
		
		public global::litll.core.parse.ParseContext top;
		
		public global::litll.core.parse.@string.EscapeSequenceState state;
		
		public int startPosition;
		
		public virtual global::litll.core.parse.@string.EscapeResult process(int codePoint, bool quoted) {
			unchecked {
				int code = ((int) (codePoint) );
				global::litll.core.parse.@string.EscapeSequenceState _g = this.state;
				switch (code) {
					case 34:
					{
						if (( _g.index == 0 )) {
							return global::litll.core.parse.@string.EscapeResult.Letter("\"");
						}
						else {
							{
								global::litll.core.parse.ParseContext _this = this.top;
								global::litll.core.ds.SourceRange range = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range == null )) {
									range = new global::litll.core.ds.SourceRange(_this.sourceMap, ( _this.position - 1 ), _this.position);
								}
								
								_this.errors.push(new global::litll.core.parse.ParseErrorEntry(_this.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range));
								if ( ! (_this.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 39:
					{
						if (( _g.index == 0 )) {
							return global::litll.core.parse.@string.EscapeResult.Letter("\'");
						}
						else {
							{
								global::litll.core.parse.ParseContext _this1 = this.top;
								global::litll.core.ds.SourceRange range1 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range1 == null )) {
									range1 = new global::litll.core.ds.SourceRange(_this1.sourceMap, ( _this1.position - 1 ), _this1.position);
								}
								
								_this1.errors.push(new global::litll.core.parse.ParseErrorEntry(_this1.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range1));
								if ( ! (_this1.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this1.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 48:
					{
						switch (_g.index) {
							case 0:
							{
								return global::litll.core.parse.@string.EscapeResult.Letter(new string(((char) (0) ), 1));
							}
							
							
							case 2:
							{
								int @value = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
								@value = ( ( @value << 4 ) | ( code - 48 ) );
								this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), @value);
								return global::litll.core.parse.@string.EscapeResult.Continue;
							}
							
							
							default:
							{
								{
									global::litll.core.parse.ParseContext _this2 = this.top;
									global::litll.core.ds.SourceRange range2 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
									if (( range2 == null )) {
										range2 = new global::litll.core.ds.SourceRange(_this2.sourceMap, ( _this2.position - 1 ), _this2.position);
									}
									
									_this2.errors.push(new global::litll.core.parse.ParseErrorEntry(_this2.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range2));
									if ( ! (_this2.config.persevering) ) {
										throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this2.errors));
									}
									
								}
								
								return global::litll.core.parse.@string.EscapeResult.Letter("");
							}
							
						}
						
					}
					
					
					case 49:
					{
						if (( _g.index == 2 )) {
							int value1 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							value1 = ( ( value1 << 4 ) | ( code - 48 ) );
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), value1);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this3 = this.top;
								global::litll.core.ds.SourceRange range3 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range3 == null )) {
									range3 = new global::litll.core.ds.SourceRange(_this3.sourceMap, ( _this3.position - 1 ), _this3.position);
								}
								
								_this3.errors.push(new global::litll.core.parse.ParseErrorEntry(_this3.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range3));
								if ( ! (_this3.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this3.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 50:
					{
						if (( _g.index == 2 )) {
							int value2 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							value2 = ( ( value2 << 4 ) | ( code - 48 ) );
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), value2);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this4 = this.top;
								global::litll.core.ds.SourceRange range4 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range4 == null )) {
									range4 = new global::litll.core.ds.SourceRange(_this4.sourceMap, ( _this4.position - 1 ), _this4.position);
								}
								
								_this4.errors.push(new global::litll.core.parse.ParseErrorEntry(_this4.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range4));
								if ( ! (_this4.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this4.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 51:
					{
						if (( _g.index == 2 )) {
							int value3 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							value3 = ( ( value3 << 4 ) | ( code - 48 ) );
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), value3);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this5 = this.top;
								global::litll.core.ds.SourceRange range5 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range5 == null )) {
									range5 = new global::litll.core.ds.SourceRange(_this5.sourceMap, ( _this5.position - 1 ), _this5.position);
								}
								
								_this5.errors.push(new global::litll.core.parse.ParseErrorEntry(_this5.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range5));
								if ( ! (_this5.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this5.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 52:
					{
						if (( _g.index == 2 )) {
							int value4 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							value4 = ( ( value4 << 4 ) | ( code - 48 ) );
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), value4);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this6 = this.top;
								global::litll.core.ds.SourceRange range6 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range6 == null )) {
									range6 = new global::litll.core.ds.SourceRange(_this6.sourceMap, ( _this6.position - 1 ), _this6.position);
								}
								
								_this6.errors.push(new global::litll.core.parse.ParseErrorEntry(_this6.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range6));
								if ( ! (_this6.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this6.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 53:
					{
						if (( _g.index == 2 )) {
							int value5 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							value5 = ( ( value5 << 4 ) | ( code - 48 ) );
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), value5);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this7 = this.top;
								global::litll.core.ds.SourceRange range7 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range7 == null )) {
									range7 = new global::litll.core.ds.SourceRange(_this7.sourceMap, ( _this7.position - 1 ), _this7.position);
								}
								
								_this7.errors.push(new global::litll.core.parse.ParseErrorEntry(_this7.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range7));
								if ( ! (_this7.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this7.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 54:
					{
						if (( _g.index == 2 )) {
							int value6 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							value6 = ( ( value6 << 4 ) | ( code - 48 ) );
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), value6);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this8 = this.top;
								global::litll.core.ds.SourceRange range8 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range8 == null )) {
									range8 = new global::litll.core.ds.SourceRange(_this8.sourceMap, ( _this8.position - 1 ), _this8.position);
								}
								
								_this8.errors.push(new global::litll.core.parse.ParseErrorEntry(_this8.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range8));
								if ( ! (_this8.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this8.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 55:
					{
						if (( _g.index == 2 )) {
							int value7 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							value7 = ( ( value7 << 4 ) | ( code - 48 ) );
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), value7);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this9 = this.top;
								global::litll.core.ds.SourceRange range9 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range9 == null )) {
									range9 = new global::litll.core.ds.SourceRange(_this9.sourceMap, ( _this9.position - 1 ), _this9.position);
								}
								
								_this9.errors.push(new global::litll.core.parse.ParseErrorEntry(_this9.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range9));
								if ( ! (_this9.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this9.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 56:
					{
						if (( _g.index == 2 )) {
							int value8 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							value8 = ( ( value8 << 4 ) | ( code - 48 ) );
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), value8);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this10 = this.top;
								global::litll.core.ds.SourceRange range10 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range10 == null )) {
									range10 = new global::litll.core.ds.SourceRange(_this10.sourceMap, ( _this10.position - 1 ), _this10.position);
								}
								
								_this10.errors.push(new global::litll.core.parse.ParseErrorEntry(_this10.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range10));
								if ( ! (_this10.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this10.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 57:
					{
						if (( _g.index == 2 )) {
							int value9 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							value9 = ( ( value9 << 4 ) | ( code - 48 ) );
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), value9);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this11 = this.top;
								global::litll.core.ds.SourceRange range11 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range11 == null )) {
									range11 = new global::litll.core.ds.SourceRange(_this11.sourceMap, ( _this11.position - 1 ), _this11.position);
								}
								
								_this11.errors.push(new global::litll.core.parse.ParseErrorEntry(_this11.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range11));
								if ( ! (_this11.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this11.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 65:
					{
						if (( _g.index == 2 )) {
							int value10 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							value10 = ( ( value10 << 4 ) | ( ( code - 65 ) + 10 ) );
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), value10);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this12 = this.top;
								global::litll.core.ds.SourceRange range12 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range12 == null )) {
									range12 = new global::litll.core.ds.SourceRange(_this12.sourceMap, ( _this12.position - 1 ), _this12.position);
								}
								
								_this12.errors.push(new global::litll.core.parse.ParseErrorEntry(_this12.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range12));
								if ( ! (_this12.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this12.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 66:
					{
						if (( _g.index == 2 )) {
							int value11 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							value11 = ( ( value11 << 4 ) | ( ( code - 65 ) + 10 ) );
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), value11);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this13 = this.top;
								global::litll.core.ds.SourceRange range13 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range13 == null )) {
									range13 = new global::litll.core.ds.SourceRange(_this13.sourceMap, ( _this13.position - 1 ), _this13.position);
								}
								
								_this13.errors.push(new global::litll.core.parse.ParseErrorEntry(_this13.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range13));
								if ( ! (_this13.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this13.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 67:
					{
						if (( _g.index == 2 )) {
							int value12 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							value12 = ( ( value12 << 4 ) | ( ( code - 65 ) + 10 ) );
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), value12);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this14 = this.top;
								global::litll.core.ds.SourceRange range14 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range14 == null )) {
									range14 = new global::litll.core.ds.SourceRange(_this14.sourceMap, ( _this14.position - 1 ), _this14.position);
								}
								
								_this14.errors.push(new global::litll.core.parse.ParseErrorEntry(_this14.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range14));
								if ( ! (_this14.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this14.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 68:
					{
						if (( _g.index == 2 )) {
							int value13 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							value13 = ( ( value13 << 4 ) | ( ( code - 65 ) + 10 ) );
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), value13);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this15 = this.top;
								global::litll.core.ds.SourceRange range15 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range15 == null )) {
									range15 = new global::litll.core.ds.SourceRange(_this15.sourceMap, ( _this15.position - 1 ), _this15.position);
								}
								
								_this15.errors.push(new global::litll.core.parse.ParseErrorEntry(_this15.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range15));
								if ( ! (_this15.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this15.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 69:
					{
						if (( _g.index == 2 )) {
							int value14 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							value14 = ( ( value14 << 4 ) | ( ( code - 65 ) + 10 ) );
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), value14);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this16 = this.top;
								global::litll.core.ds.SourceRange range16 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range16 == null )) {
									range16 = new global::litll.core.ds.SourceRange(_this16.sourceMap, ( _this16.position - 1 ), _this16.position);
								}
								
								_this16.errors.push(new global::litll.core.parse.ParseErrorEntry(_this16.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range16));
								if ( ! (_this16.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this16.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 70:
					{
						if (( _g.index == 2 )) {
							int value15 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							value15 = ( ( value15 << 4 ) | ( ( code - 65 ) + 10 ) );
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), value15);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this17 = this.top;
								global::litll.core.ds.SourceRange range17 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range17 == null )) {
									range17 = new global::litll.core.ds.SourceRange(_this17.sourceMap, ( _this17.position - 1 ), _this17.position);
								}
								
								_this17.errors.push(new global::litll.core.parse.ParseErrorEntry(_this17.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range17));
								if ( ! (_this17.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this17.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 91:
					{
						if (( _g.index == 0 )) {
							return global::litll.core.parse.@string.EscapeResult.Interpolate;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this18 = this.top;
								global::litll.core.ds.SourceRange range18 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range18 == null )) {
									range18 = new global::litll.core.ds.SourceRange(_this18.sourceMap, ( _this18.position - 1 ), _this18.position);
								}
								
								_this18.errors.push(new global::litll.core.parse.ParseErrorEntry(_this18.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range18));
								if ( ! (_this18.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this18.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 92:
					{
						if (( _g.index == 0 )) {
							return global::litll.core.parse.@string.EscapeResult.Letter("\\");
						}
						else {
							{
								global::litll.core.parse.ParseContext _this19 = this.top;
								global::litll.core.ds.SourceRange range19 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range19 == null )) {
									range19 = new global::litll.core.ds.SourceRange(_this19.sourceMap, ( _this19.position - 1 ), _this19.position);
								}
								
								_this19.errors.push(new global::litll.core.parse.ParseErrorEntry(_this19.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range19));
								if ( ! (_this19.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this19.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 97:
					{
						if (( _g.index == 2 )) {
							int value16 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							value16 = ( ( value16 << 4 ) | ( ( code - 97 ) + 10 ) );
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), value16);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this20 = this.top;
								global::litll.core.ds.SourceRange range20 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range20 == null )) {
									range20 = new global::litll.core.ds.SourceRange(_this20.sourceMap, ( _this20.position - 1 ), _this20.position);
								}
								
								_this20.errors.push(new global::litll.core.parse.ParseErrorEntry(_this20.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range20));
								if ( ! (_this20.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this20.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 98:
					{
						if (( _g.index == 2 )) {
							int value17 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							value17 = ( ( value17 << 4 ) | ( ( code - 97 ) + 10 ) );
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), value17);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this21 = this.top;
								global::litll.core.ds.SourceRange range21 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range21 == null )) {
									range21 = new global::litll.core.ds.SourceRange(_this21.sourceMap, ( _this21.position - 1 ), _this21.position);
								}
								
								_this21.errors.push(new global::litll.core.parse.ParseErrorEntry(_this21.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range21));
								if ( ! (_this21.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this21.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 99:
					{
						if (( _g.index == 2 )) {
							int value18 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							value18 = ( ( value18 << 4 ) | ( ( code - 97 ) + 10 ) );
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), value18);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this22 = this.top;
								global::litll.core.ds.SourceRange range22 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range22 == null )) {
									range22 = new global::litll.core.ds.SourceRange(_this22.sourceMap, ( _this22.position - 1 ), _this22.position);
								}
								
								_this22.errors.push(new global::litll.core.parse.ParseErrorEntry(_this22.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range22));
								if ( ! (_this22.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this22.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 100:
					{
						if (( _g.index == 2 )) {
							int value19 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							value19 = ( ( value19 << 4 ) | ( ( code - 97 ) + 10 ) );
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), value19);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this23 = this.top;
								global::litll.core.ds.SourceRange range23 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range23 == null )) {
									range23 = new global::litll.core.ds.SourceRange(_this23.sourceMap, ( _this23.position - 1 ), _this23.position);
								}
								
								_this23.errors.push(new global::litll.core.parse.ParseErrorEntry(_this23.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range23));
								if ( ! (_this23.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this23.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 101:
					{
						if (( _g.index == 2 )) {
							int value20 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							value20 = ( ( value20 << 4 ) | ( ( code - 97 ) + 10 ) );
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), value20);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this24 = this.top;
								global::litll.core.ds.SourceRange range24 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range24 == null )) {
									range24 = new global::litll.core.ds.SourceRange(_this24.sourceMap, ( _this24.position - 1 ), _this24.position);
								}
								
								_this24.errors.push(new global::litll.core.parse.ParseErrorEntry(_this24.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range24));
								if ( ! (_this24.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this24.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 102:
					{
						if (( _g.index == 2 )) {
							int value21 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							value21 = ( ( value21 << 4 ) | ( ( code - 97 ) + 10 ) );
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ), value21);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this25 = this.top;
								global::litll.core.ds.SourceRange range25 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range25 == null )) {
									range25 = new global::litll.core.ds.SourceRange(_this25.sourceMap, ( _this25.position - 1 ), _this25.position);
								}
								
								_this25.errors.push(new global::litll.core.parse.ParseErrorEntry(_this25.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range25));
								if ( ! (_this25.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this25.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 110:
					{
						if (( _g.index == 0 )) {
							return global::litll.core.parse.@string.EscapeResult.Letter("\n");
						}
						else {
							{
								global::litll.core.parse.ParseContext _this26 = this.top;
								global::litll.core.ds.SourceRange range26 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range26 == null )) {
									range26 = new global::litll.core.ds.SourceRange(_this26.sourceMap, ( _this26.position - 1 ), _this26.position);
								}
								
								_this26.errors.push(new global::litll.core.parse.ParseErrorEntry(_this26.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range26));
								if ( ! (_this26.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this26.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 114:
					{
						if (( _g.index == 0 )) {
							return global::litll.core.parse.@string.EscapeResult.Letter("\r");
						}
						else {
							{
								global::litll.core.parse.ParseContext _this27 = this.top;
								global::litll.core.ds.SourceRange range27 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range27 == null )) {
									range27 = new global::litll.core.ds.SourceRange(_this27.sourceMap, ( _this27.position - 1 ), _this27.position);
								}
								
								_this27.errors.push(new global::litll.core.parse.ParseErrorEntry(_this27.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range27));
								if ( ! (_this27.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this27.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 116:
					{
						if (( _g.index == 0 )) {
							return global::litll.core.parse.@string.EscapeResult.Letter("\t");
						}
						else {
							{
								global::litll.core.parse.ParseContext _this28 = this.top;
								global::litll.core.ds.SourceRange range28 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range28 == null )) {
									range28 = new global::litll.core.ds.SourceRange(_this28.sourceMap, ( _this28.position - 1 ), _this28.position);
								}
								
								_this28.errors.push(new global::litll.core.parse.ParseErrorEntry(_this28.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range28));
								if ( ! (_this28.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this28.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 117:
					{
						if (( _g.index == 0 )) {
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeHead;
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this29 = this.top;
								global::litll.core.ds.SourceRange range29 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range29 == null )) {
									range29 = new global::litll.core.ds.SourceRange(_this29.sourceMap, ( _this29.position - 1 ), _this29.position);
								}
								
								_this29.errors.push(new global::litll.core.parse.ParseErrorEntry(_this29.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range29));
								if ( ! (_this29.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this29.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 123:
					{
						if (( _g.index == 1 )) {
							this.state = global::litll.core.parse.@string.EscapeSequenceState.UnicodeBody(0, 0);
							return global::litll.core.parse.@string.EscapeResult.Continue;
						}
						else {
							{
								global::litll.core.parse.ParseContext _this30 = this.top;
								global::litll.core.ds.SourceRange range30 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range30 == null )) {
									range30 = new global::litll.core.ds.SourceRange(_this30.sourceMap, ( _this30.position - 1 ), _this30.position);
								}
								
								_this30.errors.push(new global::litll.core.parse.ParseErrorEntry(_this30.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range30));
								if ( ! (_this30.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this30.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
					}
					
					
					case 125:
					{
						if (( _g.index == 2 )) {
							int value22 = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
							int count = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) );
							if (( ( count == 0 ) || ( 6 < count ) )) {
								{
									global::litll.core.parse.ParseContext _this31 = this.top;
									global::litll.core.ds.SourceRange range31 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
									if (( range31 == null )) {
										range31 = new global::litll.core.ds.SourceRange(_this31.sourceMap, ( _this31.position - 1 ), _this31.position);
									}
									
									_this31.errors.push(new global::litll.core.parse.ParseErrorEntry(_this31.@string, global::litll.core.parse.ParseErrorKind.InvalidDigitUnicodeEscape, range31));
									if ( ! (_this31.config.persevering) ) {
										throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this31.errors));
									}
									
								}
								
								return global::litll.core.parse.@string.EscapeResult.Letter("");
							}
							else {
								try {
									if ( ! ((( ( ( ( 0 <= value22 ) && ( value22 <= 1114111 ) ) &&  ! ((( ( 55296 <= value22 ) && ( value22 <= 56319 ) )))  ) &&  ! ((( ( 56320 <= value22 ) && ( value22 <= 57343 ) )))  ))) ) {
										throw global::haxe.lang.HaxeException.wrap(new global::unifill.InvalidCodePoint(((int) (value22) )));
									}
									
									return global::litll.core.parse.@string.EscapeResult.Letter(((string) (( (( ((int) (value22) ) <= 65535 )) ? (((string) (new string(((char) (((int) (value22) )) ), 1)) )) : (((string) (global::haxe.lang.Runtime.concat(new string(((char) (( (( ((int) (value22) ) >> 10 )) + 55232 )) ), 1), new string(((char) (( ( ((int) (value22) ) & 1023 ) | 56320 )) ), 1))) )) )) ));
								}
								catch (global::System.Exception __temp_catchallException1){
									global::haxe.lang.Exceptions.exception = __temp_catchallException1;
									object __temp_catchall2 = __temp_catchallException1;
									if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
										__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
									}
									
									if (( __temp_catchall2 is global::unifill.Exception )) {
										global::unifill.Exception e = ((global::unifill.Exception) (__temp_catchall2) );
										{
											{
												global::litll.core.parse.ParseContext _this32 = this.top;
												global::litll.core.ds.SourceRange range32 = null;
												if (( range32 == null )) {
													range32 = new global::litll.core.ds.SourceRange(_this32.sourceMap, ( _this32.position - 1 ), _this32.position);
												}
												
												_this32.errors.push(new global::litll.core.parse.ParseErrorEntry(_this32.@string, global::litll.core.parse.ParseErrorKind.InvalidUnicode, range32));
												if ( ! (_this32.config.persevering) ) {
													throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this32.errors));
												}
												
											}
											
											return global::litll.core.parse.@string.EscapeResult.Letter("");
										}
										
									}
									else {
										throw;
									}
									
								}
								
								
							}
							
						}
						else {
							{
								global::litll.core.parse.ParseContext _this33 = this.top;
								global::litll.core.ds.SourceRange range33 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
								if (( range33 == null )) {
									range33 = new global::litll.core.ds.SourceRange(_this33.sourceMap, ( _this33.position - 1 ), _this33.position);
								}
								
								_this33.errors.push(new global::litll.core.parse.ParseErrorEntry(_this33.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range33));
								if ( ! (_this33.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this33.errors));
								}
								
							}
							
							return global::litll.core.parse.@string.EscapeResult.Letter("");
						}
						
						break;
					}
					
					
					default:
					{
						{
							global::litll.core.parse.ParseContext _this34 = this.top;
							global::litll.core.ds.SourceRange range34 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.startPosition, this.top.position);
							if (( range34 == null )) {
								range34 = new global::litll.core.ds.SourceRange(_this34.sourceMap, ( _this34.position - 1 ), _this34.position);
							}
							
							_this34.errors.push(new global::litll.core.parse.ParseErrorEntry(_this34.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range34));
							if ( ! (_this34.config.persevering) ) {
								throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this34.errors));
							}
							
						}
						
						return global::litll.core.parse.@string.EscapeResult.Letter("");
					}
					
				}
				
				return null;
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1337328427:
					{
						this.startPosition = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1337328427:
					{
						this.startPosition = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 67859985:
					{
						this.state = ((global::litll.core.parse.@string.EscapeSequenceState) (@value) );
						return @value;
					}
					
					
					case 5793429:
					{
						this.top = ((global::litll.core.parse.ParseContext) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1900716655:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "process", 1900716655)) );
					}
					
					
					case 1337328427:
					{
						return this.startPosition;
					}
					
					
					case 67859985:
					{
						return this.state;
					}
					
					
					case 5793429:
					{
						return this.top;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1337328427:
					{
						return ((double) (this.startPosition) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1900716655:
					{
						return this.process(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), global::haxe.lang.Runtime.toBool(dynargs[1]));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("startPosition");
			baseArr.push("state");
			baseArr.push("top");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


