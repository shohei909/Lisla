// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace litll.core.parse {
	public class ParseErrorEntry : global::haxe.lang.HxObject {
		
		public ParseErrorEntry(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public ParseErrorEntry(string source, global::litll.core.parse.ParseErrorKind kind, global::litll.core.ds.SourceRange range) {
			global::litll.core.parse.ParseErrorEntry.__hx_ctor_litll_core_parse_ParseErrorEntry(this, source, kind, range);
		}
		
		
		public static void __hx_ctor_litll_core_parse_ParseErrorEntry(global::litll.core.parse.ParseErrorEntry __hx_this, string source, global::litll.core.parse.ParseErrorKind kind, global::litll.core.ds.SourceRange range) {
			__hx_this.source = source;
			__hx_this.kind = kind;
			__hx_this.range = range;
		}
		
		
		public string source;
		
		public global::litll.core.parse.ParseErrorKind kind;
		
		public global::litll.core.ds.SourceRange range;
		
		
		
		public virtual string get_message() {
			unchecked {
				global::litll.core.parse.ParseErrorKind _g = this.kind;
				switch (_g.index) {
					case 0:
					{
						return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Char 0x", global::StringTools.hex(((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ), default(global::haxe.lang.Null<int>))), " is blacklisted whitespace. It can\'t be use without quoting.");
					}
					
					
					case 1:
					{
						return "Invalid escape sequence.";
					}
					
					
					case 2:
					{
						return "Digit of unicode must be 1-6.";
					}
					
					
					case 3:
					{
						return "Invalid unicode.";
					}
					
					
					case 4:
					{
						return "Interpolation separator is used in not interpolation context.";
					}
					
					
					case 5:
					{
						return "Escape sequence is not supported for unquoted sequence.";
					}
					
					
					case 6:
					{
						return "Unclosed array.";
					}
					
					
					case 7:
					{
						return "Unclosed quote.";
					}
					
					
					case 8:
					{
						return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Too many closing quotes. ", global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ))), " expected but actual "), global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) )));
					}
					
					
					case 9:
					{
						return "Too many closing brackets.";
					}
					
					
					case 10:
					{
						return "Too short indent.";
					}
					
					
					case 11:
					{
						return "Indent white spaces are unmatched.";
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public virtual string toString() {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("ParseError: ", this.range.toString()), ": "), this.get_message());
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1679795645:
					{
						this.range = ((global::litll.core.ds.SourceRange) (@value) );
						return @value;
					}
					
					
					case 1191829844:
					{
						this.kind = ((global::litll.core.parse.ParseErrorKind) (@value) );
						return @value;
					}
					
					
					case 842117339:
					{
						this.source = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 537630174:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_message", 537630174)) );
					}
					
					
					case 437335495:
					{
						return this.get_message();
					}
					
					
					case 1679795645:
					{
						return this.range;
					}
					
					
					case 1191829844:
					{
						return this.kind;
					}
					
					
					case 842117339:
					{
						return this.source;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return this.toString();
					}
					
					
					case 537630174:
					{
						return this.get_message();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("message");
			baseArr.push("range");
			baseArr.push("kind");
			baseArr.push("source");
			base.__hx_getFields(baseArr);
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}


