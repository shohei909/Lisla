// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace litll.core.parse.@string {
	public class QuotedStringContext : global::haxe.lang.HxObject {
		
		public QuotedStringContext(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public QuotedStringContext(global::litll.core.parse.ParseContext top, global::litll.core.parse.array.ArrayContext parent, bool singleQuoted, int startQuoteCount, global::litll.core.parse.tag.UnsettledStringTag tag) {
			global::litll.core.parse.@string.QuotedStringContext.__hx_ctor_litll_core_parse_string_QuotedStringContext(this, top, parent, singleQuoted, startQuoteCount, tag);
		}
		
		
		public static void __hx_ctor_litll_core_parse_string_QuotedStringContext(global::litll.core.parse.@string.QuotedStringContext __hx_this, global::litll.core.parse.ParseContext top, global::litll.core.parse.array.ArrayContext parent, bool singleQuoted, int startQuoteCount, global::litll.core.parse.tag.UnsettledStringTag tag) {
			__hx_this.top = top;
			__hx_this.parent = parent;
			__hx_this.singleQuoted = singleQuoted;
			__hx_this.startQuoteCount = startQuoteCount;
			__hx_this.tag = tag;
			__hx_this.currentString = new global::Array<object>(new object[]{});
			__hx_this.storedData = new global::Array<object>(new object[]{});
			__hx_this.currentLine = new global::litll.core.parse.@string.QuotedStringLine(((int) (tag.startPosition) ));
			__hx_this.state = global::litll.core.parse.@string.QuotedStringState.Indent;
			__hx_this.lastIndent = "";
		}
		
		
		public global::litll.core.parse.array.ArrayContext parent;
		
		public global::litll.core.parse.ParseContext top;
		
		public global::litll.core.parse.@string.QuotedStringLine currentLine;
		
		public global::Array<object> currentString;
		
		public global::Array<object> storedData;
		
		public global::litll.core.parse.@string.QuotedStringState state;
		
		public bool singleQuoted;
		
		public int startQuoteCount;
		
		public global::litll.core.parse.tag.UnsettledStringTag tag;
		
		public string lastIndent;
		
		public virtual void store(global::litll.core.parse.@string.QuotedStringArrayPair data) {
			this.tag = new global::litll.core.parse.tag.UnsettledLeadingTag(((global::litll.core.ds.SourceMap) (this.top.sourceMap) )).toStringTag(this.top.position);
			this.storedData.push(data);
		}
		
		
		public virtual void process(int codePoint) {
			unchecked {
				global::litll.core.parse.@string.QuotedStringState _g = this.state;
				switch (_g.index) {
					case 0:
					{
						bool tmp = default(bool);
						switch (((int) (codePoint) )) {
							case 9:
							case 32:
							{
								tmp = true;
								break;
							}
							
							
							default:
							{
								tmp = false;
								break;
							}
							
						}
						
						if (tmp) {
							{
								global::litll.core.parse.@string.QuotedStringLine __temp_dynop1 = this.currentLine;
								__temp_dynop1.content = global::haxe.lang.Runtime.concat(__temp_dynop1.content, ((string) (( (( ((int) (codePoint) ) <= 65535 )) ? (((string) (new string(((char) (((int) (codePoint) )) ), 1)) )) : (((string) (global::haxe.lang.Runtime.concat(new string(((char) (( (( ((int) (codePoint) ) >> 10 )) + 55232 )) ), 1), new string(((char) (( ( ((int) (codePoint) ) & 1023 ) | 56320 )) ), 1))) )) )) ));
							}
							
							{
								global::litll.core.parse.@string.QuotedStringContext __temp_dynop2 = this;
								__temp_dynop2.lastIndent = global::haxe.lang.Runtime.concat(__temp_dynop2.lastIndent, ((string) (( (( ((int) (codePoint) ) <= 65535 )) ? (((string) (new string(((char) (((int) (codePoint) )) ), 1)) )) : (((string) (global::haxe.lang.Runtime.concat(new string(((char) (( (( ((int) (codePoint) ) >> 10 )) + 55232 )) ), 1), new string(((char) (( ( ((int) (codePoint) ) & 1023 ) | 56320 )) ), 1))) )) )) ));
							}
							
							this.currentLine.indent += 1;
						}
						else {
							this.state = global::litll.core.parse.@string.QuotedStringState.Body;
							bool tmp1 = default(bool);
							bool _g1 = this.singleQuoted;
							switch (((int) (codePoint) )) {
								case 34:
								{
									if (( _g1 == false )) {
										tmp1 = true;
									}
									else {
										tmp1 = false;
									}
									
									break;
								}
								
								
								case 39:
								{
									if (( _g1 == true )) {
										tmp1 = true;
									}
									else {
										tmp1 = false;
									}
									
									break;
								}
								
								
								default:
								{
									tmp1 = false;
									break;
								}
								
							}
							
							if (tmp1) {
								this.state = global::litll.core.parse.@string.QuotedStringState.Quotes(1);
							}
							else {
								switch (((int) (codePoint) )) {
									case 10:
									{
										this.lastIndent = "";
										this.currentLine.newLine = "\n";
										this.currentString.push(this.currentLine);
										this.currentLine = new global::litll.core.parse.@string.QuotedStringLine(((int) (this.top.position) ));
										this.state = global::litll.core.parse.@string.QuotedStringState.Indent;
										break;
									}
									
									
									case 13:
									{
										this.state = global::litll.core.parse.@string.QuotedStringState.CarriageReturn;
										break;
									}
									
									
									case 92:
									{
										if ( ! (this.singleQuoted) ) {
											this.state = global::litll.core.parse.@string.QuotedStringState.EscapeSequence(new global::litll.core.parse.@string.EscapeSequenceContext(((global::litll.core.parse.ParseContext) (this.top) )));
										}
										else {
											global::litll.core.parse.@string.QuotedStringLine __temp_dynop3 = this.currentLine;
											__temp_dynop3.content = global::haxe.lang.Runtime.concat(__temp_dynop3.content, ((string) (( (( ((int) (codePoint) ) <= 65535 )) ? (((string) (new string(((char) (((int) (codePoint) )) ), 1)) )) : (((string) (global::haxe.lang.Runtime.concat(new string(((char) (( (( ((int) (codePoint) ) >> 10 )) + 55232 )) ), 1), new string(((char) (( ( ((int) (codePoint) ) & 1023 ) | 56320 )) ), 1))) )) )) ));
										}
										
										break;
									}
									
									
									default:
									{
										global::litll.core.parse.@string.QuotedStringLine __temp_dynop4 = this.currentLine;
										__temp_dynop4.content = global::haxe.lang.Runtime.concat(__temp_dynop4.content, ((string) (( (( ((int) (codePoint) ) <= 65535 )) ? (((string) (new string(((char) (((int) (codePoint) )) ), 1)) )) : (((string) (global::haxe.lang.Runtime.concat(new string(((char) (( (( ((int) (codePoint) ) >> 10 )) + 55232 )) ), 1), new string(((char) (( ( ((int) (codePoint) ) & 1023 ) | 56320 )) ), 1))) )) )) ));
										break;
									}
									
								}
								
							}
							
						}
						
						break;
					}
					
					
					case 1:
					{
						bool tmp2 = default(bool);
						bool _g2 = this.singleQuoted;
						switch (((int) (codePoint) )) {
							case 34:
							{
								if (( _g2 == false )) {
									tmp2 = true;
								}
								else {
									tmp2 = false;
								}
								
								break;
							}
							
							
							case 39:
							{
								if (( _g2 == true )) {
									tmp2 = true;
								}
								else {
									tmp2 = false;
								}
								
								break;
							}
							
							
							default:
							{
								tmp2 = false;
								break;
							}
							
						}
						
						if (tmp2) {
							this.state = global::litll.core.parse.@string.QuotedStringState.Quotes(1);
						}
						else {
							switch (((int) (codePoint) )) {
								case 10:
								{
									this.lastIndent = "";
									this.currentLine.newLine = "\n";
									this.currentString.push(this.currentLine);
									this.currentLine = new global::litll.core.parse.@string.QuotedStringLine(((int) (this.top.position) ));
									this.state = global::litll.core.parse.@string.QuotedStringState.Indent;
									break;
								}
								
								
								case 13:
								{
									this.state = global::litll.core.parse.@string.QuotedStringState.CarriageReturn;
									break;
								}
								
								
								case 92:
								{
									if ( ! (this.singleQuoted) ) {
										this.state = global::litll.core.parse.@string.QuotedStringState.EscapeSequence(new global::litll.core.parse.@string.EscapeSequenceContext(((global::litll.core.parse.ParseContext) (this.top) )));
									}
									else {
										global::litll.core.parse.@string.QuotedStringLine __temp_dynop5 = this.currentLine;
										__temp_dynop5.content = global::haxe.lang.Runtime.concat(__temp_dynop5.content, ((string) (( (( ((int) (codePoint) ) <= 65535 )) ? (((string) (new string(((char) (((int) (codePoint) )) ), 1)) )) : (((string) (global::haxe.lang.Runtime.concat(new string(((char) (( (( ((int) (codePoint) ) >> 10 )) + 55232 )) ), 1), new string(((char) (( ( ((int) (codePoint) ) & 1023 ) | 56320 )) ), 1))) )) )) ));
									}
									
									break;
								}
								
								
								default:
								{
									global::litll.core.parse.@string.QuotedStringLine __temp_dynop6 = this.currentLine;
									__temp_dynop6.content = global::haxe.lang.Runtime.concat(__temp_dynop6.content, ((string) (( (( ((int) (codePoint) ) <= 65535 )) ? (((string) (new string(((char) (((int) (codePoint) )) ), 1)) )) : (((string) (global::haxe.lang.Runtime.concat(new string(((char) (( (( ((int) (codePoint) ) >> 10 )) + 55232 )) ), 1), new string(((char) (( ( ((int) (codePoint) ) & 1023 ) | 56320 )) ), 1))) )) )) ));
									break;
								}
								
							}
							
						}
						
						break;
					}
					
					
					case 2:
					{
						if (( ((int) (codePoint) ) == 10 )) {
							this.lastIndent = "";
							this.currentLine.newLine = "\r\n";
							this.currentString.push(this.currentLine);
							this.currentLine = new global::litll.core.parse.@string.QuotedStringLine(((int) (this.top.position) ));
							this.state = global::litll.core.parse.@string.QuotedStringState.Indent;
						}
						else {
							{
								this.lastIndent = "";
								this.currentLine.newLine = "\r";
								this.currentString.push(this.currentLine);
								this.currentLine = new global::litll.core.parse.@string.QuotedStringLine(((int) (this.top.position) ));
								this.state = global::litll.core.parse.@string.QuotedStringState.Indent;
							}
							
							this.process(codePoint);
						}
						
						break;
					}
					
					
					case 3:
					{
						int length = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) );
						bool tmp3 = default(bool);
						bool _g3 = this.singleQuoted;
						switch (((int) (codePoint) )) {
							case 34:
							{
								if (( _g3 == false )) {
									tmp3 = true;
								}
								else {
									tmp3 = false;
								}
								
								break;
							}
							
							
							case 39:
							{
								if (( _g3 == true )) {
									tmp3 = true;
								}
								else {
									tmp3 = false;
								}
								
								break;
							}
							
							
							default:
							{
								tmp3 = false;
								break;
							}
							
						}
						
						if (tmp3) {
							this.state = global::litll.core.parse.@string.QuotedStringState.Quotes(( length + 1 ));
						}
						else if (( this.startQuoteCount <= length )) {
							this.endClosedQuotedString(length);
							this.parent.process(codePoint);
						}
						else {
							{
								string @string = new string(((char) (( (this.singleQuoted) ? (39) : (34) )) ), 1);
								{
									int _g11 = 0;
									while (( _g11 < length )) {
										 ++ _g11;
										{
											global::litll.core.parse.@string.QuotedStringLine __temp_dynop7 = this.currentLine;
											__temp_dynop7.content = global::haxe.lang.Runtime.concat(__temp_dynop7.content, @string);
										}
										
									}
									
								}
								
							}
							
							this.state = global::litll.core.parse.@string.QuotedStringState.Body;
							bool tmp4 = default(bool);
							bool _g4 = this.singleQuoted;
							switch (((int) (codePoint) )) {
								case 34:
								{
									if (( _g4 == false )) {
										tmp4 = true;
									}
									else {
										tmp4 = false;
									}
									
									break;
								}
								
								
								case 39:
								{
									if (( _g4 == true )) {
										tmp4 = true;
									}
									else {
										tmp4 = false;
									}
									
									break;
								}
								
								
								default:
								{
									tmp4 = false;
									break;
								}
								
							}
							
							if (tmp4) {
								this.state = global::litll.core.parse.@string.QuotedStringState.Quotes(1);
							}
							else {
								switch (((int) (codePoint) )) {
									case 10:
									{
										this.lastIndent = "";
										this.currentLine.newLine = "\n";
										this.currentString.push(this.currentLine);
										this.currentLine = new global::litll.core.parse.@string.QuotedStringLine(((int) (this.top.position) ));
										this.state = global::litll.core.parse.@string.QuotedStringState.Indent;
										break;
									}
									
									
									case 13:
									{
										this.state = global::litll.core.parse.@string.QuotedStringState.CarriageReturn;
										break;
									}
									
									
									case 92:
									{
										if ( ! (this.singleQuoted) ) {
											this.state = global::litll.core.parse.@string.QuotedStringState.EscapeSequence(new global::litll.core.parse.@string.EscapeSequenceContext(((global::litll.core.parse.ParseContext) (this.top) )));
										}
										else {
											global::litll.core.parse.@string.QuotedStringLine __temp_dynop8 = this.currentLine;
											__temp_dynop8.content = global::haxe.lang.Runtime.concat(__temp_dynop8.content, ((string) (( (( ((int) (codePoint) ) <= 65535 )) ? (((string) (new string(((char) (((int) (codePoint) )) ), 1)) )) : (((string) (global::haxe.lang.Runtime.concat(new string(((char) (( (( ((int) (codePoint) ) >> 10 )) + 55232 )) ), 1), new string(((char) (( ( ((int) (codePoint) ) & 1023 ) | 56320 )) ), 1))) )) )) ));
										}
										
										break;
									}
									
									
									default:
									{
										global::litll.core.parse.@string.QuotedStringLine __temp_dynop9 = this.currentLine;
										__temp_dynop9.content = global::haxe.lang.Runtime.concat(__temp_dynop9.content, ((string) (( (( ((int) (codePoint) ) <= 65535 )) ? (((string) (new string(((char) (((int) (codePoint) )) ), 1)) )) : (((string) (global::haxe.lang.Runtime.concat(new string(((char) (( (( ((int) (codePoint) ) >> 10 )) + 55232 )) ), 1), new string(((char) (( ( ((int) (codePoint) ) & 1023 ) | 56320 )) ), 1))) )) )) ));
										break;
									}
									
								}
								
							}
							
						}
						
						break;
					}
					
					
					case 4:
					{
						global::litll.core.parse.@string.EscapeResult _g5 = ((global::litll.core.parse.@string.EscapeSequenceContext) (_g.@params[0]) ).process(codePoint, true);
						switch (_g5.index) {
							case 0:
							{
								break;
							}
							
							
							case 1:
							{
								this.currentString.push(this.currentLine);
								global::litll.core.parse.@string.QuotedStringArrayPair store = new global::litll.core.parse.@string.QuotedStringArrayPair(this.currentString, this.tag.settle(this.top.position));
								this.currentString = new global::Array<object>(new object[]{});
								this.currentLine = new global::litll.core.parse.@string.QuotedStringLine(((int) (this.top.position) ));
								this.state = global::litll.core.parse.@string.QuotedStringState.Body;
								this.top.current = new global::litll.core.parse.array.ArrayContext(this.top, global::litll.core.parse.array.ArrayParent.QuotedString(this, store), false, new global::litll.core.parse.tag.UnsettledLeadingTag(((global::litll.core.ds.SourceMap) (this.tag.leadingTag.sourceMap) )).toArrayTag(0));
								break;
							}
							
							
							case 2:
							{
								{
									global::litll.core.parse.@string.QuotedStringLine __temp_dynop10 = this.currentLine;
									__temp_dynop10.content = global::haxe.lang.Runtime.concat(__temp_dynop10.content, global::haxe.lang.Runtime.toString(_g5.@params[0]));
								}
								
								this.state = global::litll.core.parse.@string.QuotedStringState.Body;
								break;
							}
							
							
						}
						
						break;
					}
					
					
				}
				
			}
		}
		
		
		public void processBody(int codePoint) {
			unchecked {
				bool tmp = default(bool);
				bool _g = this.singleQuoted;
				switch (((int) (codePoint) )) {
					case 34:
					{
						if (( _g == false )) {
							tmp = true;
						}
						else {
							tmp = false;
						}
						
						break;
					}
					
					
					case 39:
					{
						if (( _g == true )) {
							tmp = true;
						}
						else {
							tmp = false;
						}
						
						break;
					}
					
					
					default:
					{
						tmp = false;
						break;
					}
					
				}
				
				if (tmp) {
					this.state = global::litll.core.parse.@string.QuotedStringState.Quotes(1);
				}
				else {
					switch (((int) (codePoint) )) {
						case 10:
						{
							this.lastIndent = "";
							this.currentLine.newLine = "\n";
							this.currentString.push(this.currentLine);
							this.currentLine = new global::litll.core.parse.@string.QuotedStringLine(((int) (this.top.position) ));
							this.state = global::litll.core.parse.@string.QuotedStringState.Indent;
							break;
						}
						
						
						case 13:
						{
							this.state = global::litll.core.parse.@string.QuotedStringState.CarriageReturn;
							break;
						}
						
						
						case 92:
						{
							if ( ! (this.singleQuoted) ) {
								this.state = global::litll.core.parse.@string.QuotedStringState.EscapeSequence(new global::litll.core.parse.@string.EscapeSequenceContext(((global::litll.core.parse.ParseContext) (this.top) )));
							}
							else {
								global::litll.core.parse.@string.QuotedStringLine __temp_dynop1 = this.currentLine;
								__temp_dynop1.content = global::haxe.lang.Runtime.concat(__temp_dynop1.content, ((string) (( (( ((int) (codePoint) ) <= 65535 )) ? (((string) (new string(((char) (((int) (codePoint) )) ), 1)) )) : (((string) (global::haxe.lang.Runtime.concat(new string(((char) (( (( ((int) (codePoint) ) >> 10 )) + 55232 )) ), 1), new string(((char) (( ( ((int) (codePoint) ) & 1023 ) | 56320 )) ), 1))) )) )) ));
							}
							
							break;
						}
						
						
						default:
						{
							global::litll.core.parse.@string.QuotedStringLine __temp_dynop2 = this.currentLine;
							__temp_dynop2.content = global::haxe.lang.Runtime.concat(__temp_dynop2.content, ((string) (( (( ((int) (codePoint) ) <= 65535 )) ? (((string) (new string(((char) (((int) (codePoint) )) ), 1)) )) : (((string) (global::haxe.lang.Runtime.concat(new string(((char) (( (( ((int) (codePoint) ) >> 10 )) + 55232 )) ), 1), new string(((char) (( ( ((int) (codePoint) ) & 1023 ) | 56320 )) ), 1))) )) )) ));
							break;
						}
						
					}
					
				}
				
			}
		}
		
		
		public void addIndent(int codePoint) {
			unchecked {
				{
					global::litll.core.parse.@string.QuotedStringLine __temp_dynop1 = this.currentLine;
					__temp_dynop1.content = global::haxe.lang.Runtime.concat(__temp_dynop1.content, ((string) (( (( ((int) (codePoint) ) <= 65535 )) ? (((string) (new string(((char) (((int) (codePoint) )) ), 1)) )) : (((string) (global::haxe.lang.Runtime.concat(new string(((char) (( (( ((int) (codePoint) ) >> 10 )) + 55232 )) ), 1), new string(((char) (( ( ((int) (codePoint) ) & 1023 ) | 56320 )) ), 1))) )) )) ));
				}
				
				{
					global::litll.core.parse.@string.QuotedStringContext __temp_dynop2 = this;
					__temp_dynop2.lastIndent = global::haxe.lang.Runtime.concat(__temp_dynop2.lastIndent, ((string) (( (( ((int) (codePoint) ) <= 65535 )) ? (((string) (new string(((char) (((int) (codePoint) )) ), 1)) )) : (((string) (global::haxe.lang.Runtime.concat(new string(((char) (( (( ((int) (codePoint) ) >> 10 )) + 55232 )) ), 1), new string(((char) (( ( ((int) (codePoint) ) & 1023 ) | 56320 )) ), 1))) )) )) ));
				}
				
				this.currentLine.indent += 1;
			}
		}
		
		
		public void newLine(string @string) {
			this.lastIndent = "";
			this.currentLine.newLine = @string;
			this.currentString.push(this.currentLine);
			this.currentLine = new global::litll.core.parse.@string.QuotedStringLine(((int) (this.top.position) ));
			this.state = global::litll.core.parse.@string.QuotedStringState.Indent;
		}
		
		
		public bool matchQuote(int codePoint) {
			unchecked {
				bool _g = this.singleQuoted;
				switch (((int) (codePoint) )) {
					case 34:
					{
						if (( _g == false )) {
							return true;
						}
						else {
							return false;
						}
						
					}
					
					
					case 39:
					{
						if (( _g == true )) {
							return true;
						}
						else {
							return false;
						}
						
					}
					
					
					default:
					{
						return false;
					}
					
				}
				
			}
		}
		
		
		public void addQuotes(int length) {
			unchecked {
				string @string = new string(((char) (( (this.singleQuoted) ? (39) : (34) )) ), 1);
				{
					int _g1 = 0;
					while (( _g1 < length )) {
						 ++ _g1;
						{
							global::litll.core.parse.@string.QuotedStringLine __temp_dynop1 = this.currentLine;
							__temp_dynop1.content = global::haxe.lang.Runtime.concat(__temp_dynop1.content, @string);
						}
						
					}
					
				}
				
			}
		}
		
		
		public void end() {
			unchecked {
				global::litll.core.parse.@string.QuotedStringState _g = this.state;
				switch (_g.index) {
					case 0:
					case 1:
					{
						this.endUnclosedQuotedString(0);
						break;
					}
					
					
					case 2:
					{
						{
							this.lastIndent = "";
							this.currentLine.newLine = "\r";
							this.currentString.push(this.currentLine);
							this.currentLine = new global::litll.core.parse.@string.QuotedStringLine(((int) (this.top.position) ));
							this.state = global::litll.core.parse.@string.QuotedStringState.Indent;
						}
						
						this.endUnclosedQuotedString(0);
						break;
					}
					
					
					case 3:
					{
						int length = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) );
						if (( length < this.startQuoteCount )) {
							this.endUnclosedQuotedString(length);
						}
						else {
							this.endClosedQuotedString(length);
						}
						
						break;
					}
					
					
					case 4:
					{
						global::litll.core.parse.ParseContext _this = this.top;
						global::litll.core.ds.SourceRange range = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.tag.startPosition, this.top.position);
						if (( range == null )) {
							range = new global::litll.core.ds.SourceRange(_this.sourceMap, ( _this.position - 1 ), _this.position);
						}
						
						_this.errors.push(new global::litll.core.parse.ParseErrorEntry(_this.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range));
						if ( ! (_this.config.persevering) ) {
							throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this.errors));
						}
						
						break;
					}
					
					
				}
				
			}
		}
		
		
		public virtual void endUnclosedQuotedString(int endQuoteCount) {
			unchecked {
				{
					global::litll.core.parse.ParseContext _this = this.top;
					global::litll.core.ds.SourceRange range = new global::litll.core.ds.SourceRange(this.top.sourceMap, ( this.tag.startPosition - this.startQuoteCount ), this.tag.startPosition);
					if (( range == null )) {
						range = new global::litll.core.ds.SourceRange(_this.sourceMap, ( _this.position - 1 ), _this.position);
					}
					
					_this.errors.push(new global::litll.core.parse.ParseErrorEntry(_this.@string, global::litll.core.parse.ParseErrorKind.UnclosedQuote, range));
					if ( ! (_this.config.persevering) ) {
						throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this.errors));
					}
					
				}
				
				this.parent.state = global::litll.core.parse.array.ArrayState.Normal;
			}
		}
		
		
		public virtual void endClosedQuotedString(int endQuoteCount) {
			unchecked {
				global::litll.core.parse.@string.QuotedStringContext _gthis = this;
				if (( endQuoteCount > this.startQuoteCount )) {
					global::litll.core.parse.ParseContext _this = this.top;
					global::litll.core.ds.SourceRange range = new global::litll.core.ds.SourceRange(this.top.sourceMap, ( this.top.position - endQuoteCount ), this.top.position);
					if (( range == null )) {
						range = new global::litll.core.ds.SourceRange(_this.sourceMap, ( _this.position - 1 ), _this.position);
					}
					
					_this.errors.push(new global::litll.core.parse.ParseErrorEntry(_this.@string, global::litll.core.parse.ParseErrorKind.TooManyClosingQuotes(this.startQuoteCount, endQuoteCount), range));
					if ( ! (_this.config.persevering) ) {
						throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this.errors));
					}
					
				}
				
				bool[] isFirstGroup = new bool[]{true};
				int lastIndentSize = this.lastIndent.Length;
				global::haxe.lang.Function addString = new global::litll.core.parse.@string.QuotedStringContext_endClosedQuotedString_230__Fun(lastIndentSize, isFirstGroup, _gthis);
				{
					int _g1 = 0;
					global::Array<object> _g11 = this.storedData;
					while (( _g1 < _g11.length )) {
						global::litll.core.parse.@string.QuotedStringArrayPair pair = ((global::litll.core.parse.@string.QuotedStringArrayPair) (_g11[_g1]) );
						 ++ _g1;
						addString.__hx_invoke3_o(default(double), pair.@string, default(double), false, default(double), pair.tag);
						{
							int _g2 = 0;
							global::Array<object> _g3 = pair.array;
							while (( _g2 < _g3.length )) {
								global::litll.core.LitllArray<object> array = ((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) (_g3[_g2]) ))) );
								 ++ _g2;
								this.parent.pushArray(array);
							}
							
						}
						
					}
					
				}
				
				if (( ( this.currentString.length == 0 ) ||  ! (this.currentLine.isWhite())  )) {
					this.currentString.push(this.currentLine);
				}
				else {
					((global::litll.core.parse.@string.QuotedStringLine) (this.currentString[( this.currentString.length - 1 )]) ).newLine = "";
				}
				
				addString.__hx_invoke3_o(default(double), this.currentString, default(double), true, default(double), this.tag.settle(this.top.position));
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1638129397:
					{
						this.startQuoteCount = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1590554466:
					{
						this.lastIndent = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 5790298:
					{
						this.tag = ((global::litll.core.parse.tag.UnsettledStringTag) (@value) );
						return @value;
					}
					
					
					case 1638129397:
					{
						this.startQuoteCount = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1998201424:
					{
						this.singleQuoted = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 67859985:
					{
						this.state = ((global::litll.core.parse.@string.QuotedStringState) (@value) );
						return @value;
					}
					
					
					case 1805631789:
					{
						this.storedData = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 1955375594:
					{
						this.currentString = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 4518093:
					{
						this.currentLine = ((global::litll.core.parse.@string.QuotedStringLine) (@value) );
						return @value;
					}
					
					
					case 5793429:
					{
						this.top = ((global::litll.core.parse.ParseContext) (@value) );
						return @value;
					}
					
					
					case 1836975402:
					{
						this.parent = ((global::litll.core.parse.array.ArrayContext) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 913309472:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "endClosedQuotedString", 913309472)) );
					}
					
					
					case 1906201721:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "endUnclosedQuotedString", 1906201721)) );
					}
					
					
					case 5047259:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "end", 5047259)) );
					}
					
					
					case 235988664:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addQuotes", 235988664)) );
					}
					
					
					case 1393790903:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "matchQuote", 1393790903)) );
					}
					
					
					case 2004862068:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "newLine", 2004862068)) );
					}
					
					
					case 1276592493:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addIndent", 1276592493)) );
					}
					
					
					case 1571990705:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "processBody", 1571990705)) );
					}
					
					
					case 1900716655:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "process", 1900716655)) );
					}
					
					
					case 68555745:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "store", 68555745)) );
					}
					
					
					case 1590554466:
					{
						return this.lastIndent;
					}
					
					
					case 5790298:
					{
						return this.tag;
					}
					
					
					case 1638129397:
					{
						return this.startQuoteCount;
					}
					
					
					case 1998201424:
					{
						return this.singleQuoted;
					}
					
					
					case 67859985:
					{
						return this.state;
					}
					
					
					case 1805631789:
					{
						return this.storedData;
					}
					
					
					case 1955375594:
					{
						return this.currentString;
					}
					
					
					case 4518093:
					{
						return this.currentLine;
					}
					
					
					case 5793429:
					{
						return this.top;
					}
					
					
					case 1836975402:
					{
						return this.parent;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1638129397:
					{
						return ((double) (this.startQuoteCount) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 913309472:
					{
						this.endClosedQuotedString(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 1906201721:
					{
						this.endUnclosedQuotedString(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 5047259:
					{
						this.end();
						break;
					}
					
					
					case 235988664:
					{
						this.addQuotes(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 1393790903:
					{
						return this.matchQuote(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 2004862068:
					{
						this.newLine(global::haxe.lang.Runtime.toString(dynargs[0]));
						break;
					}
					
					
					case 1276592493:
					{
						this.addIndent(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 1571990705:
					{
						this.processBody(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 1900716655:
					{
						this.process(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 68555745:
					{
						this.store(((global::litll.core.parse.@string.QuotedStringArrayPair) (dynargs[0]) ));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("lastIndent");
			baseArr.push("tag");
			baseArr.push("startQuoteCount");
			baseArr.push("singleQuoted");
			baseArr.push("state");
			baseArr.push("storedData");
			baseArr.push("currentString");
			baseArr.push("currentLine");
			baseArr.push("top");
			baseArr.push("parent");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace litll.core.parse.@string {
	public class QuotedStringContext_endClosedQuotedString_230__Fun : global::haxe.lang.Function {
		
		public QuotedStringContext_endClosedQuotedString_230__Fun(int lastIndentSize, bool[] isFirstGroup, global::litll.core.parse.@string.QuotedStringContext _gthis) : base(3, 0) {
			this.lastIndentSize = lastIndentSize;
			this.isFirstGroup = isFirstGroup;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke3_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2, double __fn_float3, object __fn_dyn3) {
			unchecked {
				global::litll.core.tag.StringTag tag = ( (( __fn_dyn3 == global::haxe.lang.Runtime.undefined )) ? (((global::litll.core.tag.StringTag) (((object) (__fn_float3) )) )) : (((global::litll.core.tag.StringTag) (__fn_dyn3) )) );
				bool isLastGroup = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toBool(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.toBool(__fn_dyn2)) );
				global::Array<object> lines = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (__fn_dyn1) ))) )) );
				string @string = "";
				bool isGroupTop = true;
				{
					int _g = 0;
					while (( _g < lines.length )) {
						global::litll.core.parse.@string.QuotedStringLine line = ((global::litll.core.parse.@string.QuotedStringLine) (lines[_g]) );
						 ++ _g;
						if ( ! ((( ( ( ( lines.length > 1 ) && this.isFirstGroup[0] ) && isGroupTop ) && line.isWhite() ))) ) {
							if (isGroupTop) {
								@string = global::haxe.lang.Runtime.concat(@string, line.content);
							}
							else if (( line.content.Length == 0 )) {
							}
							else if (string.Equals(global::haxe.lang.StringExt.substr(line.content, 0, new global::haxe.lang.Null<int>(this.lastIndentSize, true)), this._gthis.lastIndent)) {
								@string = global::haxe.lang.Runtime.concat(@string, global::haxe.lang.StringExt.substr(line.content, this.lastIndentSize, default(global::haxe.lang.Null<int>)));
							}
							else {
								{
									global::litll.core.parse.ParseContext _this1 = this._gthis.top;
									global::litll.core.ds.SourceRange range1 = new global::litll.core.ds.SourceRange(this._gthis.top.sourceMap, line.startPosition, ( line.startPosition + this.lastIndentSize ));
									if (( range1 == null )) {
										range1 = new global::litll.core.ds.SourceRange(_this1.sourceMap, ( _this1.position - 1 ), _this1.position);
									}
									
									_this1.errors.push(new global::litll.core.parse.ParseErrorEntry(_this1.@string, global::litll.core.parse.ParseErrorKind.UnmatchedIndentWhiteSpaces, range1));
									if ( ! (_this1.config.persevering) ) {
										throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this1.errors));
									}
									
								}
								
								@string = global::haxe.lang.Runtime.concat(@string, line.content);
							}
							
							@string = global::haxe.lang.Runtime.concat(@string, line.newLine);
						}
						
						isGroupTop = false;
					}
					
				}
				
				this._gthis.parent.pushString(new global::litll.core.LitllString(@string, tag));
				this.isFirstGroup[0] = false;
				return null;
			}
		}
		
		
		public int lastIndentSize;
		
		public bool[] isFirstGroup;
		
		public global::litll.core.parse.@string.QuotedStringContext _gthis;
		
	}
}


