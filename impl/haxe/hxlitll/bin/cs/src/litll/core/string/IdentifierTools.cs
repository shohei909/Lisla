// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace litll.core.@string {
	public class IdentifierTools : global::haxe.lang.HxObject {
		
		static IdentifierTools() {
			global::litll.core.@string.IdentifierTools.keywords = new global::Array<object>(new object[]{"function", "class", "static", "var", "if", "else", "while", "do", "for", "break", "return", "continue", "extends", "implements", "import", "switch", "case", "default", "public", "private", "try", "untyped", "catch", "new", "this", "throw", "extern", "enum", "in", "interface", "cast", "override", "dynamic", "typedef", "package", "inline", "using", "null", "true", "false", "abstract"});
			global::litll.core.@string.IdentifierTools.convertableEReg = new global::EReg("[_a-zA-Z][_a-zA-Z0-9]*", "");
			global::litll.core.@string.IdentifierTools.snakeCaseEReg = new global::EReg("[_a-z]+", "");
			global::litll.core.@string.IdentifierTools.escapeTarget = new global::EReg(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("^_*((", global::litll.core.@string.IdentifierTools.keywords.@join(")|(")), "))$"), "");
		}
		
		
		public IdentifierTools(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public IdentifierTools() {
			global::litll.core.@string.IdentifierTools.__hx_ctor_litll_core_string_IdentifierTools(this);
		}
		
		
		public static void __hx_ctor_litll_core_string_IdentifierTools(global::litll.core.@string.IdentifierTools __hx_this) {
		}
		
		
		public static global::Array<object> keywords;
		
		public static global::EReg convertableEReg;
		
		public static global::EReg snakeCaseEReg;
		
		public static global::EReg escapeTarget;
		
		public static global::litll.core.ds.Result toPascalCase(string snakeCaseString) {
			unchecked {
				if ( ! (global::litll.core.@string.IdentifierTools.convertableEReg.match(snakeCaseString)) ) {
					return global::litll.core.ds.Result.Err(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("failed convert ", snakeCaseString), " to PascalCase"));
				}
				
				global::Array<object> segments = global::haxe.lang.StringExt.split(snakeCaseString, "_");
				string result = "";
				{
					int _g = 0;
					while (( _g < segments.length )) {
						string segment = global::haxe.lang.Runtime.toString(segments[_g]);
						 ++ _g;
						if (( segment.Length == 0 )) {
							continue;
						}
						
						result = global::haxe.lang.Runtime.concat(result, global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.substr(segment, 0, new global::haxe.lang.Null<int>(1, true)).ToUpperInvariant(), global::haxe.lang.StringExt.substr(segment, 1, default(global::haxe.lang.Null<int>))));
					}
					
				}
				
				return global::litll.core.ds.Result.Ok(result);
			}
		}
		
		
		public static global::litll.core.ds.Result toCamelCase(string snakeCaseString) {
			unchecked {
				if ( ! (global::litll.core.@string.IdentifierTools.convertableEReg.match(snakeCaseString)) ) {
					return global::litll.core.ds.Result.Err(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("failed convert ", snakeCaseString), " to cascalCase"));
				}
				
				global::Array<object> segments = global::haxe.lang.StringExt.split(snakeCaseString, "_");
				string result = "";
				bool isFirst = true;
				{
					int _g = 0;
					while (( _g < segments.length )) {
						string segment = global::haxe.lang.Runtime.toString(segments[_g]);
						 ++ _g;
						if (( segment.Length == 0 )) {
							continue;
						}
						
						if (isFirst) {
							result = global::haxe.lang.Runtime.concat(result, global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.substr(segment, 0, new global::haxe.lang.Null<int>(1, true)).ToLowerInvariant(), global::haxe.lang.StringExt.substr(segment, 1, default(global::haxe.lang.Null<int>))));
							isFirst = false;
						}
						else {
							result = global::haxe.lang.Runtime.concat(result, global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.substr(segment, 0, new global::haxe.lang.Null<int>(1, true)).ToUpperInvariant(), global::haxe.lang.StringExt.substr(segment, 1, default(global::haxe.lang.Null<int>))));
						}
						
					}
					
				}
				
				return global::litll.core.ds.Result.Ok(result);
			}
		}
		
		
		public static bool isSnakeCase(string @string) {
			return global::litll.core.@string.IdentifierTools.snakeCaseEReg.match(@string);
		}
		
		
		public static string escapeKeyword(string @string) {
			if (global::litll.core.@string.IdentifierTools.escapeTarget.match(@string)) {
				return global::haxe.lang.Runtime.concat("_", @string);
			}
			else {
				return @string;
			}
			
		}
		
		
	}
}


