// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace litll.core.parse.array {
	public class ArrayContext : global::haxe.lang.HxObject {
		
		public ArrayContext(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public ArrayContext(global::litll.core.parse.ParseContext top, global::litll.core.parse.array.ArrayParent parent, bool isInHead, global::litll.core.parse.tag.UnsettledArrayTag tag) {
			global::litll.core.parse.array.ArrayContext.__hx_ctor_litll_core_parse_array_ArrayContext(this, top, parent, isInHead, tag);
		}
		
		
		public static void __hx_ctor_litll_core_parse_array_ArrayContext(global::litll.core.parse.array.ArrayContext __hx_this, global::litll.core.parse.ParseContext top, global::litll.core.parse.array.ArrayParent parent, bool isInHead, global::litll.core.parse.tag.UnsettledArrayTag tag) {
			__hx_this.top = top;
			__hx_this.isInHead = isInHead;
			__hx_this.parent = parent;
			__hx_this.state = global::litll.core.parse.array.ArrayState.Normal;
			__hx_this.tag = tag;
			__hx_this.data = new global::Array<object>(new object[]{});
			__hx_this.elementTag = new global::litll.core.parse.tag.UnsettledLeadingTag(((global::litll.core.ds.SourceMap) (tag.leadingTag.sourceMap) ));
		}
		
		
		public global::litll.core.parse.array.ArrayParent parent;
		
		public global::Array<object> data;
		
		public global::litll.core.parse.tag.UnsettledArrayTag tag;
		
		public global::litll.core.parse.tag.UnsettledLeadingTag elementTag;
		
		public global::litll.core.parse.ParseContext top;
		
		public bool isInHead;
		
		public global::litll.core.parse.array.ArrayState state;
		
		public global::litll.core.parse.tag.UnsettledLeadingTag popTag() {
			global::litll.core.parse.tag.UnsettledLeadingTag oldTag = this.elementTag;
			this.elementTag = new global::litll.core.parse.tag.UnsettledLeadingTag(((global::litll.core.ds.SourceMap) (this.tag.leadingTag.sourceMap) ));
			return oldTag;
		}
		
		
		public virtual global::litll.core.parse.tag.UnsettledStringTag popStringTag(int position) {
			global::litll.core.parse.tag.UnsettledLeadingTag oldTag = this.elementTag;
			this.elementTag = new global::litll.core.parse.tag.UnsettledLeadingTag(((global::litll.core.ds.SourceMap) (this.tag.leadingTag.sourceMap) ));
			return oldTag.toStringTag(position);
		}
		
		
		public virtual global::litll.core.parse.tag.UnsettledArrayTag popArrayTag(int position) {
			global::litll.core.parse.tag.UnsettledLeadingTag oldTag = this.elementTag;
			this.elementTag = new global::litll.core.parse.tag.UnsettledLeadingTag(((global::litll.core.ds.SourceMap) (this.tag.leadingTag.sourceMap) ));
			return oldTag.toArrayTag(position);
		}
		
		
		public virtual void process(int codePoint) {
			unchecked {
				global::litll.core.parse.array.ArrayState _g = this.state;
				int _g1 = ((int) (codePoint) );
				switch (_g.index) {
					case 0:
					{
						switch (_g1) {
							case 9:
							case 10:
							case 13:
							case 32:
							{
								break;
							}
							
							
							case 34:
							{
								this.state = global::litll.core.parse.array.ArrayState.OpeningQuote(false, 1);
								break;
							}
							
							
							case 39:
							{
								this.state = global::litll.core.parse.array.ArrayState.OpeningQuote(true, 1);
								break;
							}
							
							
							case 47:
							{
								this.state = global::litll.core.parse.array.ArrayState.Slash(1);
								break;
							}
							
							
							case 91:
							{
								global::litll.core.parse.tag.UnsettledArrayTag tag = this.popArrayTag(( this.top.position - 1 ));
								this.top.current = new global::litll.core.parse.array.ArrayContext(this.top, global::litll.core.parse.array.ArrayParent.Array(this), false, tag);
								break;
							}
							
							
							case 92:
							{
								this.state = global::litll.core.parse.array.ArrayState.Escape;
								break;
							}
							
							
							case 93:
							{
								{
									global::litll.core.parse.array.ArrayParent _g2 = this.parent;
									switch (_g2.index) {
										case 0:
										{
											global::litll.core.parse.ParseContext _this = this.top;
											global::litll.core.ds.SourceRange range = null;
											if (( range == null )) {
												range = new global::litll.core.ds.SourceRange(_this.sourceMap, ( _this.position - 1 ), _this.position);
											}
											
											_this.errors.push(new global::litll.core.parse.ParseErrorEntry(_this.@string, global::litll.core.parse.ParseErrorKind.TooManyClosingBracket, range));
											if ( ! (_this.config.persevering) ) {
												throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this.errors));
											}
											
											break;
										}
										
										
										case 1:
										{
											this.endArray(((global::litll.core.parse.array.ArrayContext) (_g2.@params[0]) ));
											break;
										}
										
										
										case 2:
										{
											this.endInterporation(((global::litll.core.parse.@string.QuotedStringContext) (_g2.@params[0]) ), ((global::litll.core.parse.@string.QuotedStringArrayPair) (_g2.@params[1]) ));
											break;
										}
										
										
									}
									
								}
								
								this.state = global::litll.core.parse.array.ArrayState.Normal;
								break;
							}
							
							
							default:
							{
								bool tmp = default(bool);
								switch (((int) (codePoint) )) {
									case 11:
									case 12:
									case 133:
									case 160:
									case 5760:
									case 8192:
									case 8193:
									case 8194:
									case 8195:
									case 8196:
									case 8197:
									case 8198:
									case 8199:
									case 8200:
									case 8201:
									case 8202:
									case 8232:
									case 8233:
									case 8239:
									case 8287:
									case 12288:
									{
										tmp = true;
										break;
									}
									
									
									default:
									{
										tmp = false;
										break;
									}
									
								}
								
								if (tmp) {
									global::litll.core.parse.ParseContext _this1 = this.top;
									global::litll.core.ds.SourceRange range1 = null;
									if (( range1 == null )) {
										range1 = new global::litll.core.ds.SourceRange(_this1.sourceMap, ( _this1.position - 1 ), _this1.position);
									}
									
									_this1.errors.push(new global::litll.core.parse.ParseErrorEntry(_this1.@string, global::litll.core.parse.ParseErrorKind.BlacklistedWhitespace(codePoint), range1));
									if ( ! (_this1.config.persevering) ) {
										throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this1.errors));
									}
									
								}
								else {
									global::litll.core.parse.@string.UnquotedStringContext stringContext = new global::litll.core.parse.@string.UnquotedStringContext(this.top, this, this.popStringTag(this.top.position));
									this.state = global::litll.core.parse.array.ArrayState.UnquotedString(stringContext);
									stringContext.process(codePoint);
								}
								
								break;
							}
							
						}
						
						break;
					}
					
					
					case 1:
					{
						switch (_g1) {
							case 9:
							case 10:
							case 13:
							case 32:
							{
								global::litll.core.parse.array.ArrayParent _g3 = this.parent;
								switch (_g3.index) {
									case 0:
									case 1:
									{
										{
											global::litll.core.parse.ParseContext _this2 = this.top;
											global::litll.core.ds.SourceRange range2 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.tag.startPosition, this.top.position);
											if (( range2 == null )) {
												range2 = new global::litll.core.ds.SourceRange(_this2.sourceMap, ( _this2.position - 1 ), _this2.position);
											}
											
											_this2.errors.push(new global::litll.core.parse.ParseErrorEntry(_this2.@string, global::litll.core.parse.ParseErrorKind.InvalidInterpolationSeparator, range2));
											if ( ! (_this2.config.persevering) ) {
												throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this2.errors));
											}
											
										}
										
										this.state = global::litll.core.parse.array.ArrayState.Normal;
										break;
									}
									
									
									case 2:
									{
										global::litll.core.LitllArray<object> arr = new global::litll.core.LitllArray<object>(this.data, this.tag.settle(this.top.position));
										((global::litll.core.parse.@string.QuotedStringArrayPair) (_g3.@params[1]) ).array.push(arr);
										this.top.current = new global::litll.core.parse.array.ArrayContext(this.top, this.parent, false, new global::litll.core.parse.tag.UnsettledLeadingTag(((global::litll.core.ds.SourceMap) (this.top.sourceMap) )).toArrayTag(this.top.position));
										break;
									}
									
									
								}
								
								break;
							}
							
							
							default:
							{
								{
									global::litll.core.parse.ParseContext _this3 = this.top;
									global::litll.core.ds.SourceRange range3 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.tag.startPosition, this.top.position);
									if (( range3 == null )) {
										range3 = new global::litll.core.ds.SourceRange(_this3.sourceMap, ( _this3.position - 1 ), _this3.position);
									}
									
									_this3.errors.push(new global::litll.core.parse.ParseErrorEntry(_this3.@string, global::litll.core.parse.ParseErrorKind.UnquotedEscapeSequence, range3));
									if ( ! (_this3.config.persevering) ) {
										throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this3.errors));
									}
									
								}
								
								this.state = global::litll.core.parse.array.ArrayState.Normal;
								break;
							}
							
						}
						
						break;
					}
					
					
					case 2:
					{
						switch (((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) )) {
							case 1:
							{
								if (( _g1 == 47 )) {
									this.state = global::litll.core.parse.array.ArrayState.Slash(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ));
								}
								else {
									{
										global::litll.core.parse.@string.UnquotedStringContext stringContext1 = new global::litll.core.parse.@string.UnquotedStringContext(this.top, this, this.popStringTag(this.top.position));
										this.state = global::litll.core.parse.array.ArrayState.UnquotedString(stringContext1);
										stringContext1.process(((int) (47) ));
									}
									
									this.top.current.process(codePoint);
								}
								
								break;
							}
							
							
							case 2:
							{
								if (( _g1 == 47 )) {
									this.state = global::litll.core.parse.array.ArrayState.Comment(new global::litll.core.parse.array.CommentContext(this.top, this, global::litll.core.parse.array.CommentKind.Document));
								}
								else {
									global::litll.core.parse.array.CommentContext commentDetail = new global::litll.core.parse.array.CommentContext(this.top, this, global::litll.core.parse.array.CommentKind.Normal);
									this.state = global::litll.core.parse.array.ArrayState.Comment(commentDetail);
									{
										global::litll.core.parse.array.CommentState _g4 = commentDetail.state;
										switch (((int) (codePoint) )) {
											case 10:
											{
												switch (_g4.index) {
													case 0:
													{
														commentDetail.state = global::litll.core.parse.array.CommentState.Body;
														commentDetail.process(codePoint);
														break;
													}
													
													
													case 1:
													case 2:
													{
														commentDetail.writeComment(codePoint);
														switch (((int) (global::haxe.lang.Runtime.toInt(commentDetail.kind.index)) )) {
															case 0:
															{
																commentDetail.parent.state = global::litll.core.parse.array.ArrayState.Normal;
																break;
															}
															
															
															case 1:
															{
																commentDetail.parent.state = global::litll.core.parse.array.ArrayState.Normal;
																break;
															}
															
															
														}
														
														break;
													}
													
													
												}
												
												break;
											}
											
											
											case 13:
											{
												switch (_g4.index) {
													case 0:
													{
														commentDetail.state = global::litll.core.parse.array.CommentState.Body;
														commentDetail.process(codePoint);
														break;
													}
													
													
													case 1:
													{
														commentDetail.writeComment(codePoint);
														commentDetail.state = global::litll.core.parse.array.CommentState.CarriageReturn;
														break;
													}
													
													
													case 2:
													{
														switch (((int) (global::haxe.lang.Runtime.toInt(commentDetail.kind.index)) )) {
															case 0:
															{
																commentDetail.parent.state = global::litll.core.parse.array.ArrayState.Normal;
																break;
															}
															
															
															case 1:
															{
																commentDetail.parent.state = global::litll.core.parse.array.ArrayState.Normal;
																break;
															}
															
															
														}
														
														commentDetail.parent.process(codePoint);
														break;
													}
													
													
												}
												
												break;
											}
											
											
											case 33:
											{
												switch (_g4.index) {
													case 0:
													{
														commentDetail.keeping = true;
														commentDetail.state = global::litll.core.parse.array.CommentState.Body;
														break;
													}
													
													
													case 1:
													{
														commentDetail.writeComment(codePoint);
														break;
													}
													
													
													case 2:
													{
														switch (((int) (global::haxe.lang.Runtime.toInt(commentDetail.kind.index)) )) {
															case 0:
															{
																commentDetail.parent.state = global::litll.core.parse.array.ArrayState.Normal;
																break;
															}
															
															
															case 1:
															{
																commentDetail.parent.state = global::litll.core.parse.array.ArrayState.Normal;
																break;
															}
															
															
														}
														
														commentDetail.parent.process(codePoint);
														break;
													}
													
													
												}
												
												break;
											}
											
											
											default:
											{
												switch (_g4.index) {
													case 0:
													{
														commentDetail.state = global::litll.core.parse.array.CommentState.Body;
														commentDetail.process(codePoint);
														break;
													}
													
													
													case 1:
													{
														commentDetail.writeComment(codePoint);
														break;
													}
													
													
													case 2:
													{
														switch (((int) (global::haxe.lang.Runtime.toInt(commentDetail.kind.index)) )) {
															case 0:
															{
																commentDetail.parent.state = global::litll.core.parse.array.ArrayState.Normal;
																break;
															}
															
															
															case 1:
															{
																commentDetail.parent.state = global::litll.core.parse.array.ArrayState.Normal;
																break;
															}
															
															
														}
														
														commentDetail.parent.process(codePoint);
														break;
													}
													
													
												}
												
												break;
											}
											
										}
										
									}
									
								}
								
								break;
							}
							
							
							default:
							{
								if (( _g1 == 47 )) {
									this.state = global::litll.core.parse.array.ArrayState.Slash(( ((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ) + 1 ));
								}
								else {
									throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat("invalid slash length: ", global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.toInt(_g.@params[0])) ))));
								}
								
								break;
							}
							
						}
						
						break;
					}
					
					
					case 3:
					{
						global::litll.core.parse.array.CommentContext context = ((global::litll.core.parse.array.CommentContext) (_g.@params[0]) );
						{
							global::litll.core.parse.array.CommentState _g5 = context.state;
							switch (((int) (codePoint) )) {
								case 10:
								{
									switch (_g5.index) {
										case 0:
										{
											context.state = global::litll.core.parse.array.CommentState.Body;
											context.process(codePoint);
											break;
										}
										
										
										case 1:
										case 2:
										{
											context.writeComment(codePoint);
											switch (((int) (global::haxe.lang.Runtime.toInt(context.kind.index)) )) {
												case 0:
												{
													context.parent.state = global::litll.core.parse.array.ArrayState.Normal;
													break;
												}
												
												
												case 1:
												{
													context.parent.state = global::litll.core.parse.array.ArrayState.Normal;
													break;
												}
												
												
											}
											
											break;
										}
										
										
									}
									
									break;
								}
								
								
								case 13:
								{
									switch (_g5.index) {
										case 0:
										{
											context.state = global::litll.core.parse.array.CommentState.Body;
											context.process(codePoint);
											break;
										}
										
										
										case 1:
										{
											context.writeComment(codePoint);
											context.state = global::litll.core.parse.array.CommentState.CarriageReturn;
											break;
										}
										
										
										case 2:
										{
											switch (((int) (global::haxe.lang.Runtime.toInt(context.kind.index)) )) {
												case 0:
												{
													context.parent.state = global::litll.core.parse.array.ArrayState.Normal;
													break;
												}
												
												
												case 1:
												{
													context.parent.state = global::litll.core.parse.array.ArrayState.Normal;
													break;
												}
												
												
											}
											
											context.parent.process(codePoint);
											break;
										}
										
										
									}
									
									break;
								}
								
								
								case 33:
								{
									switch (_g5.index) {
										case 0:
										{
											context.keeping = true;
											context.state = global::litll.core.parse.array.CommentState.Body;
											break;
										}
										
										
										case 1:
										{
											context.writeComment(codePoint);
											break;
										}
										
										
										case 2:
										{
											switch (((int) (global::haxe.lang.Runtime.toInt(context.kind.index)) )) {
												case 0:
												{
													context.parent.state = global::litll.core.parse.array.ArrayState.Normal;
													break;
												}
												
												
												case 1:
												{
													context.parent.state = global::litll.core.parse.array.ArrayState.Normal;
													break;
												}
												
												
											}
											
											context.parent.process(codePoint);
											break;
										}
										
										
									}
									
									break;
								}
								
								
								default:
								{
									switch (_g5.index) {
										case 0:
										{
											context.state = global::litll.core.parse.array.CommentState.Body;
											context.process(codePoint);
											break;
										}
										
										
										case 1:
										{
											context.writeComment(codePoint);
											break;
										}
										
										
										case 2:
										{
											switch (((int) (global::haxe.lang.Runtime.toInt(context.kind.index)) )) {
												case 0:
												{
													context.parent.state = global::litll.core.parse.array.ArrayState.Normal;
													break;
												}
												
												
												case 1:
												{
													context.parent.state = global::litll.core.parse.array.ArrayState.Normal;
													break;
												}
												
												
											}
											
											context.parent.process(codePoint);
											break;
										}
										
										
									}
									
									break;
								}
								
							}
							
						}
						
						break;
					}
					
					
					case 4:
					{
						int length = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
						bool singleQuoted = global::haxe.lang.Runtime.toBool(_g.@params[0]);
						switch (((int) (codePoint) )) {
							case 34:
							{
								if (( singleQuoted == false )) {
									this.state = global::litll.core.parse.array.ArrayState.OpeningQuote(singleQuoted, ( length + 1 ));
								}
								else {
									if (( length == 2 )) {
										this.data.push(global::litll.core.Litll.Str(new global::litll.core.LitllString("", this.popStringTag(( this.top.position - 2 )).settle(this.top.position))));
										this.state = global::litll.core.parse.array.ArrayState.Normal;
									}
									else {
										this.state = global::litll.core.parse.array.ArrayState.QuotedString(new global::litll.core.parse.@string.QuotedStringContext(this.top, this, singleQuoted, length, this.popStringTag(( this.top.position - length ))));
									}
									
									this.top.current.process(codePoint);
								}
								
								break;
							}
							
							
							case 39:
							{
								if (( singleQuoted == true )) {
									this.state = global::litll.core.parse.array.ArrayState.OpeningQuote(singleQuoted, ( length + 1 ));
								}
								else {
									if (( length == 2 )) {
										this.data.push(global::litll.core.Litll.Str(new global::litll.core.LitllString("", this.popStringTag(( this.top.position - 2 )).settle(this.top.position))));
										this.state = global::litll.core.parse.array.ArrayState.Normal;
									}
									else {
										this.state = global::litll.core.parse.array.ArrayState.QuotedString(new global::litll.core.parse.@string.QuotedStringContext(this.top, this, singleQuoted, length, this.popStringTag(( this.top.position - length ))));
									}
									
									this.top.current.process(codePoint);
								}
								
								break;
							}
							
							
							default:
							{
								if (( length == 2 )) {
									this.data.push(global::litll.core.Litll.Str(new global::litll.core.LitllString("", this.popStringTag(( this.top.position - 2 )).settle(this.top.position))));
									this.state = global::litll.core.parse.array.ArrayState.Normal;
								}
								else {
									this.state = global::litll.core.parse.array.ArrayState.QuotedString(new global::litll.core.parse.@string.QuotedStringContext(this.top, this, singleQuoted, length, this.popStringTag(( this.top.position - length ))));
								}
								
								this.top.current.process(codePoint);
								break;
							}
							
						}
						
						break;
					}
					
					
					case 5:
					{
						((global::litll.core.parse.@string.QuotedStringContext) (_g.@params[0]) ).process(codePoint);
						break;
					}
					
					
					case 6:
					{
						((global::litll.core.parse.@string.UnquotedStringContext) (_g.@params[0]) ).process(codePoint);
						break;
					}
					
					
				}
				
			}
		}
		
		
		public void processOpeningQuote(int codePoint, bool singleQuoted, int length) {
			unchecked {
				switch (((int) (codePoint) )) {
					case 34:
					{
						if (( singleQuoted == false )) {
							this.state = global::litll.core.parse.array.ArrayState.OpeningQuote(singleQuoted, ( length + 1 ));
						}
						else {
							if (( length == 2 )) {
								this.data.push(global::litll.core.Litll.Str(new global::litll.core.LitllString("", this.popStringTag(( this.top.position - 2 )).settle(this.top.position))));
								this.state = global::litll.core.parse.array.ArrayState.Normal;
							}
							else {
								this.state = global::litll.core.parse.array.ArrayState.QuotedString(new global::litll.core.parse.@string.QuotedStringContext(this.top, this, singleQuoted, length, this.popStringTag(( this.top.position - length ))));
							}
							
							this.top.current.process(codePoint);
						}
						
						break;
					}
					
					
					case 39:
					{
						if (( singleQuoted == true )) {
							this.state = global::litll.core.parse.array.ArrayState.OpeningQuote(singleQuoted, ( length + 1 ));
						}
						else {
							if (( length == 2 )) {
								this.data.push(global::litll.core.Litll.Str(new global::litll.core.LitllString("", this.popStringTag(( this.top.position - 2 )).settle(this.top.position))));
								this.state = global::litll.core.parse.array.ArrayState.Normal;
							}
							else {
								this.state = global::litll.core.parse.array.ArrayState.QuotedString(new global::litll.core.parse.@string.QuotedStringContext(this.top, this, singleQuoted, length, this.popStringTag(( this.top.position - length ))));
							}
							
							this.top.current.process(codePoint);
						}
						
						break;
					}
					
					
					default:
					{
						if (( length == 2 )) {
							this.data.push(global::litll.core.Litll.Str(new global::litll.core.LitllString("", this.popStringTag(( this.top.position - 2 )).settle(this.top.position))));
							this.state = global::litll.core.parse.array.ArrayState.Normal;
						}
						else {
							this.state = global::litll.core.parse.array.ArrayState.QuotedString(new global::litll.core.parse.@string.QuotedStringContext(this.top, this, singleQuoted, length, this.popStringTag(( this.top.position - length ))));
						}
						
						this.top.current.process(codePoint);
						break;
					}
					
				}
				
			}
		}
		
		
		public void startArray() {
			unchecked {
				global::litll.core.parse.tag.UnsettledArrayTag tag = this.popArrayTag(( this.top.position - 1 ));
				this.top.current = new global::litll.core.parse.array.ArrayContext(this.top, global::litll.core.parse.array.ArrayParent.Array(this), false, tag);
			}
		}
		
		
		public void startUnquotedString(int codePoint) {
			global::litll.core.parse.@string.UnquotedStringContext stringContext = new global::litll.core.parse.@string.UnquotedStringContext(this.top, this, this.popStringTag(this.top.position));
			this.state = global::litll.core.parse.array.ArrayState.UnquotedString(stringContext);
			stringContext.process(codePoint);
		}
		
		
		public void endOpennigQuote(bool singleQuoted, int length) {
			unchecked {
				if (( length == 2 )) {
					this.data.push(global::litll.core.Litll.Str(new global::litll.core.LitllString("", this.popStringTag(( this.top.position - 2 )).settle(this.top.position))));
					this.state = global::litll.core.parse.array.ArrayState.Normal;
				}
				else {
					this.state = global::litll.core.parse.array.ArrayState.QuotedString(new global::litll.core.parse.@string.QuotedStringContext(this.top, this, singleQuoted, length, this.popStringTag(( this.top.position - length ))));
				}
				
			}
		}
		
		
		public virtual void endArray(global::litll.core.parse.array.ArrayContext destination) {
			global::litll.core.LitllArray<object> arr = new global::litll.core.LitllArray<object>(this.data, this.tag.settle(this.top.position));
			destination.data.push(global::litll.core.Litll.Arr(arr));
			this.top.current = destination;
		}
		
		
		public virtual void endInterporation(global::litll.core.parse.@string.QuotedStringContext stringContext, global::litll.core.parse.@string.QuotedStringArrayPair store) {
			global::litll.core.LitllArray<object> arr = new global::litll.core.LitllArray<object>(this.data, this.tag.settle(this.top.position));
			store.array.push(arr);
			stringContext.store(store);
			this.top.current = stringContext.parent;
		}
		
		
		public virtual void pushString(global::litll.core.LitllString litllString) {
			this.data.push(global::litll.core.Litll.Str(litllString));
			this.state = global::litll.core.parse.array.ArrayState.Normal;
		}
		
		
		public virtual void pushArray(global::litll.core.LitllArray<object> litll1) {
			this.data.push(global::litll.core.Litll.Arr(litll1));
			this.state = global::litll.core.parse.array.ArrayState.Normal;
		}
		
		
		public virtual void writeDocument(int codePoint) {
			if (this.isInHead) {
				global::litll.core.parse.tag.UnsettledLeadingTag __temp_expr2 = this.tag.leadingTag;
			}
			else {
				global::litll.core.parse.tag.UnsettledLeadingTag __temp_expr1 = this.elementTag;
			}
			
		}
		
		
		public global::litll.core.LitllArray<object> endTop() {
			return new global::litll.core.LitllArray<object>(this.data, this.tag.settle(this.top.position));
		}
		
		
		public global::haxe.ds.Option getData() {
			unchecked {
				global::litll.core.parse.array.ArrayState _g = this.state;
				switch (_g.index) {
					case 0:
					{
						global::litll.core.parse.array.ArrayParent _g1 = this.parent;
						switch (_g1.index) {
							case 0:
							{
								return global::haxe.ds.Option.Some(new global::litll.core.LitllArray<object>(this.data, this.tag.settle(this.top.position)));
							}
							
							
							case 1:
							{
								{
									global::litll.core.parse.ParseContext _this = this.top;
									global::litll.core.ds.SourceRange range = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.tag.startPosition, ( this.tag.startPosition + 1 ));
									if (( range == null )) {
										range = new global::litll.core.ds.SourceRange(_this.sourceMap, ( _this.position - 1 ), _this.position);
									}
									
									_this.errors.push(new global::litll.core.parse.ParseErrorEntry(_this.@string, global::litll.core.parse.ParseErrorKind.UnclosedArray, range));
									if ( ! (_this.config.persevering) ) {
										throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this.errors));
									}
									
								}
								
								this.endArray(((global::litll.core.parse.array.ArrayContext) (_g1.@params[0]) ));
								return global::haxe.ds.Option.None;
							}
							
							
							case 2:
							{
								{
									global::litll.core.parse.ParseContext _this1 = this.top;
									global::litll.core.ds.SourceRange range1 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.tag.startPosition, ( this.tag.startPosition + 1 ));
									if (( range1 == null )) {
										range1 = new global::litll.core.ds.SourceRange(_this1.sourceMap, ( _this1.position - 1 ), _this1.position);
									}
									
									_this1.errors.push(new global::litll.core.parse.ParseErrorEntry(_this1.@string, global::litll.core.parse.ParseErrorKind.UnclosedArray, range1));
									if ( ! (_this1.config.persevering) ) {
										throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this1.errors));
									}
									
								}
								
								this.endInterporation(((global::litll.core.parse.@string.QuotedStringContext) (_g1.@params[0]) ), ((global::litll.core.parse.@string.QuotedStringArrayPair) (_g1.@params[1]) ));
								return global::haxe.ds.Option.None;
							}
							
							
						}
						
						break;
					}
					
					
					case 1:
					{
						{
							global::litll.core.parse.ParseContext _this2 = this.top;
							global::litll.core.ds.SourceRange range2 = new global::litll.core.ds.SourceRange(this.top.sourceMap, this.tag.startPosition, this.top.position);
							if (( range2 == null )) {
								range2 = new global::litll.core.ds.SourceRange(_this2.sourceMap, ( _this2.position - 1 ), _this2.position);
							}
							
							_this2.errors.push(new global::litll.core.parse.ParseErrorEntry(_this2.@string, global::litll.core.parse.ParseErrorKind.UnquotedEscapeSequence, range2));
							if ( ! (_this2.config.persevering) ) {
								throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this2.errors));
							}
							
						}
						
						this.state = global::litll.core.parse.array.ArrayState.Normal;
						return global::haxe.ds.Option.None;
					}
					
					
					case 2:
					{
						{
							global::litll.core.parse.@string.UnquotedStringContext stringContext = new global::litll.core.parse.@string.UnquotedStringContext(this.top, this, this.popStringTag(this.top.position));
							this.state = global::litll.core.parse.array.ArrayState.UnquotedString(stringContext);
							stringContext.process(((int) (47) ));
						}
						
						return global::haxe.ds.Option.None;
					}
					
					
					case 3:
					{
						global::litll.core.parse.array.CommentContext context = ((global::litll.core.parse.array.CommentContext) (_g.@params[0]) );
						switch (((int) (global::haxe.lang.Runtime.toInt(context.kind.index)) )) {
							case 0:
							{
								context.parent.state = global::litll.core.parse.array.ArrayState.Normal;
								break;
							}
							
							
							case 1:
							{
								context.parent.state = global::litll.core.parse.array.ArrayState.Normal;
								break;
							}
							
							
						}
						
						return global::haxe.ds.Option.None;
					}
					
					
					case 4:
					{
						int length = ((int) (global::haxe.lang.Runtime.toInt(_g.@params[1])) );
						if (( length == 2 )) {
							this.data.push(global::litll.core.Litll.Str(new global::litll.core.LitllString("", this.popStringTag(( this.top.position - 2 )).settle(this.top.position))));
							this.state = global::litll.core.parse.array.ArrayState.Normal;
						}
						else {
							this.state = global::litll.core.parse.array.ArrayState.QuotedString(new global::litll.core.parse.@string.QuotedStringContext(this.top, this, global::haxe.lang.Runtime.toBool(_g.@params[0]), length, this.popStringTag(( this.top.position - length ))));
						}
						
						return global::haxe.ds.Option.None;
					}
					
					
					case 5:
					{
						global::litll.core.parse.@string.QuotedStringContext context1 = ((global::litll.core.parse.@string.QuotedStringContext) (_g.@params[0]) );
						{
							global::litll.core.parse.@string.QuotedStringState _g2 = context1.state;
							switch (_g2.index) {
								case 0:
								case 1:
								{
									context1.endUnclosedQuotedString(0);
									break;
								}
								
								
								case 2:
								{
									{
										context1.lastIndent = "";
										context1.currentLine.newLine = "\r";
										context1.currentString.push(context1.currentLine);
										context1.currentLine = new global::litll.core.parse.@string.QuotedStringLine(((int) (context1.top.position) ));
										context1.state = global::litll.core.parse.@string.QuotedStringState.Indent;
									}
									
									context1.endUnclosedQuotedString(0);
									break;
								}
								
								
								case 3:
								{
									int length1 = ((int) (global::haxe.lang.Runtime.toInt(_g2.@params[0])) );
									if (( length1 < context1.startQuoteCount )) {
										context1.endUnclosedQuotedString(length1);
									}
									else {
										context1.endClosedQuotedString(length1);
									}
									
									break;
								}
								
								
								case 4:
								{
									global::litll.core.parse.ParseContext _this3 = context1.top;
									global::litll.core.ds.SourceRange range3 = new global::litll.core.ds.SourceRange(context1.top.sourceMap, context1.tag.startPosition, context1.top.position);
									if (( range3 == null )) {
										range3 = new global::litll.core.ds.SourceRange(_this3.sourceMap, ( _this3.position - 1 ), _this3.position);
									}
									
									_this3.errors.push(new global::litll.core.parse.ParseErrorEntry(_this3.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range3));
									if ( ! (_this3.config.persevering) ) {
										throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this3.errors));
									}
									
									break;
								}
								
								
							}
							
						}
						
						return global::haxe.ds.Option.None;
					}
					
					
					case 6:
					{
						((global::litll.core.parse.@string.UnquotedStringContext) (_g.@params[0]) ).end();
						return global::haxe.ds.Option.None;
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 67859985:
					{
						this.state = ((global::litll.core.parse.array.ArrayState) (@value) );
						return @value;
					}
					
					
					case 1507500847:
					{
						this.isInHead = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 5793429:
					{
						this.top = ((global::litll.core.parse.ParseContext) (@value) );
						return @value;
					}
					
					
					case 634405118:
					{
						this.elementTag = ((global::litll.core.parse.tag.UnsettledLeadingTag) (@value) );
						return @value;
					}
					
					
					case 5790298:
					{
						this.tag = ((global::litll.core.parse.tag.UnsettledArrayTag) (@value) );
						return @value;
					}
					
					
					case 1113806378:
					{
						this.data = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 1836975402:
					{
						this.parent = ((global::litll.core.parse.array.ArrayParent) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 350619104:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getData", 350619104)) );
					}
					
					
					case 2054731130:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "endTop", 2054731130)) );
					}
					
					
					case 1588891418:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeDocument", 1588891418)) );
					}
					
					
					case 1772803423:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "pushArray", 1772803423)) );
					}
					
					
					case 1695518283:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "pushString", 1695518283)) );
					}
					
					
					case 1158519427:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "endInterporation", 1158519427)) );
					}
					
					
					case 596443070:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "endArray", 596443070)) );
					}
					
					
					case 457934357:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "endOpennigQuote", 457934357)) );
					}
					
					
					case 2503796:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "startUnquotedString", 2503796)) );
					}
					
					
					case 1101415895:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "startArray", 1101415895)) );
					}
					
					
					case 1718995411:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "processOpeningQuote", 1718995411)) );
					}
					
					
					case 1900716655:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "process", 1900716655)) );
					}
					
					
					case 1415380210:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "popArrayTag", 1415380210)) );
					}
					
					
					case 777407032:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "popStringTag", 777407032)) );
					}
					
					
					case 2075837769:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "popTag", 2075837769)) );
					}
					
					
					case 67859985:
					{
						return this.state;
					}
					
					
					case 1507500847:
					{
						return this.isInHead;
					}
					
					
					case 5793429:
					{
						return this.top;
					}
					
					
					case 634405118:
					{
						return this.elementTag;
					}
					
					
					case 5790298:
					{
						return this.tag;
					}
					
					
					case 1113806378:
					{
						return this.data;
					}
					
					
					case 1836975402:
					{
						return this.parent;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 350619104:
					{
						return this.getData();
					}
					
					
					case 2054731130:
					{
						return this.endTop();
					}
					
					
					case 1588891418:
					{
						this.writeDocument(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 1772803423:
					{
						this.pushArray(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) (dynargs[0]) ))) ));
						break;
					}
					
					
					case 1695518283:
					{
						this.pushString(((global::litll.core.LitllString) (dynargs[0]) ));
						break;
					}
					
					
					case 1158519427:
					{
						this.endInterporation(((global::litll.core.parse.@string.QuotedStringContext) (dynargs[0]) ), ((global::litll.core.parse.@string.QuotedStringArrayPair) (dynargs[1]) ));
						break;
					}
					
					
					case 596443070:
					{
						this.endArray(((global::litll.core.parse.array.ArrayContext) (dynargs[0]) ));
						break;
					}
					
					
					case 457934357:
					{
						this.endOpennigQuote(global::haxe.lang.Runtime.toBool(dynargs[0]), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ));
						break;
					}
					
					
					case 2503796:
					{
						this.startUnquotedString(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 1101415895:
					{
						this.startArray();
						break;
					}
					
					
					case 1718995411:
					{
						this.processOpeningQuote(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), global::haxe.lang.Runtime.toBool(dynargs[1]), ((int) (global::haxe.lang.Runtime.toInt(dynargs[2])) ));
						break;
					}
					
					
					case 1900716655:
					{
						this.process(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 1415380210:
					{
						return this.popArrayTag(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 777407032:
					{
						return this.popStringTag(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 2075837769:
					{
						return this.popTag();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("state");
			baseArr.push("isInHead");
			baseArr.push("top");
			baseArr.push("elementTag");
			baseArr.push("tag");
			baseArr.push("data");
			baseArr.push("parent");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


