// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace litll.core.parse {
	public class ParseContext : global::haxe.lang.HxObject {
		
		public ParseContext(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public ParseContext(string @string, global::litll.core.parse.ParserConfig config) {
			global::litll.core.parse.ParseContext.__hx_ctor_litll_core_parse_ParseContext(this, @string, config);
		}
		
		
		public static void __hx_ctor_litll_core_parse_ParseContext(global::litll.core.parse.ParseContext __hx_this, string @string, global::litll.core.parse.ParserConfig config) {
			unchecked {
				__hx_this.@string = @string;
				__hx_this.config = config;
				__hx_this.position = 0;
				__hx_this.errors = new global::Array<object>(new object[]{});
				__hx_this.sourceMap = new global::litll.core.ds.SourceMap(0, 0, 0, 1);
				__hx_this.cr = false;
				__hx_this.current = new global::litll.core.parse.array.ArrayContext(__hx_this, global::litll.core.parse.array.ArrayParent.Top, true, new global::litll.core.parse.tag.UnsettledLeadingTag(((global::litll.core.ds.SourceMap) (__hx_this.sourceMap) )).toArrayTag(0));
			}
		}
		
		
		public global::litll.core.parse.ParserConfig config;
		
		public global::Array<object> errors;
		
		public global::litll.core.ds.SourceMap sourceMap;
		
		public int position;
		
		public global::litll.core.parse.array.ArrayContext current;
		
		public bool cr;
		
		public string @string;
		
		public virtual void process(int codePoint) {
			unchecked {
				this.position++;
				int c = ((int) (codePoint) );
				if (( c == 13 )) {
					this.cr = true;
				}
				else if (( c == 10 )) {
					this.cr = false;
					this.sourceMap.addLine(this.position, this.position, this.sourceMap.get_lineNumber(), 0);
				}
				else {
					if (this.cr) {
						this.sourceMap.addLine(( this.position - 1 ), ( this.position - 1 ), this.sourceMap.get_lineNumber(), 0);
					}
					
					this.cr = false;
				}
				
				this.current.process(codePoint);
			}
		}
		
		
		public global::litll.core.ds.Result end() {
			unchecked {
				this.position += 1;
				global::litll.core.LitllArray<object> data = null;
				while (true) {
					global::litll.core.parse.array.ArrayContext _this = this.current;
					global::haxe.ds.Option _g = null;
					global::litll.core.parse.array.ArrayState _g1 = _this.state;
					switch (_g1.index) {
						case 0:
						{
							global::litll.core.parse.array.ArrayParent _g2 = _this.parent;
							switch (_g2.index) {
								case 0:
								{
									_g = global::haxe.ds.Option.Some(new global::litll.core.LitllArray<object>(_this.data, _this.tag.settle(_this.top.position)));
									break;
								}
								
								
								case 1:
								{
									{
										global::litll.core.parse.ParseContext _this1 = _this.top;
										global::litll.core.ds.SourceRange range = new global::litll.core.ds.SourceRange(_this.top.sourceMap, _this.tag.startPosition, ( _this.tag.startPosition + 1 ));
										if (( range == null )) {
											range = new global::litll.core.ds.SourceRange(_this1.sourceMap, ( _this1.position - 1 ), _this1.position);
										}
										
										_this1.errors.push(new global::litll.core.parse.ParseErrorEntry(_this1.@string, global::litll.core.parse.ParseErrorKind.UnclosedArray, range));
										if ( ! (_this1.config.persevering) ) {
											throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this1.errors));
										}
										
									}
									
									_this.endArray(((global::litll.core.parse.array.ArrayContext) (_g2.@params[0]) ));
									_g = global::haxe.ds.Option.None;
									break;
								}
								
								
								case 2:
								{
									{
										global::litll.core.parse.ParseContext _this2 = _this.top;
										global::litll.core.ds.SourceRange range1 = new global::litll.core.ds.SourceRange(_this.top.sourceMap, _this.tag.startPosition, ( _this.tag.startPosition + 1 ));
										if (( range1 == null )) {
											range1 = new global::litll.core.ds.SourceRange(_this2.sourceMap, ( _this2.position - 1 ), _this2.position);
										}
										
										_this2.errors.push(new global::litll.core.parse.ParseErrorEntry(_this2.@string, global::litll.core.parse.ParseErrorKind.UnclosedArray, range1));
										if ( ! (_this2.config.persevering) ) {
											throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this2.errors));
										}
										
									}
									
									_this.endInterporation(((global::litll.core.parse.@string.QuotedStringContext) (_g2.@params[0]) ), ((global::litll.core.parse.@string.QuotedStringArrayPair) (_g2.@params[1]) ));
									_g = global::haxe.ds.Option.None;
									break;
								}
								
								
							}
							
							break;
						}
						
						
						case 1:
						{
							{
								global::litll.core.parse.ParseContext _this3 = _this.top;
								global::litll.core.ds.SourceRange range2 = new global::litll.core.ds.SourceRange(_this.top.sourceMap, _this.tag.startPosition, _this.top.position);
								if (( range2 == null )) {
									range2 = new global::litll.core.ds.SourceRange(_this3.sourceMap, ( _this3.position - 1 ), _this3.position);
								}
								
								_this3.errors.push(new global::litll.core.parse.ParseErrorEntry(_this3.@string, global::litll.core.parse.ParseErrorKind.UnquotedEscapeSequence, range2));
								if ( ! (_this3.config.persevering) ) {
									throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this3.errors));
								}
								
							}
							
							_this.state = global::litll.core.parse.array.ArrayState.Normal;
							_g = global::haxe.ds.Option.None;
							break;
						}
						
						
						case 2:
						{
							{
								global::litll.core.parse.@string.UnquotedStringContext stringContext = new global::litll.core.parse.@string.UnquotedStringContext(_this.top, _this, _this.popStringTag(_this.top.position));
								_this.state = global::litll.core.parse.array.ArrayState.UnquotedString(stringContext);
								stringContext.process(((int) (47) ));
							}
							
							_g = global::haxe.ds.Option.None;
							break;
						}
						
						
						case 3:
						{
							global::litll.core.parse.array.CommentContext context = ((global::litll.core.parse.array.CommentContext) (_g1.@params[0]) );
							switch (((int) (global::haxe.lang.Runtime.toInt(context.kind.index)) )) {
								case 0:
								{
									context.parent.state = global::litll.core.parse.array.ArrayState.Normal;
									break;
								}
								
								
								case 1:
								{
									context.parent.state = global::litll.core.parse.array.ArrayState.Normal;
									break;
								}
								
								
							}
							
							_g = global::haxe.ds.Option.None;
							break;
						}
						
						
						case 4:
						{
							int length = ((int) (global::haxe.lang.Runtime.toInt(_g1.@params[1])) );
							if (( length == 2 )) {
								_this.data.push(global::litll.core.Litll.Str(new global::litll.core.LitllString("", _this.popStringTag(( _this.top.position - 2 )).settle(_this.top.position))));
								_this.state = global::litll.core.parse.array.ArrayState.Normal;
							}
							else {
								_this.state = global::litll.core.parse.array.ArrayState.QuotedString(new global::litll.core.parse.@string.QuotedStringContext(_this.top, _this, global::haxe.lang.Runtime.toBool(_g1.@params[0]), length, _this.popStringTag(( _this.top.position - length ))));
							}
							
							_g = global::haxe.ds.Option.None;
							break;
						}
						
						
						case 5:
						{
							global::litll.core.parse.@string.QuotedStringContext context1 = ((global::litll.core.parse.@string.QuotedStringContext) (_g1.@params[0]) );
							{
								global::litll.core.parse.@string.QuotedStringState _g3 = context1.state;
								switch (_g3.index) {
									case 0:
									case 1:
									{
										context1.endUnclosedQuotedString(0);
										break;
									}
									
									
									case 2:
									{
										{
											context1.lastIndent = "";
											context1.currentLine.newLine = "\r";
											context1.currentString.push(context1.currentLine);
											context1.currentLine = new global::litll.core.parse.@string.QuotedStringLine(((int) (context1.top.position) ));
											context1.state = global::litll.core.parse.@string.QuotedStringState.Indent;
										}
										
										context1.endUnclosedQuotedString(0);
										break;
									}
									
									
									case 3:
									{
										int length1 = ((int) (global::haxe.lang.Runtime.toInt(_g3.@params[0])) );
										if (( length1 < context1.startQuoteCount )) {
											context1.endUnclosedQuotedString(length1);
										}
										else {
											context1.endClosedQuotedString(length1);
										}
										
										break;
									}
									
									
									case 4:
									{
										global::litll.core.parse.ParseContext _this4 = context1.top;
										global::litll.core.ds.SourceRange range3 = new global::litll.core.ds.SourceRange(context1.top.sourceMap, context1.tag.startPosition, context1.top.position);
										if (( range3 == null )) {
											range3 = new global::litll.core.ds.SourceRange(_this4.sourceMap, ( _this4.position - 1 ), _this4.position);
										}
										
										_this4.errors.push(new global::litll.core.parse.ParseErrorEntry(_this4.@string, global::litll.core.parse.ParseErrorKind.InvalidEscapeSequence, range3));
										if ( ! (_this4.config.persevering) ) {
											throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), _this4.errors));
										}
										
										break;
									}
									
									
								}
								
							}
							
							_g = global::haxe.ds.Option.None;
							break;
						}
						
						
						case 6:
						{
							((global::litll.core.parse.@string.UnquotedStringContext) (_g1.@params[0]) ).end();
							_g = global::haxe.ds.Option.None;
							break;
						}
						
						
					}
					
					switch (_g.index) {
						case 0:
						{
							data = ((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) (_g.@params[0]) ))) );
							goto label1;
						}
						
						
						case 1:
						{
							break;
						}
						
						
					}
					
				}
				
				label1: {};
				if (( this.errors.length > 0 )) {
					return global::litll.core.ds.Result.Err(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(data, true))).@value) ))) ), this.errors));
				}
				else {
					return global::litll.core.ds.Result.Ok(data);
				}
				
			}
		}
		
		
		public void error(global::litll.core.parse.ParseErrorKind kind, global::litll.core.ds.SourceRange range) {
			unchecked {
				if (( range == null )) {
					range = new global::litll.core.ds.SourceRange(this.sourceMap, ( this.position - 1 ), this.position);
				}
				
				this.errors.push(new global::litll.core.parse.ParseErrorEntry(this.@string, kind, range));
				if ( ! (this.config.persevering) ) {
					throw global::haxe.lang.HaxeException.wrap(new global::litll.core.parse.ParseError(((global::litll.core.LitllArray<object>) (global::litll.core.LitllArray<object>.__hx_cast<object>(((global::litll.core.LitllArray) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) ))) ), this.errors));
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1257939113:
					{
						this.position = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 288368849:
					{
						this.@string = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 22191:
					{
						this.cr = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 1273207865:
					{
						this.current = ((global::litll.core.parse.array.ArrayContext) (@value) );
						return @value;
					}
					
					
					case 1257939113:
					{
						this.position = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1761135745:
					{
						this.sourceMap = ((global::litll.core.ds.SourceMap) (@value) );
						return @value;
					}
					
					
					case 1365803947:
					{
						this.errors = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 1204967106:
					{
						this.config = ((global::litll.core.parse.ParserConfig) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1932118984:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "error", 1932118984)) );
					}
					
					
					case 5047259:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "end", 5047259)) );
					}
					
					
					case 1900716655:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "process", 1900716655)) );
					}
					
					
					case 288368849:
					{
						return this.@string;
					}
					
					
					case 22191:
					{
						return this.cr;
					}
					
					
					case 1273207865:
					{
						return this.current;
					}
					
					
					case 1257939113:
					{
						return this.position;
					}
					
					
					case 1761135745:
					{
						return this.sourceMap;
					}
					
					
					case 1365803947:
					{
						return this.errors;
					}
					
					
					case 1204967106:
					{
						return this.config;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1257939113:
					{
						return ((double) (this.position) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1932118984:
					{
						this.error(((global::litll.core.parse.ParseErrorKind) (dynargs[0]) ), ((global::litll.core.ds.SourceRange) (dynargs[1]) ));
						break;
					}
					
					
					case 5047259:
					{
						return this.end();
					}
					
					
					case 1900716655:
					{
						this.process(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("string");
			baseArr.push("cr");
			baseArr.push("current");
			baseArr.push("position");
			baseArr.push("sourceMap");
			baseArr.push("errors");
			baseArr.push("config");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


