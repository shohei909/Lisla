// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace litll.idl.std.data.idl {
	public class TypePath : global::haxe.lang.HxObject {
		
		public TypePath(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TypePath(global::litll.idl.std.data.idl.ModulePath modulePath, global::litll.core.LitllString typeName, global::litll.core.tag.StringTag tag) {
			global::litll.idl.std.data.idl.TypePath.__hx_ctor_litll_idl_std_data_idl_TypePath(this, modulePath, typeName, tag);
		}
		
		
		public static void __hx_ctor_litll_idl_std_data_idl_TypePath(global::litll.idl.std.data.idl.TypePath __hx_this, global::litll.idl.std.data.idl.ModulePath modulePath, global::litll.core.LitllString typeName, global::litll.core.tag.StringTag tag) {
			__hx_this.modulePath = modulePath;
			__hx_this.typeName = typeName;
			__hx_this.tag = tag;
		}
		
		
		public static global::litll.core.ds.Result delitllfy(global::litll.core.LitllString @string) {
			unchecked {
				global::litll.core.ds.Result _g = global::litll.idl.std.data.idl.TypePath.create(@string.data, @string.tag);
				switch (_g.index) {
					case 0:
					{
						return global::litll.core.ds.Result.Ok(((global::litll.idl.std.data.idl.TypePath) (_g.@params[0]) ));
					}
					
					
					case 1:
					{
						return global::litll.core.ds.Result.Err(global::litll.idl.delitllfy.DelitllfyErrorKind.Fatal(global::haxe.lang.Runtime.toString(_g.@params[0])));
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static global::litll.core.ds.Result create(string @string, global::litll.core.tag.StringTag tag) {
			return global::litll.idl.std.data.idl.TypePath.createFromArray(global::haxe.lang.StringExt.split(@string, "."), tag);
		}
		
		
		public static global::litll.core.ds.Result createFromArray(global::Array<object> array, global::litll.core.tag.StringTag tag) {
			unchecked {
				if (( array.length == 0 )) {
					return global::litll.core.ds.Result.Err("Type array must not be empty.");
				}
				
				try {
					return global::litll.core.ds.Result.Ok(new global::litll.idl.std.data.idl.TypePath(( (( array.length == 1 )) ? (((global::litll.idl.std.data.idl.ModulePath) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) )) : (((global::litll.idl.std.data.idl.ModulePath) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(new global::litll.idl.std.data.idl.ModulePath(array.slice(0, new global::haxe.lang.Null<int>(( array.length - 1 ), true)), tag), true))).@value) )) ), global::litll.idl.std.data.idl._TypeName.TypeName_Impl_._new(new global::litll.core.LitllString(global::haxe.lang.Runtime.toString(array[( array.length - 1 )]), tag)), tag));
				}
				catch (global::System.Exception __temp_catchallException1){
					global::haxe.lang.Exceptions.exception = __temp_catchallException1;
					object __temp_catchall2 = __temp_catchallException1;
					if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
						__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
					}
					
					if (( __temp_catchall2 is string )) {
						string err = global::haxe.lang.Runtime.toString(__temp_catchall2);
						{
							return global::litll.core.ds.Result.Err(err);
						}
						
					}
					else {
						throw;
					}
					
				}
				
				
				return null;
			}
		}
		
		
		public global::litll.idl.std.data.idl.ModulePath modulePath;
		
		public global::litll.core.LitllString typeName;
		
		public global::litll.core.tag.StringTag tag;
		
		public virtual string toString() {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.toString(global::litll.core.ds._Maybe.Maybe_Impl_.getOrElse<object>(new global::haxe.lang.Null<object>(global::haxe.lang.Runtime.toString((global::litll.core.ds._Maybe.Maybe_Impl_.map<object, object>(new global::haxe.lang.Null<object>(this.modulePath, true), ((global::haxe.lang.Function) (( (( global::litll.idl.std.data.idl.TypePath_toString_71__Fun.__hx_current != null )) ? (global::litll.idl.std.data.idl.TypePath_toString_71__Fun.__hx_current) : (global::litll.idl.std.data.idl.TypePath_toString_71__Fun.__hx_current = ((global::litll.idl.std.data.idl.TypePath_toString_71__Fun) (new global::litll.idl.std.data.idl.TypePath_toString_71__Fun()) )) )) ))).toDynamic()), true), ((object) ("") ))), global::litll.idl.std.data.idl._TypeName.TypeName_Impl_.toString(this.typeName));
		}
		
		
		public virtual global::Array<object> toArray() {
			unchecked {
				global::haxe.ds.Option _g = global::litll.core.ds._Maybe.Maybe_Impl_.toOption<object>(new global::haxe.lang.Null<object>(this.modulePath, true));
				switch (_g.index) {
					case 0:
					{
						string tmp = global::litll.idl.std.data.idl._TypeName.TypeName_Impl_.toString(this.typeName);
						return ((global::litll.idl.std.data.idl.ModulePath) (_g.@params[0]) ).toArray().concat(new global::Array<object>(new object[]{tmp}));
					}
					
					
					case 1:
					{
						return new global::Array<object>(new object[]{global::litll.idl.std.data.idl._TypeName.TypeName_Impl_.toString(this.typeName)});
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public virtual bool isCoreType() {
			unchecked {
				if (( ((int) (global::haxe.lang.Runtime.toInt(global::litll.core.ds._Maybe.Maybe_Impl_.toOption<object>(new global::haxe.lang.Null<object>(this.modulePath, true)).index)) ) == 1 )) {
					if (( string.Equals(global::litll.idl.std.data.idl._TypeName.TypeName_Impl_.toString(this.typeName), "String") || string.Equals(global::litll.idl.std.data.idl._TypeName.TypeName_Impl_.toString(this.typeName), "Array") )) {
						return true;
					}
					else {
						return false;
					}
					
				}
				else {
					return false;
				}
				
			}
		}
		
		
		public virtual global::Array<object> getModuleArray() {
			unchecked {
				global::haxe.ds.Option _g = global::litll.core.ds._Maybe.Maybe_Impl_.toOption<object>(new global::haxe.lang.Null<object>(this.modulePath, true));
				switch (_g.index) {
					case 0:
					{
						return ((global::litll.idl.std.data.idl.ModulePath) (_g.@params[0]) ).toArray();
					}
					
					
					case 1:
					{
						return new global::Array<object>(new object[]{});
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 5790298:
					{
						this.tag = ((global::litll.core.tag.StringTag) (@value) );
						return @value;
					}
					
					
					case 902460965:
					{
						this.typeName = ((global::litll.core.LitllString) (@value) );
						return @value;
					}
					
					
					case 982781041:
					{
						this.modulePath = ((global::litll.idl.std.data.idl.ModulePath) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1993182295:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getModuleArray", 1993182295)) );
					}
					
					
					case 352946627:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "isCoreType", 352946627)) );
					}
					
					
					case 1913895454:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toArray", 1913895454)) );
					}
					
					
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 5790298:
					{
						return this.tag;
					}
					
					
					case 902460965:
					{
						return this.typeName;
					}
					
					
					case 982781041:
					{
						return this.modulePath;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1993182295:
					{
						return this.getModuleArray();
					}
					
					
					case 352946627:
					{
						return this.isCoreType();
					}
					
					
					case 1913895454:
					{
						return this.toArray();
					}
					
					
					case 946786476:
					{
						return this.toString();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("tag");
			baseArr.push("typeName");
			baseArr.push("modulePath");
			base.__hx_getFields(baseArr);
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace litll.idl.std.data.idl {
	public class TypePath_toString_71__Fun : global::haxe.lang.Function {
		
		public TypePath_toString_71__Fun() : base(1, 0) {
		}
		
		
		public static global::litll.idl.std.data.idl.TypePath_toString_71__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::litll.idl.std.data.idl.ModulePath _modulePath = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::litll.idl.std.data.idl.ModulePath) (((object) (__fn_float1) )) )) : (((global::litll.idl.std.data.idl.ModulePath) (__fn_dyn1) )) );
			return global::haxe.lang.Runtime.concat(_modulePath.toString(), ".");
		}
		
		
	}
}


