// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace litll.idl.std.data.idl.path {
	public class TypeGroupPath : global::haxe.lang.HxObject {
		
		public TypeGroupPath(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TypeGroupPath(global::Array<object> path, global::litll.core.tag.StringTag tag) {
			global::litll.idl.std.data.idl.path.TypeGroupPath.__hx_ctor_litll_idl_std_data_idl_path_TypeGroupPath(this, path, tag);
		}
		
		
		public static void __hx_ctor_litll_idl_std_data_idl_path_TypeGroupPath(global::litll.idl.std.data.idl.path.TypeGroupPath __hx_this, global::Array<object> path, global::litll.core.tag.StringTag tag) {
			unchecked {
				__hx_this.tag = tag;
				if (( path.length == 0 )) {
					throw global::haxe.lang.HaxeException.wrap("Type group path must not be empty.");
				}
				
				string lastString = global::haxe.lang.Runtime.toString(path[( path.length - 1 )]);
				if (( lastString.Length == 0 )) {
					throw global::haxe.lang.HaxeException.wrap("Package name\u3000and type name must not be empty.");
				}
				
				{
					global::litll.core.ds.Result _g = global::litll.idl.std.data.idl._TypeName.TypeName_Impl_.create(lastString, tag);
					switch (_g.index) {
						case 0:
						{
							__hx_this.packagePath = ( (( path.length < 2 )) ? (((global::litll.idl.std.data.idl.PackagePath) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) )) : (((global::litll.idl.std.data.idl.PackagePath) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(new global::litll.idl.std.data.idl.PackagePath(path.slice(0, new global::haxe.lang.Null<int>(( path.length - 1 ), true)), tag), true))).@value) )) );
							__hx_this.typeName = ((global::litll.core.LitllString) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(((global::litll.core.LitllString) (_g.@params[0]) ), true))).@value) );
							break;
						}
						
						
						case 1:
						{
							__hx_this.packagePath = ((global::litll.idl.std.data.idl.PackagePath) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(new global::litll.idl.std.data.idl.PackagePath(path, tag), true))).@value) );
							__hx_this.typeName = ((global::litll.core.LitllString) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) );
							break;
						}
						
						
					}
					
				}
				
			}
		}
		
		
		public static global::litll.core.ds.Result delitllfy(global::litll.core.LitllString @string) {
			unchecked {
				global::litll.core.ds.Result _g = global::litll.idl.std.data.idl.path.TypeGroupPath.create(@string.data, @string.tag);
				switch (_g.index) {
					case 0:
					{
						return global::litll.core.ds.Result.Ok(((global::litll.idl.std.data.idl.path.TypeGroupPath) (_g.@params[0]) ));
					}
					
					
					case 1:
					{
						return global::litll.core.ds.Result.Err(global::litll.idl.delitllfy.DelitllfyErrorKind.Fatal(global::haxe.lang.Runtime.toString(_g.@params[0])));
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static global::litll.core.ds.Result create(string @string, global::litll.core.tag.StringTag tag) {
			global::Array<object> array = global::haxe.lang.StringExt.split(@string, ".");
			try {
				return global::litll.core.ds.Result.Ok(new global::litll.idl.std.data.idl.path.TypeGroupPath(array, tag));
			}
			catch (global::System.Exception __temp_catchallException1){
				global::haxe.lang.Exceptions.exception = __temp_catchallException1;
				object __temp_catchall2 = __temp_catchallException1;
				if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
					__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
				}
				
				if (( __temp_catchall2 is string )) {
					string err = global::haxe.lang.Runtime.toString(__temp_catchall2);
					{
						return global::litll.core.ds.Result.Err(err);
					}
					
				}
				else {
					throw;
				}
				
			}
			
			
			return null;
		}
		
		
		public global::litll.idl.std.data.idl.PackagePath packagePath;
		
		public global::litll.core.LitllString typeName;
		
		public global::litll.core.tag.StringTag tag;
		
		public virtual global::litll.idl.std.data.idl.TypePath filter(global::litll.idl.std.data.idl.TypePath typePath, global::litll.idl.std.data.idl.path.TypeGroupPath dest) {
			unchecked {
				string typePathString = typePath.toString();
				string groupString = this.toString();
				if (typePathString.StartsWith(groupString)) {
					string localPath = global::haxe.lang.StringExt.substr(typePathString, groupString.Length, default(global::haxe.lang.Null<int>));
					if (( string.Equals(localPath, "") || localPath.StartsWith(".") )) {
						global::litll.core.ds.Result _g = global::litll.idl.std.data.idl.TypePath.create(global::haxe.lang.Runtime.concat(dest.toString(), localPath), null);
						switch (_g.index) {
							case 0:
							{
								return ((global::litll.idl.std.data.idl.TypePath) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(((global::litll.idl.std.data.idl.TypePath) (_g.@params[0]) ), true))).@value) );
							}
							
							
							case 1:
							{
								return ((global::litll.idl.std.data.idl.TypePath) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) );
							}
							
							
						}
						
					}
					else {
						return ((global::litll.idl.std.data.idl.TypePath) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) );
					}
					
				}
				else {
					return ((global::litll.idl.std.data.idl.TypePath) ((global::litll.core.ds._Maybe.Maybe_Impl_._new<object>(new global::haxe.lang.Null<object>(null, false))).@value) );
				}
				
				return null;
			}
		}
		
		
		public virtual string toString() {
			unchecked {
				string str = null;
				global::haxe.ds.Option _g = global::litll.core.ds._Maybe.Maybe_Impl_.toOption<object>(new global::haxe.lang.Null<object>(this.typeName, true));
				global::haxe.ds.Option _g1 = global::litll.core.ds._Maybe.Maybe_Impl_.toOption<object>(new global::haxe.lang.Null<object>(this.packagePath, true));
				switch (_g1.index) {
					case 0:
					{
						switch (_g.index) {
							case 0:
							{
								str = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(((global::litll.idl.std.data.idl.PackagePath) (_g1.@params[0]) ).toString(), "."), global::litll.idl.std.data.idl._TypeName.TypeName_Impl_.toString(((global::litll.core.LitllString) (_g.@params[0]) )));
								break;
							}
							
							
							case 1:
							{
								str = ((global::litll.idl.std.data.idl.PackagePath) (_g1.@params[0]) ).toString();
								break;
							}
							
							
						}
						
						break;
					}
					
					
					case 1:
					{
						switch (_g.index) {
							case 0:
							{
								str = global::litll.idl.std.data.idl._TypeName.TypeName_Impl_.toString(((global::litll.core.LitllString) (_g.@params[0]) ));
								break;
							}
							
							
							case 1:
							{
								str = "";
								break;
							}
							
							
						}
						
						break;
					}
					
					
				}
				
				return str;
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 5790298:
					{
						this.tag = ((global::litll.core.tag.StringTag) (@value) );
						return @value;
					}
					
					
					case 902460965:
					{
						this.typeName = ((global::litll.core.LitllString) (@value) );
						return @value;
					}
					
					
					case 100628555:
					{
						this.packagePath = ((global::litll.idl.std.data.idl.PackagePath) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 87367608:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "filter", 87367608)) );
					}
					
					
					case 5790298:
					{
						return this.tag;
					}
					
					
					case 902460965:
					{
						return this.typeName;
					}
					
					
					case 100628555:
					{
						return this.packagePath;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return this.toString();
					}
					
					
					case 87367608:
					{
						return this.filter(((global::litll.idl.std.data.idl.TypePath) (dynargs[0]) ), ((global::litll.idl.std.data.idl.path.TypeGroupPath) (dynargs[1]) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("tag");
			baseArr.push("typeName");
			baseArr.push("packagePath");
			base.__hx_getFields(baseArr);
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}


