// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace litll.idl.std.data.idl {
	public class PackagePath : global::haxe.lang.HxObject {
		
		static PackagePath() {
			global::litll.idl.std.data.idl.PackagePath.headEReg = new global::EReg("[a-z]", "");
			global::litll.idl.std.data.idl.PackagePath.bodyEReg = new global::EReg("[0-9a-z_]*", "");
		}
		
		
		public PackagePath(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public PackagePath(global::Array<object> path, global::litll.core.tag.StringTag tag) {
			global::litll.idl.std.data.idl.PackagePath.__hx_ctor_litll_idl_std_data_idl_PackagePath(this, path, tag);
		}
		
		
		public static void __hx_ctor_litll_idl_std_data_idl_PackagePath(global::litll.idl.std.data.idl.PackagePath __hx_this, global::Array<object> path, global::litll.core.tag.StringTag tag) {
			__hx_this.tag = tag;
			{
				int _g = 0;
				while (( _g < path.length )) {
					string segment = global::haxe.lang.Runtime.toString(path[_g]);
					 ++ _g;
					global::litll.idl.std.data.idl.PackagePath.validateElement(segment);
				}
				
			}
			
			__hx_this.path = path;
		}
		
		
		public static global::EReg headEReg;
		
		public static global::EReg bodyEReg;
		
		public static void validateElement(string @string) {
			unchecked {
				if (( @string.Length == 0 )) {
				}
				else if ( ! (global::litll.idl.std.data.idl.PackagePath.headEReg.match(global::haxe.lang.StringExt.substr(@string, 0, new global::haxe.lang.Null<int>(1, true)))) ) {
					throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat("Package name must start with lowercase alphabet: ", @string));
				}
				else if ( ! (global::litll.idl.std.data.idl.PackagePath.bodyEReg.match(global::haxe.lang.StringExt.substr(@string, 1, default(global::haxe.lang.Null<int>)))) ) {
					throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat("Lowercase alphabets, numbers and underscore is only allowed in package name: ", @string));
				}
				
			}
		}
		
		
		public static global::litll.core.ds.Result delitllfy(global::litll.core.LitllString @string) {
			unchecked {
				global::litll.core.ds.Result _g = global::litll.idl.std.data.idl.PackagePath.create(@string.data, @string.tag);
				switch (_g.index) {
					case 0:
					{
						return global::litll.core.ds.Result.Ok(((global::litll.idl.std.data.idl.PackagePath) (_g.@params[0]) ));
					}
					
					
					case 1:
					{
						return global::litll.core.ds.Result.Err(global::litll.idl.delitllfy.DelitllfyErrorKind.Fatal(global::haxe.lang.Runtime.toString(_g.@params[0])));
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static global::litll.core.ds.Result create(string @string, global::litll.core.tag.StringTag tag) {
			global::Array<object> array = global::haxe.lang.StringExt.split(@string, ".");
			try {
				return global::litll.core.ds.Result.Ok(new global::litll.idl.std.data.idl.PackagePath(array, tag));
			}
			catch (global::System.Exception __temp_catchallException1){
				global::haxe.lang.Exceptions.exception = __temp_catchallException1;
				object __temp_catchall2 = __temp_catchallException1;
				if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
					__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
				}
				
				if (( __temp_catchall2 is string )) {
					string err = global::haxe.lang.Runtime.toString(__temp_catchall2);
					{
						return global::litll.core.ds.Result.Err(err);
					}
					
				}
				else {
					throw;
				}
				
			}
			
			
			return null;
		}
		
		
		public global::Array<object> path;
		
		public global::litll.core.tag.StringTag tag;
		
		public virtual string toString() {
			return this.path.@join(".");
		}
		
		
		public virtual global::Array<object> toArray() {
			return this.path;
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 5790298:
					{
						this.tag = ((global::litll.core.tag.StringTag) (@value) );
						return @value;
					}
					
					
					case 1246881189:
					{
						this.path = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1913895454:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toArray", 1913895454)) );
					}
					
					
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 5790298:
					{
						return this.tag;
					}
					
					
					case 1246881189:
					{
						return this.path;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1913895454:
					{
						return this.toArray();
					}
					
					
					case 946786476:
					{
						return this.toString();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("tag");
			baseArr.push("path");
			base.__hx_getFields(baseArr);
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}


