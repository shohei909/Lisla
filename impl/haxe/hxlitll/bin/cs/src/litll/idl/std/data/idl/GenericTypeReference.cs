// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace litll.idl.std.data.idl {
	public class GenericTypeReference : global::haxe.lang.HxObject {
		
		public GenericTypeReference(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public GenericTypeReference(global::litll.idl.std.data.idl.TypePath typePath, global::Array<object> parameters) {
			global::litll.idl.std.data.idl.GenericTypeReference.__hx_ctor_litll_idl_std_data_idl_GenericTypeReference(this, typePath, parameters);
		}
		
		
		public static void __hx_ctor_litll_idl_std_data_idl_GenericTypeReference(global::litll.idl.std.data.idl.GenericTypeReference __hx_this, global::litll.idl.std.data.idl.TypePath typePath, global::Array<object> parameters) {
			__hx_this.typePath = typePath;
			__hx_this.parameters = parameters;
		}
		
		
		public global::litll.idl.std.data.idl.TypePath typePath;
		
		public global::Array<object> parameters;
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1367260842:
					{
						this.parameters = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 924641663:
					{
						this.typePath = ((global::litll.idl.std.data.idl.TypePath) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1367260842:
					{
						return this.parameters;
					}
					
					
					case 924641663:
					{
						return this.typePath;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("parameters");
			baseArr.push("typePath");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


