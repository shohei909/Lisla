// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace litll.idl.std.data.idl._TypeDependenceName {
	public sealed class TypeDependenceName_Impl_ {
		
		public static global::litll.core.LitllString _new(global::litll.core.LitllString @string) {
			if ( ! (global::litll.core.@string.IdentifierTools.isSnakeCase(@string.data)) ) {
				throw global::haxe.lang.HaxeException.wrap("type dependence name must be snake case name");
			}
			
			return ((global::litll.core.LitllString) (@string) );
		}
		
		
		public static global::litll.core.ds.Result delitllfy(global::litll.core.LitllString @string) {
			try {
				return global::litll.core.ds.Result.Ok(global::litll.idl.std.data.idl._TypeDependenceName.TypeDependenceName_Impl_._new(@string));
			}
			catch (global::System.Exception __temp_catchallException1){
				global::haxe.lang.Exceptions.exception = __temp_catchallException1;
				object __temp_catchall2 = __temp_catchallException1;
				if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
					__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
				}
				
				if (( __temp_catchall2 is string )) {
					string err = global::haxe.lang.Runtime.toString(__temp_catchall2);
					{
						return global::litll.core.ds.Result.Err(global::litll.idl.delitllfy.DelitllfyErrorKind.Fatal(err));
					}
					
				}
				else {
					throw;
				}
				
			}
			
			
			return null;
		}
		
		
		public static global::litll.core.ds.Result create(string @string, global::litll.core.tag.StringTag tag) {
			try {
				return global::litll.core.ds.Result.Ok(global::litll.idl.std.data.idl._TypeDependenceName.TypeDependenceName_Impl_._new(new global::litll.core.LitllString(@string, tag)));
			}
			catch (global::System.Exception __temp_catchallException1){
				global::haxe.lang.Exceptions.exception = __temp_catchallException1;
				object __temp_catchall2 = __temp_catchallException1;
				if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
					__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
				}
				
				if (( __temp_catchall2 is string )) {
					string err = global::haxe.lang.Runtime.toString(__temp_catchall2);
					{
						return global::litll.core.ds.Result.Err(err);
					}
					
				}
				else {
					throw;
				}
				
			}
			
			
			return null;
		}
		
		
		public static string toString(global::litll.core.LitllString this1) {
			return this1.data;
		}
		
		
		public static string toVariableName(global::litll.core.LitllString this1) {
			unchecked {
				global::litll.core.ds.Result result = global::litll.core.@string.IdentifierTools.toPascalCase(this1.data);
				string tmp = null;
				switch (result.index) {
					case 0:
					{
						tmp = global::haxe.lang.Runtime.toString(result.@params[0]);
						break;
					}
					
					
					case 1:
					{
						throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.toString(result.@params[0]));
					}
					
					
				}
				
				return global::haxe.lang.Runtime.concat("dependence", tmp);
			}
		}
		
		
	}
}


