// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace litll.idl.std.data.idl {
	public class TypeDefinition : global::haxe.lang.ParamEnum {
		
		public TypeDefinition(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"Newtype", "Tuple", "Enum", "Struct"};
		
		public static global::litll.idl.std.data.idl.TypeDefinition Newtype(global::litll.idl.std.data.idl.TypeNameDeclaration name, global::litll.idl.std.data.idl.TypeReference type) {
			return new global::litll.idl.std.data.idl.TypeDefinition(0, new object[]{name, type});
		}
		
		
		public static global::litll.idl.std.data.idl.TypeDefinition Tuple(global::litll.idl.std.data.idl.TypeNameDeclaration name, global::Array<object> arguments) {
			unchecked {
				return new global::litll.idl.std.data.idl.TypeDefinition(1, new object[]{name, arguments});
			}
		}
		
		
		public static global::litll.idl.std.data.idl.TypeDefinition Enum(global::litll.idl.std.data.idl.TypeNameDeclaration name, global::Array<object> constructors) {
			unchecked {
				return new global::litll.idl.std.data.idl.TypeDefinition(2, new object[]{name, constructors});
			}
		}
		
		
		public static global::litll.idl.std.data.idl.TypeDefinition Struct(global::litll.idl.std.data.idl.TypeNameDeclaration name, global::Array<object> fields) {
			unchecked {
				return new global::litll.idl.std.data.idl.TypeDefinition(3, new object[]{name, fields});
			}
		}
		
		
		public override string getTag() {
			return global::litll.idl.std.data.idl.TypeDefinition.__hx_constructs[this.index];
		}
		
		
	}
}


