// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
public class Type : global::haxe.lang.HxObject {
	
	public Type(global::haxe.lang.EmptyObject empty) {
	}
	
	
	public Type() {
		global::Type.__hx_ctor__Type(this);
	}
	
	
	public static void __hx_ctor__Type(global::Type __hx_this) {
	}
	
	
	public static global::System.Type getClass<T>(T o) {
		if (( ( global::System.Object.ReferenceEquals(((object) (o) ), default(object)) || ( o is global::haxe.lang.DynamicObject ) ) || ( o is global::System.Type ) )) {
			return null;
		}
		
		return o.GetType();
	}
	
	
	public static string getClassName(global::System.Type c) {
		string ret = global::haxe.lang.Runtime.toString(((global::System.Type) (c) ));
		switch (ret) {
			case "System.Double":
			{
				return "Float";
			}
			
			
			case "System.Int32":
			{
				return "Int";
			}
			
			
			case "System.Object":
			{
				return "Dynamic";
			}
			
			
			case "System.String":
			{
				return "String";
			}
			
			
			case "System.Type":
			{
				return "Class";
			}
			
			
			default:
			{
				return global::haxe.lang.Runtime.toString(global::haxe.lang.StringExt.split(ret, "`")[0]);
			}
			
		}
		
	}
	
	
	public static global::Array<object> getInstanceFields(global::System.Type c) {
		unchecked {
			if (global::haxe.lang.Runtime.refEq(c, typeof(string))) {
				return global::haxe.lang.StringRefl.fields;
			}
			
			global::Array<object> ret = new global::Array<object>(new object[]{});
			global::System.Reflection.MemberInfo[] mis = ((global::System.Type) (c) ).GetMembers(((global::System.Reflection.BindingFlags) (( ((global::System.Reflection.BindingFlags) (( ((global::System.Reflection.BindingFlags) (global::System.Reflection.BindingFlags.Public) ) | ((global::System.Reflection.BindingFlags) (global::System.Reflection.BindingFlags.Instance) ) )) ) | ((global::System.Reflection.BindingFlags) (global::System.Reflection.BindingFlags.FlattenHierarchy) ) )) ));
			{
				int _g1 = 0;
				int _g = ( mis as global::System.Array ).Length;
				while (( _g1 < _g )) {
					global::System.Reflection.MemberInfo i = mis[_g1++];
					if (( i is global::System.Reflection.PropertyInfo )) {
						continue;
					}
					
					string n = i.Name;
					if ((  ! (n.StartsWith("__hx_"))  && ( (( (((bool) (( ((uint) (0) ) < n.Length )) )) ? (((int) (n[0]) )) : (-1) )) != 46 ) )) {
						switch (n) {
							case "Equals":
							case "GetHashCode":
							case "GetType":
							case "ToString":
							{
								break;
							}
							
							
							default:
							{
								ret.push(n);
								break;
							}
							
						}
						
					}
					
				}
				
			}
			
			return ret;
		}
	}
	
	
	public static global::Array<object> getClassFields(global::System.Type c) {
		if (global::System.Object.ReferenceEquals(((object) (c) ), ((object) (typeof(string)) ))) {
			return new global::Array<object>(new object[]{"fromCharCode"});
		}
		
		global::Array<object> ret = new global::Array<object>(new object[]{});
		global::System.Reflection.MemberInfo[] infos = ((global::System.Type) (c) ).GetMembers(((global::System.Reflection.BindingFlags) (( ((global::System.Reflection.BindingFlags) (global::System.Reflection.BindingFlags.Public) ) | ((global::System.Reflection.BindingFlags) (global::System.Reflection.BindingFlags.Static) ) )) ));
		{
			int _g1 = 0;
			int _g = ( infos as global::System.Array ).Length;
			while (( _g1 < _g )) {
				string name = infos[_g1++].Name;
				if ( ! (name.StartsWith("__hx_")) ) {
					ret.push(name);
				}
				
			}
			
		}
		
		return ret;
	}
	
	
	public static bool enumEq<T>(T a, T b) {
		if (global::haxe.lang.Runtime.eq(a, default(T))) {
			return global::haxe.lang.Runtime.eq(b, default(T));
		}
		else if (global::haxe.lang.Runtime.eq(b, default(T))) {
			return false;
		}
		else {
			return a.Equals(b);
		}
		
	}
	
	
	public static int enumIndex(object e) {
		if (( e is global::System.Enum )) {
			global::System.Array values = global::System.Enum.GetValues(((global::System.Type) (e.GetType()) ));
			return global::System.Array.IndexOf(((global::System.Array) (values) ), ((object) (e) ));
		}
		else {
			return (((global::haxe.lang.Enum) (e) )).index;
		}
		
	}
	
	
}


