// This file is generated by hxarraytree.
package arraytree.idl.std.arraytree2entity.idl.document;
class TypeDefinitionDocumentArrayTreeToEntity {
    public static function process(context:arraytree.idl.arraytree2entity.ArrayTreeToEntityContext):hxext.ds.Result<arraytree.idl.std.entity.idl.document.TypeDefinitionDocument, Array<arraytree.idl.arraytree2entity.error.ArrayTreeToEntityError>> return switch (context.arraytree.kind) {
        case arraytree.data.tree.al.AlTreeKind.Leaf(_):{
            hxext.ds.Result.Error(arraytree.idl.arraytree2entity.error.ArrayTreeToEntityError.ofArrayTree(context.arraytree, arraytree.idl.arraytree2entity.error.ArrayTreeToEntityErrorKind.CantBeString));
        };
        case arraytree.data.tree.al.AlTreeKind.Arr(array):{
            {
                var arg0 = [];
                var arg1 = haxe.ds.Option.None;
                var arg2 = [];
                var arg3 = [];
                var arg4 = [];
                for (arraytreeData in array) {
                    var context = new arraytree.idl.arraytree2entity.ArrayTreeToEntityContext(arraytreeData, context.config);
                    switch arraytreeData.kind {
                        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (array.length == 2 && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "document_tag"))):arg0.push({
                            var context = new arraytree.idl.arraytree2entity.ArrayTreeToEntityContext(array[1], context.config);
                            switch (arraytree.idl.std.arraytree2entity.idl.TypeReferenceArrayTreeToEntity.process(context)) {
                                case hxext.ds.Result.Ok(data):{
                                    data;
                                };
                                case hxext.ds.Result.Error(data):{
                                    return hxext.ds.Result.Error(data);
                                };
                            };
                        });
                        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (array.length == 2 && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "completion_const"))):arg2.push({
                            var context = new arraytree.idl.arraytree2entity.ArrayTreeToEntityContext(array[1], context.config);
                            switch (arraytree.idl.std.arraytree2entity.core.AnyArrayTreeToEntity.process(context)) {
                                case hxext.ds.Result.Ok(data):{
                                    data;
                                };
                                case hxext.ds.Result.Error(data):{
                                    return hxext.ds.Result.Error(data);
                                };
                            };
                        });
                        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (array.length == 2 && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "completion_type"))):arg3.push({
                            var context = new arraytree.idl.arraytree2entity.ArrayTreeToEntityContext(array[1], context.config);
                            switch (arraytree.idl.std.arraytree2entity.idl.TypeReferenceArrayTreeToEntity.process(context)) {
                                case hxext.ds.Result.Ok(data):{
                                    data;
                                };
                                case hxext.ds.Result.Error(data):{
                                    return hxext.ds.Result.Error(data);
                                };
                            };
                        });
                        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (array.length == 2 && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "highlight")) && array[1].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_))):arg4.push({
                            var context = new arraytree.idl.arraytree2entity.ArrayTreeToEntityContext(array[1], context.config);
                            switch (arraytree.idl.std.arraytree2entity.util.highlight.HighlightScopeArrayTreeToEntity.process(context)) {
                                case hxext.ds.Result.Ok(data):{
                                    data;
                                };
                                case hxext.ds.Result.Error(data):{
                                    return hxext.ds.Result.Error(data);
                                };
                            };
                        });
                        case arraytreeData:return hxext.ds.Result.Error(arraytree.idl.arraytree2entity.error.ArrayTreeToEntityError.ofArrayTree(arraytreeData, arraytree.idl.arraytree2entity.error.ArrayTreeToEntityErrorKind.UnmatchedStructElement(["document_tag", "completion", "completion_const", "completion_type", "highlight"])));
                    };
                };
                var instance = new arraytree.idl.std.entity.idl.document.TypeDefinitionDocument(arg0, arg1, arg2, arg3, arg4);
                hxext.ds.Result.Ok(instance);
            };
        };
    };
}