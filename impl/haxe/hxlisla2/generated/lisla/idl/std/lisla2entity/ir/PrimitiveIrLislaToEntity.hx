// This file is generated by hxarraytree.
package arraytree.idl.std.arraytree2entity.ir;
class PrimitiveIrArrayTreeToEntity {
    public static function process(context:arraytree.idl.arraytree2entity.ArrayTreeToEntityContext):hxext.ds.Result<arraytree.idl.std.entity.ir.PrimitiveIr, Array<arraytree.idl.arraytree2entity.error.ArrayTreeToEntityError>> return switch context.arraytree.kind {
        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (array.length == 3 && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "fixed_int")) && array[1].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_)) && array.data[2].match(arraytree.data.tree.al.AlTreeKind.Leaf(_))):{
            var arrayContext = new arraytree.idl.arraytree2entity.ArrayTreeToEntityArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("fixed_int");
                var arg0 = switch (arrayContext.read(arraytree.idl.std.arraytree2entity.core.UInt64ArrayTreeToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Error(data):{
                        return hxext.ds.Result.Error(data);
                    };
                };
                var arg1 = switch (arrayContext.read(arraytree.idl.std.arraytree2entity.core.BigIntArrayTreeToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Error(data):{
                        return hxext.ds.Result.Error(data);
                    };
                };
                hxext.ds.Result.Ok(arraytree.idl.std.entity.ir.PrimitiveIr.FixedInt(arg0, arg1));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    hxext.ds.Result.Error(error);
                };
            };
        };
        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (array.length == 3 && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "fixed_uint")) && array[1].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_)) && array.data[2].match(arraytree.data.tree.al.AlTreeKind.Leaf(_))):{
            var arrayContext = new arraytree.idl.arraytree2entity.ArrayTreeToEntityArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("fixed_uint");
                var arg0 = switch (arrayContext.read(arraytree.idl.std.arraytree2entity.core.UInt64ArrayTreeToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Error(data):{
                        return hxext.ds.Result.Error(data);
                    };
                };
                var arg1 = switch (arrayContext.read(arraytree.idl.std.arraytree2entity.core.BigUIntArrayTreeToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Error(data):{
                        return hxext.ds.Result.Error(data);
                    };
                };
                hxext.ds.Result.Ok(arraytree.idl.std.entity.ir.PrimitiveIr.FixedUint(arg0, arg1));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    hxext.ds.Result.Error(error);
                };
            };
        };
        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (array.length == 2 && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "variable_int")) && array[1].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_))):{
            var arrayContext = new arraytree.idl.arraytree2entity.ArrayTreeToEntityArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("variable_int");
                var arg0 = switch (arrayContext.read(arraytree.idl.std.arraytree2entity.core.BigIntArrayTreeToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Error(data):{
                        return hxext.ds.Result.Error(data);
                    };
                };
                hxext.ds.Result.Ok(arraytree.idl.std.entity.ir.PrimitiveIr.VariableInt(arg0));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    hxext.ds.Result.Error(error);
                };
            };
        };
        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (array.length == 2 && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "variable_uint")) && array[1].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_))):{
            var arrayContext = new arraytree.idl.arraytree2entity.ArrayTreeToEntityArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("variable_uint");
                var arg0 = switch (arrayContext.read(arraytree.idl.std.arraytree2entity.core.BigUIntArrayTreeToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Error(data):{
                        return hxext.ds.Result.Error(data);
                    };
                };
                hxext.ds.Result.Ok(arraytree.idl.std.entity.ir.PrimitiveIr.VariableUint(arg0));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    hxext.ds.Result.Error(error);
                };
            };
        };
        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (array.length == 2 && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "float64")) && array[1].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_))):{
            var arrayContext = new arraytree.idl.arraytree2entity.ArrayTreeToEntityArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("float64");
                var arg0 = switch (arrayContext.read(arraytree.idl.std.arraytree2entity.core.Float64ArrayTreeToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Error(data):{
                        return hxext.ds.Result.Error(data);
                    };
                };
                hxext.ds.Result.Ok(arraytree.idl.std.entity.ir.PrimitiveIr.Float64(arg0));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    hxext.ds.Result.Error(error);
                };
            };
        };
        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (array.length == 2 && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "boolean")) && array[1].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "true")) && array[1].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "false"))):{
            var arrayContext = new arraytree.idl.arraytree2entity.ArrayTreeToEntityArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("boolean");
                var arg0 = switch (arrayContext.read(arraytree.idl.std.arraytree2entity.core.BooleanArrayTreeToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Error(data):{
                        return hxext.ds.Result.Error(data);
                    };
                };
                hxext.ds.Result.Ok(arraytree.idl.std.entity.ir.PrimitiveIr.Boolean(arg0));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    hxext.ds.Result.Error(error);
                };
            };
        };
        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (array.length == 2 && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "string")) && array[1].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_))):{
            var arrayContext = new arraytree.idl.arraytree2entity.ArrayTreeToEntityArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("string");
                var arg0 = switch (arrayContext.read(arraytree.idl.std.arraytree2entity.StringArrayTreeToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Error(data):{
                        return hxext.ds.Result.Error(data);
                    };
                };
                hxext.ds.Result.Ok(arraytree.idl.std.entity.ir.PrimitiveIr.String(arg0));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    hxext.ds.Result.Error(error);
                };
            };
        };
        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (array.length == 2 && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "binary")) && array[1].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_))):{
            var arrayContext = new arraytree.idl.arraytree2entity.ArrayTreeToEntityArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("binary");
                var arg0 = switch (arrayContext.read(arraytree.idl.std.arraytree2entity.core.BinaryArrayTreeToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Error(data):{
                        return hxext.ds.Result.Error(data);
                    };
                };
                hxext.ds.Result.Ok(arraytree.idl.std.entity.ir.PrimitiveIr.Binary(arg0));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    hxext.ds.Result.Error(error);
                };
            };
        };
        case data:hxext.ds.Result.Error(arraytree.idl.arraytree2entity.error.ArrayTreeToEntityError.ofArrayTree(context.arraytree, arraytree.idl.arraytree2entity.error.ArrayTreeToEntityErrorKind.UnmatchedEnumConstructor(["fixed_int", "fixed_uint", "variable_int", "variable_uint", "float64", "boolean", "string", "binary"])));
    };
}