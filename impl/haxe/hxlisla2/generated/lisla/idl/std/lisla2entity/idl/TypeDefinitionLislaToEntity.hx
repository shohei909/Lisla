// This file is generated by hxarraytree.
package arraytree.idl.std.arraytree2entity.idl;
class TypeDefinitionArrayTreeToEntity {
    public static function process(context:arraytree.idl.arraytree2entity.ArrayTreeToEntityContext):hxext.ds.Result<arraytree.idl.std.entity.idl.TypeDefinition, Array<arraytree.idl.arraytree2entity.error.ArrayTreeToEntityError>> return switch context.arraytree.kind {
        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (array.length == 3 && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "newtype"))):{
            var arrayContext = new arraytree.idl.arraytree2entity.ArrayTreeToEntityArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("newtype");
                var arg0 = switch (arrayContext.read(arraytree.idl.std.arraytree2entity.idl.TypeNameDeclarationArrayTreeToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Error(data):{
                        return hxext.ds.Result.Error(data);
                    };
                };
                var arg1 = switch (arrayContext.read(arraytree.idl.std.arraytree2entity.idl.TypeReferenceArrayTreeToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Error(data):{
                        return hxext.ds.Result.Error(data);
                    };
                };
                hxext.ds.Result.Ok(arraytree.idl.std.entity.idl.TypeDefinition.Newtype(arg0, arg1));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    hxext.ds.Result.Error(error);
                };
            };
        };
        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (2 <= array.length && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "tuple"))):{
            var arrayContext = new arraytree.idl.arraytree2entity.ArrayTreeToEntityArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("tuple");
                var arg0 = switch (arrayContext.read(arraytree.idl.std.arraytree2entity.idl.TypeNameDeclarationArrayTreeToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Error(data):{
                        return hxext.ds.Result.Error(data);
                    };
                };
                var arg1 = switch (arrayContext.readRest(arraytree.idl.std.arraytree2entity.idl.TupleElementArrayTreeToEntity.process, function(data) {
                        return switch data.kind {
                            case arraytree.data.tree.al.AlTreeKind.Leaf(_):true;
                            case arraytree.data.tree.al.AlTreeKind.Arr(array) if (2 <= array.length && array.length <= 3 && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_))):true;
                            case _:false;
                        };
                    })) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Error(data):{
                        return hxext.ds.Result.Error(data);
                    };
                };
                hxext.ds.Result.Ok(arraytree.idl.std.entity.idl.TypeDefinition.Tuple(arg0, arg1));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    hxext.ds.Result.Error(error);
                };
            };
        };
        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (2 <= array.length && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "enum"))):{
            var arrayContext = new arraytree.idl.arraytree2entity.ArrayTreeToEntityArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("enum");
                var arg0 = switch (arrayContext.read(arraytree.idl.std.arraytree2entity.idl.TypeNameDeclarationArrayTreeToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Error(data):{
                        return hxext.ds.Result.Error(data);
                    };
                };
                var arg1 = switch (arrayContext.readRest(arraytree.idl.std.arraytree2entity.idl.EnumConstructorArrayTreeToEntity.process, function(data) {
                        return switch data.kind {
                            case arraytree.data.tree.al.AlTreeKind.Leaf(_):true;
                            case arraytree.data.tree.al.AlTreeKind.Arr(array) if (1 <= array.length && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_))):true;
                            case _:false;
                        };
                    })) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Error(data):{
                        return hxext.ds.Result.Error(data);
                    };
                };
                hxext.ds.Result.Ok(arraytree.idl.std.entity.idl.TypeDefinition.Enum(arg0, arg1));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    hxext.ds.Result.Error(error);
                };
            };
        };
        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (2 <= array.length && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "struct"))):{
            var arrayContext = new arraytree.idl.arraytree2entity.ArrayTreeToEntityArrayContext(array, 0, context.config);
            var data = {
                arrayContext.readLabel("struct");
                var arg0 = switch (arrayContext.read(arraytree.idl.std.arraytree2entity.idl.TypeNameDeclarationArrayTreeToEntity.process)) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Error(data):{
                        return hxext.ds.Result.Error(data);
                    };
                };
                var arg1 = switch (arrayContext.readRest(arraytree.idl.std.arraytree2entity.idl.StructElementArrayTreeToEntity.process, function(data) {
                        return switch data.kind {
                            case arraytree.data.tree.al.AlTreeKind.Leaf(_):true;
                            case arraytree.data.tree.al.AlTreeKind.Arr(array) if (array.length == 1 && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_))):true;
                            case arraytree.data.tree.al.AlTreeKind.Arr(array) if (2 <= array.length && array.length <= 3 && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_))):true;
                            case _:false;
                        };
                    })) {
                    case hxext.ds.Result.Ok(data):{
                        data;
                    };
                    case hxext.ds.Result.Error(data):{
                        return hxext.ds.Result.Error(data);
                    };
                };
                hxext.ds.Result.Ok(arraytree.idl.std.entity.idl.TypeDefinition.Struct(arg0, arg1));
            };
            switch (arrayContext.closeOrError()) {
                case haxe.ds.Option.None:{
                    data;
                };
                case haxe.ds.Option.Some(error):{
                    hxext.ds.Result.Error(error);
                };
            };
        };
        case data:hxext.ds.Result.Error(arraytree.idl.arraytree2entity.error.ArrayTreeToEntityError.ofArrayTree(context.arraytree, arraytree.idl.arraytree2entity.error.ArrayTreeToEntityErrorKind.UnmatchedEnumConstructor(["newtype", "tuple", "enum", "struct"])));
    };
}