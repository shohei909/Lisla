// This file is generated by hxarraytree.
package arraytree.idl.std.arraytree2entity.cli.clidl;
class CommonConfigArrayTreeToEntity {
    public static function process(context:arraytree.idl.arraytree2entity.ArrayTreeToEntityContext):hxext.ds.Result<arraytree.idl.std.entity.cli.clidl.CommonConfig, Array<arraytree.idl.arraytree2entity.error.ArrayTreeToEntityError>> return switch (context.arraytree.kind) {
        case arraytree.data.tree.al.AlTreeKind.Leaf(_):{
            hxext.ds.Result.Error(arraytree.idl.arraytree2entity.error.ArrayTreeToEntityError.ofArrayTree(context.arraytree, arraytree.idl.arraytree2entity.error.ArrayTreeToEntityErrorKind.CantBeString));
        };
        case arraytree.data.tree.al.AlTreeKind.Arr(array):{
            {
                var arg0 = haxe.ds.Option.None;
                var arg1 = [];
                var arg2 = [];
                var arg3 = [];
                for (arraytreeData in array) {
                    var context = new arraytree.idl.arraytree2entity.ArrayTreeToEntityContext(arraytreeData, context.config);
                    switch arraytreeData.kind {
                        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (array.length == 2 && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "description")) && array[1].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_))):switch (arg0) {
                            case haxe.ds.Option.Some(_):{
                                return hxext.ds.Result.Error(arraytree.idl.arraytree2entity.error.ArrayTreeToEntityError.ofArrayTree(arraytreeData, arraytree.idl.arraytree2entity.error.ArrayTreeToEntityErrorKind.StructElementDuplicated("description")));
                            };
                            case haxe.ds.Option.None:{
                                arg0 = haxe.ds.Option.Some({
                                    var context = new arraytree.idl.arraytree2entity.ArrayTreeToEntityContext(array[1], context.config);
                                    switch (arraytree.idl.std.arraytree2entity.StringArrayTreeToEntity.process(context)) {
                                        case hxext.ds.Result.Ok(data):{
                                            data;
                                        };
                                        case hxext.ds.Result.Error(data):{
                                            return hxext.ds.Result.Error(data);
                                        };
                                    };
                                });
                            };
                        };
                        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (2 <= array.length && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "subcommand")) && array[1].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_))):arg1.push(switch (arraytree.idl.std.arraytree2entity.cli.clidl.SubcommandArrayTreeToEntity.process(context)) {
                            case hxext.ds.Result.Ok(data):{
                                data;
                            };
                            case hxext.ds.Result.Error(data):{
                                return hxext.ds.Result.Error(data);
                            };
                        });
                        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (2 <= array.length && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "arg")) && array[1].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_))):arg2.push(switch (arraytree.idl.std.arraytree2entity.cli.clidl.CommandArgumentArrayTreeToEntity.process(context)) {
                            case hxext.ds.Result.Ok(data):{
                                data;
                            };
                            case hxext.ds.Result.Error(data):{
                                return hxext.ds.Result.Error(data);
                            };
                        });
                        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (array.length == 2 && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "input")) && array[1].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "TypeReference"))):arg3.push(switch (arraytree.idl.std.arraytree2entity.cli.clidl.CommandInputArrayTreeToEntity.process(context)) {
                            case hxext.ds.Result.Ok(data):{
                                data;
                            };
                            case hxext.ds.Result.Error(data):{
                                return hxext.ds.Result.Error(data);
                            };
                        });
                        case arraytreeData:return hxext.ds.Result.Error(arraytree.idl.arraytree2entity.error.ArrayTreeToEntityError.ofArrayTree(arraytreeData, arraytree.idl.arraytree2entity.error.ArrayTreeToEntityErrorKind.UnmatchedStructElement(["description", "subcommand", "arg", "input"])));
                    };
                };
                var instance = new arraytree.idl.std.entity.cli.clidl.CommonConfig(arg0, arg1, arg2, arg3);
                hxext.ds.Result.Ok(instance);
            };
        };
    };
}