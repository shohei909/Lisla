// This file is generated by hxarraytree.
package arraytree.idl.std.arraytree2entity.cli.clidl;
class NameConfigArrayTreeToEntity {
    public static function process(context:arraytree.idl.arraytree2entity.ArrayTreeToEntityContext):hxext.ds.Result<arraytree.idl.std.entity.cli.clidl.NameConfig, Array<arraytree.idl.arraytree2entity.error.ArrayTreeToEntityError>> return switch (context.arraytree.kind) {
        case arraytree.data.tree.al.AlTreeKind.Leaf(_):{
            hxext.ds.Result.Error(arraytree.idl.arraytree2entity.error.ArrayTreeToEntityError.ofArrayTree(context.arraytree, arraytree.idl.arraytree2entity.error.ArrayTreeToEntityErrorKind.CantBeString));
        };
        case arraytree.data.tree.al.AlTreeKind.Arr(array):{
            {
                var arg0 = [];
                var arg1 = [];
                for (arraytreeData in array) {
                    var context = new arraytree.idl.arraytree2entity.ArrayTreeToEntityContext(arraytreeData, context.config);
                    switch arraytreeData.kind {
                        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (array.length == 2 && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "short")) && array[1].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_))):arg0.push({
                            var context = new arraytree.idl.arraytree2entity.ArrayTreeToEntityContext(array[1], context.config);
                            switch (arraytree.idl.std.arraytree2entity.cli.clidl.CommandNameArrayTreeToEntity.process(context)) {
                                case hxext.ds.Result.Ok(data):{
                                    data;
                                };
                                case hxext.ds.Result.Error(data):{
                                    return hxext.ds.Result.Error(data);
                                };
                            };
                        });
                        case arraytree.data.tree.al.AlTreeKind.Arr(array) if (array.length == 2 && array[0].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_ => "long")) && array[1].kind.match(arraytree.data.tree.al.AlTreeKind.Leaf(_))):arg1.push({
                            var context = new arraytree.idl.arraytree2entity.ArrayTreeToEntityContext(array[1], context.config);
                            switch (arraytree.idl.std.arraytree2entity.cli.clidl.CommandNameArrayTreeToEntity.process(context)) {
                                case hxext.ds.Result.Ok(data):{
                                    data;
                                };
                                case hxext.ds.Result.Error(data):{
                                    return hxext.ds.Result.Error(data);
                                };
                            };
                        });
                        case arraytreeData:return hxext.ds.Result.Error(arraytree.idl.arraytree2entity.error.ArrayTreeToEntityError.ofArrayTree(arraytreeData, arraytree.idl.arraytree2entity.error.ArrayTreeToEntityErrorKind.UnmatchedStructElement(["short", "long"])));
                    };
                };
                var instance = new arraytree.idl.std.entity.cli.clidl.NameConfig(arg0, arg1);
                hxext.ds.Result.Ok(instance);
            };
        };
    };
}